# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2023-10-09T12:12:45+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, constr


class AccessTypes(Enum):
    Unknown = 'Unknown'
    All = 'All'
    Owner = 'Owner'
    Login = 'Login'
    Read = 'Read'
    ReadMetadata = 'ReadMetadata'
    Write = 'Write'
    Create = 'Create'
    Delete = 'Delete'
    Execute = 'Execute'
    Enable = 'Enable'
    Assign = 'Assign'
    Restore = 'Restore'
    Import = 'Import'
    Export = 'Export'
    Get = 'Get'
    Set = 'Set'
    Update = 'Update'
    Cancel = 'Cancel'
    Use = 'Use'
    AllowUse = 'AllowUse'
    List = 'List'
    Administrative = 'Administrative'
    Delegate = 'Delegate'
    Join = 'Join'
    Invite = 'Invite'
    Leave = 'Leave'
    Share = 'Share'


class AccountsAssociationSchema(BaseModel):
    sourceId: constr(min_length=1) = Field(
        ..., description='Source account ID **Mandatory**\n', title='Sourceid'
    )
    targetId: constr(min_length=1) = Field(
        ...,
        description='Target grouping ID to associate with  **Mandatory**.\n',
        title='Targetid',
    )


class AddCampaignMembershipsResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[Any] = Field(default={}, description='Response data.', title='Data')
    isInventoryPopulated: Optional[bool] = Field(
        default=False,
        description='Is inventory populated',
        title='Isinventorypopulated',
    )
    isCampaignPopulated: Optional[bool] = Field(
        default=False, description='Is campaign populated', title='Iscampaignpopulated'
    )


class AddCampaignPermissionsResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[Any] = Field(default={}, description='Response data.', title='Data')
    isInventoryPopulated: Optional[bool] = Field(
        default=False,
        description='Is inventory populated',
        title='Isinventorypopulated',
    )
    isCampaignPopulated: Optional[bool] = Field(
        default=False, description='Is campaign populated', title='Iscampaignpopulated'
    )


class AssetInheritanceSchema(BaseModel):
    sourceId: constr(min_length=1) = Field(
        ..., description='ID of the source asset. **Mandatory**\n', title='Sourceid'
    )
    targetId: constr(min_length=1) = Field(
        ...,
        description='The ID of the iherited asset (or assets). **Mandatory**\n',
        title='Targetid',
    )


class AssetType(Enum):
    Application = 'Application'
    Database = 'Database'
    Drive = 'Drive'
    File = 'File'
    Folder = 'Folder'
    GitRepository = 'GitRepository'
    Integration = 'Integration'
    Project = 'Project'
    Site = 'Site'
    Table = 'Table'
    Ticket = 'Ticket'
    VirtualMachine = 'VirtualMachine'
    Secret = 'Secret'
    Other = 'Other'


class AssetTypes(Enum):
    Resource = 'Resource'
    File = 'File'
    Folder = 'Folder'
    Drive = 'Drive'
    Site = 'Site'
    Application = 'Application'
    Integration = 'Integration'
    Package = 'Package'
    Project = 'Project'
    Cluster = 'Cluster'
    Dataset = 'Dataset'
    Subscription = 'Subscription'
    Table = 'Table'
    TableRecord = 'TableRecord'
    Disk = 'Disk'
    Image = 'Image'
    Instance = 'Instance'
    Snapshot = 'Snapshot'
    Service = 'Service'
    Topic = 'Topic'
    Bucket = 'Bucket'
    BillingAccount = 'BillingAccount'
    Device = 'Device'
    Calendar = 'Calendar'
    Policy = 'Policy'
    GitRepository = 'GitRepository'
    Network = 'Network'
    Vpc = 'Vpc'
    NetworkInterface = 'NetworkInterface'
    VirtualMachine = 'VirtualMachine'
    NetworkSecurityGroup = 'NetworkSecurityGroup'
    Ticket = 'Ticket'
    NetworkSubnet = 'NetworkSubnet'
    NetworkAcl = 'NetworkAcl'
    RouteTable = 'RouteTable'
    NetworkAddress = 'NetworkAddress'
    Secret = 'Secret'
    Storage = 'Storage'
    Workspace = 'Workspace'
    SharedLink = 'SharedLink'
    Collection = 'Collection'
    Database = 'Database'
    ServerlessFunction = 'ServerlessFunction'
    ServerlessApplication = 'ServerlessApplication'
    Gateway = 'Gateway'
    ImageRepository = 'ImageRepository'
    Resource_BusinessAccount = 'Resource_BusinessAccount'
    LoadBalancer = 'LoadBalancer'
    Listener = 'Listener'


class AssetsInheritance(BaseModel):
    fromId: str = Field(..., title='Fromid')
    toId: str = Field(..., title='Toid')


class AvailableConnectorId(Enum):
    restApiImport = 'restApiImport'


class CampaignAssetSchema(BaseModel):
    id: constr(min_length=1) = Field(
        ..., description='Asset ID. **Mandatory, must be unique.**\n', title='Id'
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The asset ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: constr(min_length=1) = Field(
        ...,
        description='The name of the asset. The default is the Asset ID. **Mandatory**\n',
        title='Name',
    )
    type: Optional[AssetType] = Field(
        default='Other',
        description='The asset types that are supported by Authomize **Mandatory**\n\nPermitted values:\n\n   •\t`Application` (federation) \n   •\t`Database`\n   •\t`Drive`\n   •\t`File`\n   •\t`Folder`\n   •\t`GitRepository`\n   •\t`Integration`\n   •\t`Project`\n   •\t`Site`\n   •\t`Table`\n   •\t`Ticket`\n   •\t`VirtualMachine`\n   •\t`Other`\n\nIf the asset type does not exist use `Other`.\n',
    )
    originType: Optional[str] = Field(
        default=None,
        description='The asset type in the source system.\nThe default is the canonical type (if not mentioned).\n',
        title='Origintype',
    )
    createdAt: Optional[datetime] = Field(
        default=None,
        description='The date (in ISO 8601 format) that the asset was created.\nThe default is `null`.\n',
        title='Createdat',
    )
    lastUsedAt: Optional[datetime] = Field(
        default=None,
        description='The date (in ISO 8601 format) of the last time that the asset was in use.\nThe default is `null`.\n',
        title='Lastusedat',
    )
    description: Optional[str] = Field(
        default=None,
        description='A description of the asset (up to 512 characters).\n',
        title='Description',
    )
    href: Optional[str] = Field(
        default=None,
        description='A link to the asset in the source system.\n',
        title='Href',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None, description='Tags associated with the asset.\n', title='Tags'
    )


class CampaignGroupingSchema(BaseModel):
    id: constr(min_length=1) = Field(
        ..., description='\nGrouping ID. **Mandatory, must be unique.**\n', title='Id'
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The groupping ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: constr(min_length=1) = Field(
        ...,
        description='The name of the grouping. The default is the ID field. **Mandatory**\n',
        title='Name',
    )
    alternativeName: Optional[constr(max_length=256)] = Field(
        default=None, description='Alias of the grouping.', title='Alternativename'
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None, description='Tags on the access grouping.\n', title='Tags'
    )


class CampaignReviewerSchema(BaseModel):
    email: str = Field(..., description="User's work email address.\n", title='Email')
    firstName: Optional[str] = Field(
        default=None, description="User's first name\n", title='Firstname'
    )
    lastName: Optional[str] = Field(
        default=None, description="The user's last name.\n", title='Lastname'
    )


class ConnectorStatus(Enum):
    initializing = 'initializing'
    validating = 'validating'
    failure = 'failure'
    enabled = 'enabled'
    installable = 'installable'
    archived = 'archived'
    disabled = 'disabled'
    deleted = 'deleted'


class ExportResponse(BaseModel):
    exportId: str = Field(..., title='Exportid')
    exportUrl: str = Field(..., title='Exporturl')


class GroupingType(Enum):
    Group = 'Group'
    VirtualGroup = 'VirtualGroup'


class GroupingsAssociationSchema(BaseModel):
    sourceId: constr(min_length=1) = Field(
        ..., description='Grouping source ID **Mandatory**\n', title='Sourceid'
    )
    targetId: constr(min_length=1) = Field(
        ...,
        description='Grouping Target ID  **Mandatory**. The grouping to associate with.\n',
        title='Targetid',
    )


class IdentitiesInheritance(BaseModel):
    fromId: str = Field(..., title='Fromid')
    toId: str = Field(..., title='Toid')


class IdentitySubTypes(Enum):
    ServiceAccount = 'ServiceAccount'
    Workload = 'Workload'
    ApplicationPrincipal = 'ApplicationPrincipal'


class IdentityTypes(Enum):
    Identity = 'Identity'
    Person = 'Person'
    User = 'User'
    Group = 'Group'
    EntitlementProxy = 'EntitlementProxy'
    AccessKey = 'AccessKey'
    ServiceAccount = 'ServiceAccount'
    Alias = 'Alias'
    Domain = 'Domain'
    Organization = 'Organization'
    BusinessAccount = 'BusinessAccount'
    TaskPerformer = 'TaskPerformer'


class IsAliveResponse(BaseModel):
    isAlive: bool = Field(..., description='**isAlive**', title='Isalive')


class MeResponse(BaseModel):
    version: str = Field(..., description='**version**', title='Version')
    id: str = Field(..., description='**id**', title='Id')
    tenant: str = Field(..., description='**tenant**', title='Tenant')


class NewAccountsAssociationRequestSchema(BaseModel):
    sourceId: constr(min_length=1) = Field(
        ..., description='Source account ID **Mandatory**\n', title='Sourceid'
    )
    targetId: constr(min_length=1) = Field(
        ...,
        description='Target grouping ID to associate with  **Mandatory**.\n',
        title='Targetid',
    )


class NewAccountsAssociationResponseDataSchema(BaseModel):
    validSourceIds: List[str] = Field(
        ..., description='List of **valid** source account ids.', title='Validsourceids'
    )
    validTargetIds: List[str] = Field(
        ...,
        description='List of **valid** target grouping ids.',
        title='Validtargetids',
    )
    invalidSourceIds: List[str] = Field(
        ...,
        description='List of **invalid** source account ids.',
        title='Invalidsourceids',
    )
    invalidTargetIds: List[str] = Field(
        ...,
        description='List of **invalid** target grouping ids.',
        title='Invalidtargetids',
    )


class NewAccountsAssociationResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[NewAccountsAssociationResponseDataSchema] = Field(
        default={}, description='Response data.', title='Data'
    )


class NewAccountsAssociationsListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[NewAccountsAssociationRequestSchema] = Field(
        ...,
        description='New Accounts Associations',
        max_items=10000,
        min_items=1,
        title='Data',
    )
    validateOnly: Optional[bool] = Field(
        default=False,
        description='Validate the request without uploading the data into the system.',
        title='Validateonly',
    )


class NewAssetInheritanceRequestSchema(BaseModel):
    sourceId: constr(min_length=1) = Field(
        ..., description='ID of the source asset. **Mandatory**\n', title='Sourceid'
    )
    targetId: constr(min_length=1) = Field(
        ...,
        description='The ID of the iherited asset (or assets). **Mandatory**\n',
        title='Targetid',
    )


class NewAssetRequestSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ..., description='Asset ID. **Mandatory, must be unique.**\n', title='Uniqueid'
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The asset ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: constr(min_length=1) = Field(
        ...,
        description='The name of the asset. The default is the Asset ID. **Mandatory**\n',
        title='Name',
    )
    type: Optional[AssetType] = Field(
        default='Other',
        description='The asset types that are supported by Authomize **Mandatory**\n\nPermitted values:\n\n   •\t`Application` (federation) \n   •\t`Database`\n   •\t`Drive`\n   •\t`File`\n   •\t`Folder`\n   •\t`GitRepository`\n   •\t`Integration`\n   •\t`Project`\n   •\t`Site`\n   •\t`Table`\n   •\t`Ticket`\n   •\t`VirtualMachine`\n   •\t`Other`\n\nIf the asset type does not exist use `Other`.\n',
    )
    alternativeName: Optional[str] = Field(
        default=None,
        description='Any alternative name for the resource, or any other representation of the resource, if it exists.\nThe default is `null`.\n',
        title='Alternativename',
    )
    originType: Optional[str] = Field(
        default=None,
        description='The asset type in the source system.\nThe default is the canonical type (if not mentioned).\n',
        title='Origintype',
    )
    createdAt: Optional[datetime] = Field(
        default=None,
        description='The date (in ISO 8601 format) that the asset was created.\nThe default is `null`.\n',
        title='Createdat',
    )
    lastUsedAt: Optional[datetime] = Field(
        default=None,
        description='The date (in ISO 8601 format) of the last time that the asset was in use.\nThe default is `null`.\n',
        title='Lastusedat',
    )
    description: Optional[str] = Field(
        default=None,
        description='A description of the asset (up to 512 characters).\n',
        title='Description',
    )
    href: Optional[str] = Field(
        default=None,
        description='A link to the asset in the source system.\n',
        title='Href',
    )
    owner: Optional[str] = Field(
        default=None, description='The owner ID', title='Owner'
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None, description='Tags associated with the asset.\n', title='Tags'
    )


class NewAssetsInheritanceListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[NewAssetInheritanceRequestSchema] = Field(
        ...,
        description='New Assets Inheritance',
        max_items=10000,
        min_items=1,
        title='Data',
    )
    validateOnly: Optional[bool] = Field(
        default=False,
        description='Validate the request without uploading the data into the system.',
        title='Validateonly',
    )


class NewAssetsInheritanceResponseDataSchema(BaseModel):
    validSourceIds: List[str] = Field(
        ..., description='List of **valid** source assets ids.', title='Validsourceids'
    )
    validTargetIds: List[str] = Field(
        ..., description='List of **valid** target assets ids.', title='Validtargetids'
    )
    invalidSourceIds: List[str] = Field(
        ...,
        description='List of **invalid** source assets ids.',
        title='Invalidsourceids',
    )
    invalidTargetIds: List[str] = Field(
        ...,
        description='List of **invalid** target assets ids.',
        title='Invalidtargetids',
    )


class NewAssetsInheritanceResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[NewAssetsInheritanceResponseDataSchema] = Field(
        default={}, description='Response data.', title='Data'
    )


class NewAssetsListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[NewAssetRequestSchema] = Field(
        ..., description='New Assets', max_items=10000, min_items=1, title='Data'
    )
    validateOnly: Optional[bool] = Field(
        default=False,
        description='Validate the request without uploading the data into the system.',
        title='Validateonly',
    )


class NewAssetsResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[Any] = Field(default={}, description='Response data.', title='Data')
    validOwnerIds: List[str] = Field(
        ..., description='List of **valid** owner (user) ids.', title='Validownerids'
    )
    invalidOwnerIds: List[str] = Field(
        ...,
        description='List of **invalid** owner (user) ids.',
        title='Invalidownerids',
    )


class Type(Enum):
    GitRepository = 'GitRepository'


class NewGitRepoRequestSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ..., description='Asset ID. **Mandatory, must be unique.**\n', title='Uniqueid'
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The asset ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: constr(min_length=1) = Field(
        ...,
        description='The name of the asset. The default is the Asset ID. **Mandatory**\n',
        title='Name',
    )
    type: Optional[Type] = Field(default='GitRepository', title='Type')
    alternativeName: Optional[str] = Field(
        default=None,
        description='Any alternative name for the resource, or any other representation of the resource, if it exists.\nThe default is `null`.\n',
        title='Alternativename',
    )
    originType: Optional[str] = Field(
        default=None,
        description='The asset type in the source system.\nThe default is the canonical type (if not mentioned).\n',
        title='Origintype',
    )
    createdAt: Optional[datetime] = Field(
        default=None,
        description='The date (in ISO 8601 format) that the asset was created.\nThe default is `null`.\n',
        title='Createdat',
    )
    lastUsedAt: Optional[datetime] = Field(
        default=None,
        description='The date (in ISO 8601 format) of the last time that the asset was in use.\nThe default is `null`.\n',
        title='Lastusedat',
    )
    description: Optional[str] = Field(
        default=None,
        description='A description of the asset (up to 512 characters).\n',
        title='Description',
    )
    href: Optional[str] = Field(
        default=None,
        description='A link to the asset in the source system.\n',
        title='Href',
    )
    owner: Optional[str] = Field(
        default=None, description='The owner ID', title='Owner'
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None, description='Tags associated with the asset.\n', title='Tags'
    )
    isPrivate: Optional[bool] = Field(
        default=False, description='Is Repo Private', title='Isprivate'
    )
    isArchived: Optional[bool] = Field(
        default=False, description='Is Repo Archived', title='Isarchived'
    )
    hasProtectionRules: Optional[bool] = Field(
        default=False,
        description='Does the Repo have protection rules',
        title='Hasprotectionrules',
    )
    mainBranchProtectionRules: Optional[List[str]] = Field(
        default=[],
        description='Protection Rules for main branch',
        title='Mainbranchprotectionrules',
    )
    developBranchProtectionRules: Optional[List[str]] = Field(
        default=[],
        description='Protection Rules for develop branch',
        title='Developbranchprotectionrules',
    )
    vulnerabilityAlertsEnabled: Optional[bool] = Field(
        default=False,
        description='Are alerts for vulnerability enabled or not',
        title='Vulnerabilityalertsenabled',
    )


class NewGitRepoResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[Any] = Field(default={}, description='Response data.', title='Data')
    validOwnerIds: List[str] = Field(
        ..., description='List of **valid** owner (user) ids.', title='Validownerids'
    )
    invalidOwnerIds: List[str] = Field(
        ...,
        description='List of **invalid** owner (user) ids.',
        title='Invalidownerids',
    )


class NewGroupingRequestSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ...,
        description='\nGrouping ID. **Mandatory, must be unique.**\n',
        title='Uniqueid',
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The groupping ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: constr(min_length=1) = Field(
        ...,
        description='The name of the grouping. The default is the ID field. **Mandatory**\n',
        title='Name',
    )
    originType: Optional[str] = Field(
        default=None,
        description='The name of the type of grouping in the source system. The default is `Group`. Example: Group/Alias/AWS Role\n',
        title='Origintype',
    )
    type: Optional[GroupingType] = Field(
        default='Group',
        description='Allowed values are `Group` and `VirtualGroup`.\n\nThe default is `Group`.\n\n`VirtualGroup` are mapped to the Authomize access explorer graph and are not present in other places in the user interface nor are they counted as a group.\n',
    )
    isRole: Optional[bool] = Field(
        default=False,
        description='If `Role`, the grouping represents a role in the source application and the name of the role is the grouping `name`.\n\nThe default is `False`.\n',
        title='Isrole',
    )
    anyoneCanJoinOrLeave: Optional[bool] = Field(
        default=False,
        description="Must be either `ture` or `false`.\nWhen set to `true` users can give themselves membership in this grouping without the grouping's managers' or owners' permission. \nExamples include public groups (M365), Google Groups with specific flags, ...\nValid only when `groupingType = Group`\n",
        title='Anyonecanjoinorleave',
    )
    owner: Optional[str] = Field(
        default=None,
        description='The uniqueId of the user who is the "owner" (or manager) of the group.\n',
        title='Owner',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None, description='Tags on the access grouping.\n', title='Tags'
    )
    alternativeName: Optional[constr(max_length=256)] = Field(
        default=None, description='Alias of the grouping.', title='Alternativename'
    )


class NewGroupingResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[Any] = Field(default={}, description='Response data.', title='Data')
    validOwnerIds: List[str] = Field(
        ..., description='List of **valid** owner (user) ids.', title='Validownerids'
    )
    invalidOwnerIds: List[str] = Field(
        ...,
        description='List of **invalid** owner (user) ids.',
        title='Invalidownerids',
    )


class NewGroupingsAssociationRequestSchema(BaseModel):
    sourceId: constr(min_length=1) = Field(
        ..., description='Grouping source ID **Mandatory**\n', title='Sourceid'
    )
    targetId: constr(min_length=1) = Field(
        ...,
        description='Grouping Target ID  **Mandatory**. The grouping to associate with.\n',
        title='Targetid',
    )


class NewGroupingsAssociationResponseDataSchema(BaseModel):
    validSourceIds: List[str] = Field(
        ...,
        description='List of **valid** source grouping ids.',
        title='Validsourceids',
    )
    validTargetIds: List[str] = Field(
        ...,
        description='List of **valid** target grouping ids.',
        title='Validtargetids',
    )
    invalidSourceIds: List[str] = Field(
        ...,
        description='List of **invalid** source grouping ids.',
        title='Invalidsourceids',
    )
    invalidTargetIds: List[str] = Field(
        ...,
        description='List of **invalid** target grouping ids.',
        title='Invalidtargetids',
    )


class NewGroupingsAssociationResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[NewGroupingsAssociationResponseDataSchema] = Field(
        default={}, description='Response data.', title='Data'
    )


class NewGroupingsAssociationsListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[NewGroupingsAssociationRequestSchema] = Field(
        ...,
        description='New Groupings Associations',
        max_items=10000,
        min_items=1,
        title='Data',
    )
    validateOnly: Optional[bool] = Field(
        default=False,
        description='Validate the request without uploading the data into the system.',
        title='Validateonly',
    )


class NewGroupingsListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[NewGroupingRequestSchema] = Field(
        ..., description='New Groupings', max_items=10000, min_items=1, title='Data'
    )
    validateOnly: Optional[bool] = Field(
        default=False,
        description='Validate the request without uploading the data into the system.',
        title='Validate Only\n',
    )


class NewIdentityResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[Any] = Field(default={}, description='Response data.', title='Data')


class NewPermissionsResponseDataSchema(BaseModel):
    validUserIds: List[str] = Field(
        ..., description='List of **valid** user ids.', title='Validuserids'
    )
    validGroupingIds: List[str] = Field(
        ..., description='List of **valid** grouping ids.', title='Validgroupingids'
    )
    validAssetIds: List[str] = Field(
        ..., description='List of **valid** asset ids.', title='Validassetids'
    )
    validPrivilegeIds: List[str] = Field(
        ..., description='List of **valid** privilege ids.', title='Validprivilegeids'
    )
    invalidUserIds: List[str] = Field(
        ..., description='List of **invalid** user ids.', title='Invaliduserids'
    )
    invalidGroupingIds: List[str] = Field(
        ..., description='List of **invalid** grouping ids.', title='Invalidgroupingids'
    )
    invalidAssetIds: List[str] = Field(
        ..., description='List of **invalid** asset ids.', title='Invalidassetids'
    )
    invalidPrivilegeIds: List[str] = Field(
        ...,
        description='List of **invalid** privilege ids.',
        title='Invalidprivilegeids',
    )


class NewPermissionsResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[NewPermissionsResponseDataSchema] = Field(
        default={}, description='Response data.', title='Data'
    )


class NewPrivilegeGrantsRequestSchema(BaseModel):
    sourceId: constr(min_length=1) = Field(
        ..., description='ID of the source privilege. **Mandatory**\n', title='Sourceid'
    )
    targetId: constr(min_length=1) = Field(
        ...,
        description='ID of the granted privilege. **Mandatory**\n',
        title='Targetid',
    )


class NewPrivilegeGrantsResponseDataSchema(BaseModel):
    validSourceIds: List[str] = Field(
        ...,
        description='List of **valid** source privilege ids.',
        title='Validsourceids',
    )
    validTargetIds: List[str] = Field(
        ...,
        description='List of **valid** target privilege ids.',
        title='Validtargetids',
    )
    invalidSourceIds: List[str] = Field(
        ...,
        description='List of **invalid** source privilege ids.',
        title='Invalidsourceids',
    )
    invalidTargetIds: List[str] = Field(
        ...,
        description='List of **invalid** target privilege ids.',
        title='Invalidtargetids',
    )


class NewPrivilegeGrantsResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[NewPrivilegeGrantsResponseDataSchema] = Field(
        default={}, description='Response data.', title='Data'
    )


class NewPrivilegesGrantsListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[NewPrivilegeGrantsRequestSchema] = Field(
        ...,
        description='New Privileges Grants',
        max_items=10000,
        min_items=1,
        title='Data',
    )
    validateOnly: Optional[bool] = Field(
        default=False,
        description='Validate the request without uploading the data into the system.',
        title='Validateonly',
    )


class NewPrivilegesResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[Any] = Field(default={}, description='Response data.', title='Data')


class NewRestApiConnectorSchema(BaseModel):
    config: Optional[Dict[str, Any]] = Field(default=None, title='Config')
    serviceId: constr(min_length=1) = Field(..., title='Serviceid')


class NewServiceAccountResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[Any] = Field(default={}, description='Response data.', title='Data')


class NewUserResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[Any] = Field(default={}, description='Response data.', title='Data')


class Pagination(BaseModel):
    limit: Optional[int] = Field(default=-1, title='Limit')
    skip: Optional[int] = Field(default=0, title='Skip')
    total: Optional[int] = Field(default=-1, title='Total')
    hasMore: Optional[bool] = Field(default=None, title='Hasmore')
    search_after: Optional[List] = Field(default=None, title='Search After')


class PermissionSourceType(Enum):
    User = 'User'
    Grouping = 'Grouping'


class PrivilegeGrantSchema(BaseModel):
    sourceId: constr(min_length=1) = Field(
        ..., description='ID of the source privilege. **Mandatory**\n', title='Sourceid'
    )
    targetId: constr(min_length=1) = Field(
        ...,
        description='ID of the granted privilege. **Mandatory**\n',
        title='Targetid',
    )


class PrivilegeType(Enum):
    Administrative = 'Administrative'
    Unknown = 'Unknown'
    Read = 'Read'
    ReadMetadata = 'ReadMetadata'
    Write = 'Write'
    Create = 'Create'
    Delete = 'Delete'
    Execute = 'Execute'
    Enable = 'Enable'
    Assign = 'Assign'
    Restore = 'Restore'
    Import = 'Import'
    Export = 'Export'
    Update = 'Update'
    Cancel = 'Cancel'
    Use = 'Use'
    Delegate = 'Delegate'
    Join = 'Join'
    Invite = 'Invite'
    Share = 'Share'


class RequestSubmitResponse(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')


class RestApiConnectorSchema(BaseModel):
    config: Optional[Dict[str, Any]] = Field(default=None, title='Config')
    serviceId: Optional[str] = Field(default='', title='Serviceid')
    id: str = Field(..., title='Id')
    createdAt: Optional[datetime] = Field(default=None, title='Createdat')
    lastSyncedAt: Optional[str] = Field(default=None, title='Lastsyncedat')
    lastError: Optional[str] = Field(default=None, title='Lasterror')
    modifiedAt: Optional[datetime] = Field(default=None, title='Modifiedat')
    status: Optional[ConnectorStatus] = 'disabled'
    serviceType: str = Field(..., title='Servicetype')
    availableConnectorId: Optional[AvailableConnectorId] = 'restApiImport'
    actorType: Optional[str] = Field(default=None, title='Actortype')
    actorId: Optional[str] = Field(default=None, title='Actorid')


class SearchAccountsAssociationsListResponseSchema(BaseModel):
    data: List[AccountsAssociationSchema] = Field(
        ..., description='Accounts Associations', title='Data'
    )


class SearchAssetsInheritanceListResponseSchema(BaseModel):
    data: List[AssetInheritanceSchema] = Field(
        ..., description='Assets Inheritance', title='Data'
    )


class SearchGroupingsAssociationsListResponseSchema(BaseModel):
    data: List[GroupingsAssociationSchema] = Field(
        ..., description='Groupings Associations', title='Data'
    )


class SearchPrivilegeGrantsListResponseSchema(BaseModel):
    data: List[PrivilegeGrantSchema] = Field(
        ..., description='Privilege Grants', title='Data'
    )


class ServiceAccountType(Enum):
    ServiceAccount = 'ServiceAccount'
    UserAccountAsServiceAccount = 'UserAccountAsServiceAccount'
    CloudWorkload = 'CloudWorkload'
    ApplicationPrincipal = 'ApplicationPrincipal'


class ServiceDescription(BaseModel):
    name: str = Field(..., title='Name')
    icon: Optional[str] = Field(default=None, title='Icon')


class SubmitResponse(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )


class TransactionStateType(Enum):
    Applying = 'Applying'
    Complete = 'Complete'
    Failed = 'Failed'
    Ingest = 'Ingest'
    IngestChunk = 'IngestChunk'
    PostProcess = 'PostProcess'
    Queue = 'Queue'


class UpdateAppSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    name: Optional[str] = Field(
        default=None, description='The name of the Application.\n', title='Name'
    )
    logo_url_sync: Optional[bool] = Field(
        default=None,
        description='Ensure that the Application logo is the same as in the integration.',
        title='Logo Url Sync',
    )


class UpdateAssetRequestSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ..., description='Asset ID. **Mandatory, must be unique.**\n', title='Uniqueid'
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The asset ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: constr(min_length=1) = Field(
        ...,
        description='The name of the asset. The default is the Asset ID. **Mandatory**\n',
        title='Name',
    )
    type: Optional[AssetType] = Field(
        default='Other',
        description='The asset types that are supported by Authomize **Mandatory**\n\nPermitted values:\n\n   •\t`Application` (federation) \n   •\t`Database`\n   •\t`Drive`\n   •\t`File`\n   •\t`Folder`\n   •\t`GitRepository`\n   •\t`Integration`\n   •\t`Project`\n   •\t`Site`\n   •\t`Table`\n   •\t`Ticket`\n   •\t`VirtualMachine`\n   •\t`Other`\n\nIf the asset type does not exist use `Other`.\n',
    )
    alternativeName: Optional[str] = Field(
        default=None,
        description='Any alternative name for the resource, or any other representation of the resource, if it exists.\nThe default is `null`.\n',
        title='Alternativename',
    )
    originType: Optional[str] = Field(
        default=None,
        description='The asset type in the source system.\nThe default is the canonical type (if not mentioned).\n',
        title='Origintype',
    )
    createdAt: Optional[datetime] = Field(
        default=None,
        description='The date (in ISO 8601 format) that the asset was created.\nThe default is `null`.\n',
        title='Createdat',
    )
    lastUsedAt: Optional[datetime] = Field(
        default=None,
        description='The date (in ISO 8601 format) of the last time that the asset was in use.\nThe default is `null`.\n',
        title='Lastusedat',
    )
    description: Optional[str] = Field(
        default=None,
        description='A description of the asset (up to 512 characters).\n',
        title='Description',
    )
    href: Optional[str] = Field(
        default=None,
        description='A link to the asset in the source system.\n',
        title='Href',
    )
    owner: Optional[str] = Field(
        default=None, description='The owner ID', title='Owner'
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None, description='Tags associated with the asset.\n', title='Tags'
    )


class UpdateAssetsListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[UpdateAssetRequestSchema] = Field(
        ..., description='Update Assets', max_items=10000, min_items=1, title='Data'
    )


class UpdateGroupingsRequestSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ...,
        description='\nGrouping ID. **Mandatory, must be unique.**\n',
        title='Uniqueid',
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The groupping ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: constr(min_length=1) = Field(
        ...,
        description='The name of the grouping. The default is the ID field. **Mandatory**\n',
        title='Name',
    )
    originType: Optional[str] = Field(
        default=None,
        description='The name of the type of grouping in the source system. The default is `Group`. Example: Group/Alias/AWS Role\n',
        title='Origintype',
    )
    type: Optional[GroupingType] = Field(
        default='Group',
        description='Allowed values are `Group` and `VirtualGroup`.\n\nThe default is `Group`.\n\n`VirtualGroup` are mapped to the Authomize access explorer graph and are not present in other places in the user interface nor are they counted as a group.\n',
    )
    isRole: Optional[bool] = Field(
        default=False,
        description='If `Role`, the grouping represents a role in the source application and the name of the role is the grouping `name`.\n\nThe default is `False`.\n',
        title='Isrole',
    )
    anyoneCanJoinOrLeave: Optional[bool] = Field(
        default=False,
        description="Must be either `ture` or `false`.\nWhen set to `true` users can give themselves membership in this grouping without the grouping's managers' or owners' permission. \nExamples include public groups (M365), Google Groups with specific flags, ...\nValid only when `groupingType = Group`\n",
        title='Anyonecanjoinorleave',
    )
    owner: Optional[str] = Field(
        default=None,
        description='The uniqueId of the user who is the "owner" (or manager) of the group.\n',
        title='Owner',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None, description='Tags on the access grouping.\n', title='Tags'
    )
    alternativeName: Optional[constr(max_length=256)] = Field(
        default=None, description='Alias of the grouping.', title='Alternativename'
    )


class UpdateGroupingsResponseSchema(BaseModel):
    acceptedTimestamp: Optional[datetime] = Field(
        default=None,
        description='**The accepted time of the request**',
        title='Acceptedtimestamp',
    )
    requestId: str = Field(..., description='**Request id**', title='Requestid')
    numberOfAcceptedEntities: int = Field(
        ...,
        description='**The number of entities that pass validation and uploaded**',
        title='Numberofacceptedentities',
    )
    data: Optional[Any] = Field(default={}, description='Response data.', title='Data')


class UpdatePrivilegeRequestSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ...,
        description='Privilege ID.\n\nIf not defined, set as originName. **Mandatory, must be unique.**\n',
        title='Uniqueid',
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The privilege ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    type: Optional[PrivilegeType] = Field(
        default=None,
        description='The "canonical" privilege types that are supported by Authomize off-the-shelf: **Mandatory**\n\nPermitted values: \n   •\t`Administrative`\n   •\t`Login`\n   •\t`Data Read`\n   •\t`Metadata Read`\n   •\t`Data Write`\n   •\t`Metadata Write`\n   •\t`Data Create`\n   •\t`Metadata Create`\n   •\t`Data Delete`\n   •\t`Metadata Delete`\n\n',
    )
    originName: Optional[str] = Field(
        default=None,
        description='The privilege name in the source system.',
        title='Originname',
    )


class UpdatePrivilegesListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[UpdatePrivilegeRequestSchema] = Field(
        ..., description='Update Privileges', max_items=10000, min_items=1, title='Data'
    )


class UserStatus(Enum):
    Staged = 'Staged'
    Enabled = 'Enabled'
    Disabled = 'Disabled'
    Suspended = 'Suspended'
    Deleted = 'Deleted'
    Unknown = 'Unknown'


class ValidationError(BaseModel):
    loc: List[str] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class AccessDescription(BaseModel):
    fromIdentityId: str = Field(..., title='Fromidentityid')
    toAssetId: Optional[str] = Field(default=None, title='Toassetid')
    accessType: AccessTypes
    accessName: Optional[str] = Field(default=None, title='Accessname')


class AssetDescription(BaseModel):
    id: str = Field(..., title='Id')
    name: str = Field(..., title='Name')
    customName: Optional[str] = Field(default=None, title='Customname')
    type: AssetTypes
    description: Optional[str] = Field(default=None, title='Description')
    logoUrl: Optional[str] = Field(default=None, title='Logourl')
    href: Optional[str] = Field(default=None, title='Href')
    createdAt: Optional[datetime] = Field(default=None, title='Createdat')
    isAuxiliary: Optional[bool] = Field(default=None, title='Isauxiliary')
    service: Optional[str] = Field(default=None, title='Service')
    isFederated: Optional[bool] = Field(default=None, title='Isfederated')


class AssetSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ..., description='Asset ID. **Mandatory, must be unique.**\n', title='Uniqueid'
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The asset ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: constr(min_length=1) = Field(
        ...,
        description='The name of the asset. The default is the Asset ID. **Mandatory**\n',
        title='Name',
    )
    type: Optional[AssetType] = Field(
        default='Other',
        description='The asset types that are supported by Authomize **Mandatory**\n\nPermitted values:\n\n   •\t`Application` (federation) \n   •\t`Database`\n   •\t`Drive`\n   •\t`File`\n   •\t`Folder`\n   •\t`GitRepository`\n   •\t`Integration`\n   •\t`Project`\n   •\t`Site`\n   •\t`Table`\n   •\t`Ticket`\n   •\t`VirtualMachine`\n   •\t`Other`\n\nIf the asset type does not exist use `Other`.\n',
    )
    alternativeName: Optional[str] = Field(
        default=None,
        description='Any alternative name for the resource, or any other representation of the resource, if it exists.\nThe default is `null`.\n',
        title='Alternativename',
    )
    originType: Optional[str] = Field(
        default=None,
        description='The asset type in the source system.\nThe default is the canonical type (if not mentioned).\n',
        title='Origintype',
    )
    createdAt: Optional[datetime] = Field(
        default=None,
        description='The date (in ISO 8601 format) that the asset was created.\nThe default is `null`.\n',
        title='Createdat',
    )
    lastUsedAt: Optional[datetime] = Field(
        default=None,
        description='The date (in ISO 8601 format) of the last time that the asset was in use.\nThe default is `null`.\n',
        title='Lastusedat',
    )
    description: Optional[str] = Field(
        default=None,
        description='A description of the asset (up to 512 characters).\n',
        title='Description',
    )
    href: Optional[str] = Field(
        default=None,
        description='A link to the asset in the source system.\n',
        title='Href',
    )
    owner: Optional[str] = Field(
        default=None, description='The owner ID', title='Owner'
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None, description='Tags associated with the asset.\n', title='Tags'
    )


class BundleTransactionSchema(BaseModel):
    connectorId: str = Field(..., title='Connectorid')
    executionId: Optional[str] = Field(default=None, title='Executionid')
    transactionCreatedAt: Optional[datetime] = Field(
        default=None, title='Transactioncreatedat'
    )
    warnings: Optional[List[str]] = Field(default=None, title='Warnings')
    validations: Optional[Dict[str, Any]] = Field(default=None, title='Validations')
    id: str = Field(..., title='Id')
    state: TransactionStateType


class CampaignAccountSchema(BaseModel):
    id: constr(min_length=1) = Field(
        ...,
        description="User's Account ID. **Mandatory, must be unique.**\n",
        title='Id',
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The user ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: str = Field(..., description='Username\n', title='Name')
    email: str = Field(..., description="User's email address.", title='Email')
    firstName: Optional[str] = Field(
        default=None, description="User's first name\n", title='Firstname'
    )
    lastName: Optional[str] = Field(
        default=None, description="The user's last name.\n", title='Lastname'
    )
    status: Optional[UserStatus] = Field(
        default=None,
        description='User status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n',
    )
    department: Optional[str] = Field(
        default=None,
        description="The user's department in the organization.\n",
        title='Department',
    )
    title: Optional[str] = Field(
        default=None, description="The user's job title.\n", title='Title'
    )
    description: Optional[str] = Field(
        default=None,
        description='Additional description of the user.\n',
        title='Description',
    )
    isExternal: Optional[bool] = Field(
        default=False,
        description='Account is external to Authomize.\nMust be either `true` or `false`.\n',
        title='Isexternal',
    )
    hasMFA: Optional[bool] = Field(
        default=None,
        description='Has Multi-Factor Authentication enabled.\nMust be either `true` or `false`.\n',
        title='Hasmfa',
    )
    lastLoginAt: Optional[datetime] = Field(
        default=None,
        description='The last login date in ISO 8601 format.\n',
        title='Lastloginat',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None,
        description='One or more tags on the user account.\n',
        title='Tags',
    )


class CampaignPrivilegeSchema(BaseModel):
    id: constr(min_length=1) = Field(
        ...,
        description='Privilege ID.\n\nIf not defined, set as originName. **Mandatory, must be unique.**\n',
        title='Id',
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The privilege ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    type: PrivilegeType = Field(
        ...,
        description='The "canonical" privilege types that are supported by Authomize off-the-shelf: **Mandatory**\n\nPermitted values: \n   •\t`Administrative`\n   •\t`Login`\n   •\t`Data Read`\n   •\t`Metadata Read`\n   •\t`Data Write`\n   •\t`Metadata Write`\n   •\t`Data Create`\n   •\t`Metadata Create`\n   •\t`Data Delete`\n   •\t`Metadata Delete`\n\n',
    )
    originName: str = Field(
        ..., description='The privilege name in the source system.', title='Originname'
    )


class GroupingSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ...,
        description='\nGrouping ID. **Mandatory, must be unique.**\n',
        title='Uniqueid',
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The groupping ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: constr(min_length=1) = Field(
        ...,
        description='The name of the grouping. The default is the ID field. **Mandatory**\n',
        title='Name',
    )
    originType: Optional[str] = Field(
        default=None,
        description='The name of the type of grouping in the source system. The default is `Group`. Example: Group/Alias/AWS Role\n',
        title='Origintype',
    )
    type: Optional[GroupingType] = Field(
        default='Group',
        description='Allowed values are `Group` and `VirtualGroup`.\n\nThe default is `Group`.\n\n`VirtualGroup` are mapped to the Authomize access explorer graph and are not present in other places in the user interface nor are they counted as a group.\n',
    )
    isRole: Optional[bool] = Field(
        default=False,
        description='If `Role`, the grouping represents a role in the source application and the name of the role is the grouping `name`.\n\nThe default is `False`.\n',
        title='Isrole',
    )
    anyoneCanJoinOrLeave: Optional[bool] = Field(
        default=False,
        description="Must be either `ture` or `false`.\nWhen set to `true` users can give themselves membership in this grouping without the grouping's managers' or owners' permission. \nExamples include public groups (M365), Google Groups with specific flags, ...\nValid only when `groupingType = Group`\n",
        title='Anyonecanjoinorleave',
    )
    owner: Optional[str] = Field(
        default=None,
        description='The uniqueId of the user who is the "owner" (or manager) of the group.\n',
        title='Owner',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None, description='Tags on the access grouping.\n', title='Tags'
    )
    alternativeName: Optional[constr(max_length=256)] = Field(
        default=None, description='Alias of the grouping.', title='Alternativename'
    )


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(default=None, title='Detail')


class IdentityDescription(BaseModel):
    id: str = Field(..., title='Id')
    name: Optional[str] = Field(default=None, title='Name')
    type: IdentityTypes
    subType: Optional[IdentitySubTypes] = None
    userType: Optional[str] = Field(default=None, title='Usertype')
    email: Optional[str] = Field(default=None, title='Email')
    manager: Optional[str] = Field(default=None, title='Manager')
    title: Optional[str] = Field(default=None, title='Title')
    department: Optional[str] = Field(default=None, title='Department')
    description: Optional[str] = Field(default=None, title='Description')
    href: Optional[str] = Field(default=None, title='Href')
    createdAt: Optional[datetime] = Field(default=None, title='Createdat')
    terminationDate: Optional[datetime] = Field(default=None, title='Terminationdate')
    isExternal: Optional[bool] = Field(default=None, title='Isexternal')
    isAuxiliary: Optional[bool] = Field(default=None, title='Isauxiliary')
    hasTwoFactorAuthenticationEnabled: Optional[bool] = Field(
        default=None, title='Hastwofactorauthenticationenabled'
    )
    firstName: Optional[str] = Field(default=None, title='Firstname')
    lastName: Optional[str] = Field(default=None, title='Lastname')
    userName: Optional[str] = Field(default=None, title='Username')
    status: Optional[UserStatus] = None
    service: Optional[str] = Field(default=None, title='Service')
    lastLoginAt: Optional[datetime] = Field(default=None, title='Lastloginat')
    anyoneCanJoinOrLeave: Optional[bool] = Field(
        default=None, title='Anyonecanjoinorleave'
    )
    tags: Optional[List[str]] = Field(default=None, title='Tags')
    city: Optional[str] = Field(default=None, title='City')
    country: Optional[str] = Field(default=None, title='Country')
    division: Optional[str] = Field(default=None, title='Division')
    employeeNumber: Optional[str] = Field(default=None, title='Employeenumber')
    personalEmail: Optional[str] = Field(default=None, title='Personalemail')
    hireDate: Optional[datetime] = Field(default=None, title='Hiredate')


class IdentitySchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ..., description='Identity ID **Mandatory**\n', title='Uniqueid'
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The identity ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: Optional[str] = Field(default=None, description='Username', title='Name')
    email: Optional[str] = Field(
        default=None, description="User's work email address.\n", title='Email'
    )
    personalEmail: Optional[str] = Field(
        default=None,
        description="User's personal email address.\n",
        title='Personalemail',
    )
    firstName: Optional[str] = Field(
        default=None, description="User's first name\n", title='Firstname'
    )
    lastName: Optional[str] = Field(
        default=None, description="The user's last name.\n", title='Lastname'
    )
    employeeNumber: Optional[str] = Field(
        default=None, description='Employee number', title='Employeenumber'
    )
    status: Optional[UserStatus] = Field(
        default=None,
        description='The user status must be one of the following: `Deleted`, `Disabled`, `Enabled`, `Staged` or `Suspended`.\n',
    )
    country: Optional[str] = Field(default=None, description='Country', title='Country')
    city: Optional[str] = Field(default=None, description='City', title='City')
    department: Optional[str] = Field(
        default=None,
        description="The identity's department in the organization.\n",
        title='Department',
    )
    division: Optional[str] = Field(
        default=None,
        description="The identity's division in their organization.\n",
        title='Division',
    )
    title: Optional[str] = Field(
        default=None, description="The user's job title.\n", title='Title'
    )
    managerId: Optional[str] = Field(
        default=None, description="The manager identity's ID.\n", title='Managerid'
    )
    hireAt: Optional[datetime] = Field(
        default=None,
        description="The user's first day of work (in ISO 8601 format).\n",
        title='Hireat',
    )
    terminationAt: Optional[datetime] = Field(
        default=None,
        description="The user's last day of work (in ISO 8601 format).\n",
        title='Terminationat',
    )
    description: Optional[str] = Field(
        default=None,
        description='Additional description of the identity.\n',
        title='Description',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None,
        description='One or more tags on the user account.\n',
        title='Tags',
    )


class ItemsBundleSchema(BaseModel):
    services: Optional[List[ServiceDescription]] = Field(default=None, title='Services')
    identities: Optional[List[IdentityDescription]] = Field(
        default=None, title='Identities'
    )
    assets: Optional[List[AssetDescription]] = Field(default=None, title='Assets')
    inheritanceIdentities: Optional[List[IdentitiesInheritance]] = Field(
        default=None, title='Inheritanceidentities'
    )
    inheritanceAssets: Optional[List[AssetsInheritance]] = Field(
        default=None, title='Inheritanceassets'
    )
    access: Optional[List[AccessDescription]] = Field(default=None, title='Access')


class NewGitRepoListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[NewGitRepoRequestSchema] = Field(
        ..., description='New Git Repos', max_items=10000, min_items=1, title='Data'
    )
    validateOnly: Optional[bool] = Field(
        default=False,
        description='Validate the request without uploading the data into the system.',
        title='Validateonly',
    )


class NewIdentityRequestSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ..., description='Identity ID **Mandatory**\n', title='Uniqueid'
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The identity ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: Optional[str] = Field(default=None, description='Username', title='Name')
    email: Optional[str] = Field(
        default=None, description="User's work email address.\n", title='Email'
    )
    personalEmail: Optional[str] = Field(
        default=None,
        description="User's personal email address.\n",
        title='Personalemail',
    )
    firstName: Optional[str] = Field(
        default=None, description="User's first name\n", title='Firstname'
    )
    lastName: Optional[str] = Field(
        default=None, description="The user's last name.\n", title='Lastname'
    )
    employeeNumber: Optional[str] = Field(
        default=None, description='Employee number', title='Employeenumber'
    )
    status: Optional[UserStatus] = Field(
        default=None,
        description='The user status must be one of the following: `Deleted`, `Disabled`, `Enabled`, `Staged` or `Suspended`.\n',
    )
    country: Optional[str] = Field(default=None, description='Country', title='Country')
    city: Optional[str] = Field(default=None, description='City', title='City')
    department: Optional[str] = Field(
        default=None,
        description="The identity's department in the organization.\n",
        title='Department',
    )
    division: Optional[str] = Field(
        default=None,
        description="The identity's division in their organization.\n",
        title='Division',
    )
    title: Optional[str] = Field(
        default=None, description="The user's job title.\n", title='Title'
    )
    managerId: Optional[str] = Field(
        default=None, description="The manager identity's ID.\n", title='Managerid'
    )
    hireAt: Optional[datetime] = Field(
        default=None,
        description="The user's first day of work (in ISO 8601 format).\n",
        title='Hireat',
    )
    terminationAt: Optional[datetime] = Field(
        default=None,
        description="The user's last day of work (in ISO 8601 format).\n",
        title='Terminationat',
    )
    description: Optional[str] = Field(
        default=None,
        description='Additional description of the identity.\n',
        title='Description',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None,
        description='One or more tags on the user account.\n',
        title='Tags',
    )


class NewPermissionRequestSchema(BaseModel):
    sourceUniqueId: constr(min_length=1) = Field(
        ...,
        description="The unique ID of the permission's source. Must be either `userId` or `groupingId`. **Mandatory**.\n",
        title='Sourceuniqueid',
    )
    sourceType: PermissionSourceType = Field(
        ...,
        description="The type of the permission's source. **Mandatory**.\n\nSet `sourceType` to either:\n\n- User `uniqueId`.\n- Grouping `uniqueId`.",
    )
    privilegeId: constr(min_length=1) = Field(
        ...,
        description='The ID of the privilege, allows access to assets. **Mandatory**.\n',
        title='Privilegeid',
    )
    assetId: Optional[str] = Field(
        default=None,
        description='The ID of the asset.\n\nWhen `null`, this is a global permission on the entire application (not just locally).',
        title='Assetid',
    )
    isRole: Optional[bool] = Field(
        default=False,
        description='If `true`, the permissions represent the role in the source application.\nThe default is `false`.\n',
        title='Isrole',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None, description='Tags on access permissions.\n', title='Tags'
    )
    escalationPathPossible: Optional[bool] = Field(
        default=False,
        description="If `true`, it's possible to perform a privilege escalation using the permission.   \nexample: User has Read access to a secret containing credentials of another user.  This allows \nprivilege escalation.\nopposite example: User has Read metadata permission to a secret containing credentials of another user. This *Does NOT* allows \nprivilege escalation.\n\n",
        title='Escalationpathpossible',
    )


class NewPermissionsListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[NewPermissionRequestSchema] = Field(
        ..., description='New Permissions', max_items=10000, min_items=1, title='Data'
    )
    validateOnly: Optional[bool] = Field(
        default=False,
        description='Validate the request without uploading the data into the system.',
        title='Validate Only\n',
    )


class NewPrivilegeRequestSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ...,
        description='Privilege ID.\n\nIf not defined, set as originName. **Mandatory, must be unique.**\n',
        title='Uniqueid',
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The privilege ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    type: PrivilegeType = Field(
        ...,
        description='The "canonical" privilege types that are supported by Authomize off-the-shelf: **Mandatory**\n\nPermitted values: \n   •\t`Administrative`\n   •\t`Login`\n   •\t`Data Read`\n   •\t`Metadata Read`\n   •\t`Data Write`\n   •\t`Metadata Write`\n   •\t`Data Create`\n   •\t`Metadata Create`\n   •\t`Data Delete`\n   •\t`Metadata Delete`\n\n',
    )
    originName: Optional[str] = Field(
        default=None,
        description='The privilege name in the source system.',
        title='Originname',
    )


class NewPrivilegesListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[NewPrivilegeRequestSchema] = Field(
        ..., description='New Privileges', max_items=10000, min_items=1, title='Data'
    )
    validateOnly: Optional[bool] = Field(
        default=False,
        description='Validate the request without uploading the data into the system.',
        title='Validateonly',
    )


class NewServiceAccountRequestSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ...,
        description='Unique Service Account ID. **Mandatory, must be unique.**\n',
        title='Uniqueid',
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description='ID of the Service Account in Source System',
        title='Originid',
    )
    type: Optional[ServiceAccountType] = Field(
        default=None, description='Type of Service Account'
    )
    name: Optional[constr(min_length=1)] = Field(
        default=None, description='Name of the service account', title='Name'
    )
    alternativeName: Optional[str] = Field(
        default=None,
        description='Alias of the service account',
        title='Alternativename',
    )
    status: Optional[UserStatus] = Field(
        default=None,
        description='Service Account status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n',
    )
    owner: Optional[str] = Field(
        default=None, description='Unique ID of the owner user', title='Owner'
    )
    description: Optional[str] = Field(
        default=None,
        description='Description of the service account',
        title='Description',
    )
    lastLoginAt: Optional[datetime] = Field(
        default=None,
        description='Last login date for service account',
        title='Lastloginat',
    )
    lastActivityDate: Optional[datetime] = Field(
        default=None,
        description='Date when service account was last active',
        title='Lastactivitydate',
    )
    credentialsUpdateDate: Optional[datetime] = Field(
        default=None,
        description="Date when the service account's credentials were updated",
        title='Credentialsupdatedate',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None,
        description='One or more tags on the service account.\n',
        title='Tags',
    )


class NewUserRequestSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ...,
        description="User's Account ID. **Mandatory, must be unique.**\n",
        title='Uniqueid',
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The user ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: Optional[str] = Field(default=None, description='Username\n', title='Name')
    email: Optional[str] = Field(
        default=None, description="User's email address.", title='Email'
    )
    firstName: Optional[str] = Field(
        default=None, description="User's first name\n", title='Firstname'
    )
    lastName: Optional[str] = Field(
        default=None, description="The user's last name.\n", title='Lastname'
    )
    status: Optional[UserStatus] = Field(
        default=None,
        description='User status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n',
    )
    department: Optional[str] = Field(
        default=None,
        description="The user's department in the organization.\n",
        title='Department',
    )
    title: Optional[str] = Field(
        default=None, description="The user's job title.\n", title='Title'
    )
    description: Optional[str] = Field(
        default=None,
        description='Additional description of the user.\n',
        title='Description',
    )
    isExternal: Optional[bool] = Field(
        default=False,
        description='Account is external to Authomize.\nMust be either `true` or `false`.\n',
        title='Isexternal',
    )
    hasMFA: Optional[bool] = Field(
        default=None,
        description='Has Multi-Factor Authentication enabled.\nMust be either `true` or `false`.\n',
        title='Hasmfa',
    )
    lastLoginAt: Optional[datetime] = Field(
        default=None,
        description='The last login date in ISO 8601 format.\n',
        title='Lastloginat',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None,
        description='One or more tags on the user account.\n',
        title='Tags',
    )


class NewUsersListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[NewUserRequestSchema] = Field(
        ..., description='New Users', max_items=10000, min_items=1, title='Data'
    )
    validateOnly: Optional[bool] = Field(
        default=False,
        description='Validate the request without uploading the data into the system.',
        title='Validateonly',
    )


class PermissionSchema(BaseModel):
    sourceUniqueId: constr(min_length=1) = Field(
        ...,
        description="The unique ID of the permission's source. Must be either `userId` or `groupingId`. **Mandatory**.\n",
        title='Sourceuniqueid',
    )
    sourceType: PermissionSourceType = Field(
        ...,
        description="The type of the permission's source. **Mandatory**.\n\nSet `sourceType` to either:\n\n- User `uniqueId`.\n- Grouping `uniqueId`.",
    )
    privilegeId: constr(min_length=1) = Field(
        ...,
        description='The ID of the privilege, allows access to assets. **Mandatory**.\n',
        title='Privilegeid',
    )
    assetId: Optional[str] = Field(
        default=None,
        description='The ID of the asset.\n\nWhen `null`, this is a global permission on the entire application (not just locally).',
        title='Assetid',
    )
    isRole: Optional[bool] = Field(
        default=False,
        description='If `true`, the permissions represent the role in the source application.\nThe default is `false`.\n',
        title='Isrole',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None, description='Tags on access permissions.\n', title='Tags'
    )
    escalationPathPossible: Optional[bool] = Field(
        default=False,
        description="If `true`, it's possible to perform a privilege escalation using the permission.   \nexample: User has Read access to a secret containing credentials of another user.  This allows \nprivilege escalation.\nopposite example: User has Read metadata permission to a secret containing credentials of another user. This *Does NOT* allows \nprivilege escalation.\n\n",
        title='Escalationpathpossible',
    )


class PrivilegeSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ...,
        description='Privilege ID.\n\nIf not defined, set as originName. **Mandatory, must be unique.**\n',
        title='Uniqueid',
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The privilege ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    type: PrivilegeType = Field(
        ...,
        description='The "canonical" privilege types that are supported by Authomize off-the-shelf: **Mandatory**\n\nPermitted values: \n   •\t`Administrative`\n   •\t`Login`\n   •\t`Data Read`\n   •\t`Metadata Read`\n   •\t`Data Write`\n   •\t`Metadata Write`\n   •\t`Data Create`\n   •\t`Metadata Create`\n   •\t`Data Delete`\n   •\t`Metadata Delete`\n\n',
    )
    originName: Optional[str] = Field(
        default=None,
        description='The privilege name in the source system.',
        title='Originname',
    )


class RequestsBundleSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    delete_app_data: Optional[bool] = Field(
        default=False,
        description='The Delete Application Data API is used to delete app data by `{appId}`.',
        title='Delete App Data',
    )
    createdAt: Optional[datetime] = Field(default=None, title='Createdat')
    new_users: Optional[List[NewUserRequestSchema]] = Field(
        default=None,
        description='The Create Users APIs sets up App users(by App ID).',
        title='New Users',
    )
    new_groupings: Optional[List[NewGroupingRequestSchema]] = Field(
        default=None,
        description='The Create Groupings API is used to create groups that have access to a particular app.',
        title='New Groupings',
    )
    new_permissions: Optional[List[NewPermissionRequestSchema]] = Field(
        default=None,
        description='The Create Permissions API is used to create a set of privileges, assigned to a specific target.\nA permission (also referred to as an "entitlement") is a set of privileges, assigned to a specific target. \nExamples include: file permissions, file shares, GCP entitlements, the actual policies assigning access to roles in AWS, and inline policies.\n',
        title='New Permissions',
    )
    new_privileges: Optional[List[NewPrivilegeRequestSchema]] = Field(
        default=None,
        description='The Create Privileges API is used to define privileges that can be associated with assets.\nFor example, Read privileges on a file.\nHere you can define the type of privileges and associate it to assets in the Permission API.\n',
        title='New Privileges',
    )
    new_privileges_grants: Optional[List[NewPrivilegeGrantsRequestSchema]] = Field(
        default=None,
        description='The Create Privileges Grants API enables you to establish inheritance between privileges, so that a single privilege contains a set of other privileges. \nFor example, an Administrative privilege that contains read and write privileges.',
        title='New Privileges Grants',
    )
    new_accounts_association: Optional[
        List[NewAccountsAssociationRequestSchema]
    ] = Field(
        default=None,
        description='The Create Accounts Association API creates account associations between user accounts and groups.',
        title='New Accounts Association',
    )
    new_groupings_association: Optional[
        List[NewGroupingsAssociationRequestSchema]
    ] = Field(
        default=None,
        description='The Create Groupings Association API creates associations between groups and other groups.\n',
        title='New Groupings Association',
    )
    new_assets: Optional[List[NewAssetRequestSchema]] = Field(
        default=None,
        description='The Create Assets API creates assets (including asset data).',
        title='New Assets',
    )
    new_git_repos: Optional[List[NewGitRepoRequestSchema]] = Field(
        default=None,
        description='Creates a Git Repository Asset',
        title='New Git Repos',
    )
    new_assets_inheritance: Optional[List[NewAssetInheritanceRequestSchema]] = Field(
        default=None,
        description='The Create Assets Inheritence API enables you to create a connection between different assets (for example, a folder that contains multiple files).\n',
        title='New Assets Inheritance',
    )
    new_identities: Optional[List[NewIdentityRequestSchema]] = Field(
        default=None,
        description='The Create Identities API is used to create identities. \nThe data of the identity from this API is considered "the source of truth" and overrides the identity data from other systems.\n',
        title='New Identities',
    )
    new_service_accounts: Optional[List[NewServiceAccountRequestSchema]] = Field(
        default=None, title='New Service Accounts'
    )
    app: Optional[NewAssetRequestSchema] = Field(
        default=None,
        description='The Update Application Data API is used to update app data on `{appId}`.\n',
        title='App',
    )


class RestApiConnectorListSchema(BaseModel):
    pagination: Pagination
    data: List[RestApiConnectorSchema] = Field(..., title='Data')


class SearchAssetsListResponseSchema(BaseModel):
    data: List[AssetSchema] = Field(..., description='Assets', title='Data')


class SearchGroupingResponseSchema(BaseModel):
    data: List[GroupingSchema] = Field(..., description='Groupings', title='Data')


class SearchIdentitiesListResponseSchema(BaseModel):
    data: List[IdentitySchema] = Field(..., description='Identities', title='Data')


class SearchPermissionResponseSchema(BaseModel):
    data: List[PermissionSchema] = Field(..., description='Permissions', title='Data')


class SearchPrivilegesListResponseSchema(BaseModel):
    data: List[PrivilegeSchema] = Field(..., description='Privileges', title='Data')


class ServiceAccountSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ...,
        description='Unique Service Account ID. **Mandatory, must be unique.**\n',
        title='Uniqueid',
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description='ID of the Service Account in Source System',
        title='Originid',
    )
    type: Optional[ServiceAccountType] = Field(
        default=None, description='Type of Service Account'
    )
    name: Optional[constr(min_length=1)] = Field(
        default=None, description='Name of the service account', title='Name'
    )
    alternativeName: Optional[str] = Field(
        default=None,
        description='Alias of the service account',
        title='Alternativename',
    )
    status: Optional[UserStatus] = Field(
        default=None,
        description='Service Account status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n',
    )
    owner: Optional[str] = Field(
        default=None, description='Unique ID of the owner user', title='Owner'
    )
    description: Optional[str] = Field(
        default=None,
        description='Description of the service account',
        title='Description',
    )
    lastLoginAt: Optional[datetime] = Field(
        default=None,
        description='Last login date for service account',
        title='Lastloginat',
    )
    lastActivityDate: Optional[datetime] = Field(
        default=None,
        description='Date when service account was last active',
        title='Lastactivitydate',
    )
    credentialsUpdateDate: Optional[datetime] = Field(
        default=None,
        description="Date when the service account's credentials were updated",
        title='Credentialsupdatedate',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None,
        description='One or more tags on the service account.\n',
        title='Tags',
    )


class TransactionPaginatedSearchSchema(BaseModel):
    data: List[BundleTransactionSchema] = Field(..., title='Data')
    pagination: Pagination


class UpdateGroupingsListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[UpdateGroupingsRequestSchema] = Field(
        ...,
        description='List of update user requests.\n',
        max_items=10000,
        min_items=1,
        title='Data',
    )


class UpdateIdentityRequestSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ..., description='Identity ID **Mandatory**\n', title='Uniqueid'
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The identity ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: Optional[str] = Field(default=None, description='Username', title='Name')
    email: Optional[str] = Field(
        default=None, description="User's work email address.\n", title='Email'
    )
    personalEmail: Optional[str] = Field(
        default=None,
        description="User's personal email address.\n",
        title='Personalemail',
    )
    firstName: Optional[str] = Field(
        default=None, description="User's first name\n", title='Firstname'
    )
    lastName: Optional[str] = Field(
        default=None, description="The user's last name.\n", title='Lastname'
    )
    employeeNumber: Optional[str] = Field(
        default=None, description='Employee number', title='Employeenumber'
    )
    status: Optional[UserStatus] = Field(
        default=None,
        description='The user status must be one of the following: `Deleted`, `Disabled`, `Enabled`, `Staged` or `Suspended`.\n',
    )
    country: Optional[str] = Field(default=None, description='Country', title='Country')
    city: Optional[str] = Field(default=None, description='City', title='City')
    department: Optional[str] = Field(
        default=None,
        description="The identity's department in the organization.\n",
        title='Department',
    )
    division: Optional[str] = Field(
        default=None,
        description="The identity's division in their organization.\n",
        title='Division',
    )
    title: Optional[str] = Field(
        default=None, description="The user's job title.\n", title='Title'
    )
    managerId: Optional[str] = Field(
        default=None, description="The manager identity's ID.\n", title='Managerid'
    )
    hireAt: Optional[datetime] = Field(
        default=None,
        description="The user's first day of work (in ISO 8601 format).\n",
        title='Hireat',
    )
    terminationAt: Optional[datetime] = Field(
        default=None,
        description="The user's last day of work (in ISO 8601 format).\n",
        title='Terminationat',
    )
    description: Optional[str] = Field(
        default=None,
        description='Additional description of the identity.\n',
        title='Description',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None,
        description='One or more tags on the user account.\n',
        title='Tags',
    )


class UpdateServiceAccountRequestSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ...,
        description='Unique Service Account ID. **Mandatory, must be unique.**\n',
        title='Uniqueid',
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description='ID of the Service Account in Source System',
        title='Originid',
    )
    type: Optional[ServiceAccountType] = Field(
        default=None, description='Type of Service Account'
    )
    name: Optional[constr(min_length=1)] = Field(
        default=None, description='Name of the service account', title='Name'
    )
    alternativeName: Optional[str] = Field(
        default=None,
        description='Alias of the service account',
        title='Alternativename',
    )
    status: Optional[UserStatus] = Field(
        default=None,
        description='Service Account status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n',
    )
    owner: Optional[str] = Field(
        default=None, description='Unique ID of the owner user', title='Owner'
    )
    description: Optional[str] = Field(
        default=None,
        description='Description of the service account',
        title='Description',
    )
    lastLoginAt: Optional[datetime] = Field(
        default=None,
        description='Last login date for service account',
        title='Lastloginat',
    )
    lastActivityDate: Optional[datetime] = Field(
        default=None,
        description='Date when service account was last active',
        title='Lastactivitydate',
    )
    credentialsUpdateDate: Optional[datetime] = Field(
        default=None,
        description="Date when the service account's credentials were updated",
        title='Credentialsupdatedate',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None,
        description='One or more tags on the service account.\n',
        title='Tags',
    )


class UpdateUserRequestSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ...,
        description="User's Account ID. **Mandatory, must be unique.**\n",
        title='Uniqueid',
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The user ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: Optional[str] = Field(default=None, description='Username\n', title='Name')
    email: Optional[str] = Field(
        default=None, description="User's email address.", title='Email'
    )
    firstName: Optional[str] = Field(
        default=None, description="User's first name\n", title='Firstname'
    )
    lastName: Optional[str] = Field(
        default=None, description="The user's last name.\n", title='Lastname'
    )
    status: Optional[UserStatus] = Field(
        default=None,
        description='User status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n',
    )
    department: Optional[str] = Field(
        default=None,
        description="The user's department in the organization.\n",
        title='Department',
    )
    title: Optional[str] = Field(
        default=None, description="The user's job title.\n", title='Title'
    )
    description: Optional[str] = Field(
        default=None,
        description='Additional description of the user.\n',
        title='Description',
    )
    isExternal: Optional[bool] = Field(
        default=False,
        description='Account is external to Authomize.\nMust be either `true` or `false`.\n',
        title='Isexternal',
    )
    hasMFA: Optional[bool] = Field(
        default=None,
        description='Has Multi-Factor Authentication enabled.\nMust be either `true` or `false`.\n',
        title='Hasmfa',
    )
    lastLoginAt: Optional[datetime] = Field(
        default=None,
        description='The last login date in ISO 8601 format.\n',
        title='Lastloginat',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None,
        description='One or more tags on the user account.\n',
        title='Tags',
    )


class UserSchema(BaseModel):
    uniqueId: constr(min_length=1) = Field(
        ...,
        description="User's Account ID. **Mandatory, must be unique.**\n",
        title='Uniqueid',
    )
    originId: Optional[constr(min_length=1)] = Field(
        default=None,
        description="The user ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n",
        title='Originid',
    )
    name: Optional[str] = Field(default=None, description='Username\n', title='Name')
    email: Optional[str] = Field(
        default=None, description="User's email address.", title='Email'
    )
    firstName: Optional[str] = Field(
        default=None, description="User's first name\n", title='Firstname'
    )
    lastName: Optional[str] = Field(
        default=None, description="The user's last name.\n", title='Lastname'
    )
    status: Optional[UserStatus] = Field(
        default=None,
        description='User status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n',
    )
    department: Optional[str] = Field(
        default=None,
        description="The user's department in the organization.\n",
        title='Department',
    )
    title: Optional[str] = Field(
        default=None, description="The user's job title.\n", title='Title'
    )
    description: Optional[str] = Field(
        default=None,
        description='Additional description of the user.\n',
        title='Description',
    )
    isExternal: Optional[bool] = Field(
        default=False,
        description='Account is external to Authomize.\nMust be either `true` or `false`.\n',
        title='Isexternal',
    )
    hasMFA: Optional[bool] = Field(
        default=None,
        description='Has Multi-Factor Authentication enabled.\nMust be either `true` or `false`.\n',
        title='Hasmfa',
    )
    lastLoginAt: Optional[datetime] = Field(
        default=None,
        description='The last login date in ISO 8601 format.\n',
        title='Lastloginat',
    )
    tags: Optional[List[constr(min_length=1)]] = Field(
        default=None,
        description='One or more tags on the user account.\n',
        title='Tags',
    )


class AddCampaignMembershipsRequestSchema(BaseModel):
    account: CampaignAccountSchema = Field(
        ..., description='Account to be reviewed.', title='Account'
    )
    reviewer: CampaignReviewerSchema = Field(
        ..., description='Reviewer.', title='Reviewer'
    )
    group: CampaignGroupingSchema = Field(
        ..., description='The group to be reviewed.', title='Group'
    )


class AddCampaignPermissionsRequestSchema(BaseModel):
    account: CampaignAccountSchema = Field(
        ..., description='Account to be reviewed.', title='Account'
    )
    reviewer: CampaignReviewerSchema = Field(
        ..., description='Reviewer.', title='Reviewer'
    )
    privilege: CampaignPrivilegeSchema = Field(
        ..., description='Privilege to be reviewed.', title='Privilege'
    )
    asset: CampaignAssetSchema = Field(
        ..., description='Asset to be reviewed.', title='Asset'
    )


class IngestionDataBundleSchema(BaseModel):
    new_users: Optional[List[NewUserRequestSchema]] = Field(
        default=None,
        description='The Create Users APIs sets up App users(by App ID).',
        title='New Users',
    )
    new_groupings: Optional[List[NewGroupingRequestSchema]] = Field(
        default=None,
        description='The Create Groupings API is used to create groups that have access to a particular app.',
        title='New Groupings',
    )
    new_permissions: Optional[List[NewPermissionRequestSchema]] = Field(
        default=None,
        description='The Create Permissions API is used to create a set of privileges, assigned to a specific target.\nA permission (also referred to as an "entitlement") is a set of privileges, assigned to a specific target. \nExamples include: file permissions, file shares, GCP entitlements, the actual policies assigning access to roles in AWS, and inline policies.\n',
        title='New Permissions',
    )
    new_privileges: Optional[List[NewPrivilegeRequestSchema]] = Field(
        default=None,
        description='The Create Privileges API is used to define privileges that can be associated with assets.\nFor example, Read privileges on a file.\nHere you can define the type of privileges and associate it to assets in the Permission API.\n',
        title='New Privileges',
    )
    new_privileges_grants: Optional[List[NewPrivilegeGrantsRequestSchema]] = Field(
        default=None,
        description='The Create Privileges Grants API enables you to establish inheritance between privileges, so that a single privilege contains a set of other privileges. \nFor example, an Administrative privilege that contains read and write privileges.',
        title='New Privileges Grants',
    )
    new_accounts_association: Optional[
        List[NewAccountsAssociationRequestSchema]
    ] = Field(
        default=None,
        description='The Create Accounts Association API creates account associations between user accounts and groups.',
        title='New Accounts Association',
    )
    new_groupings_association: Optional[
        List[NewGroupingsAssociationRequestSchema]
    ] = Field(
        default=None,
        description='The Create Groupings Association API creates associations between groups and other groups.\n',
        title='New Groupings Association',
    )
    new_assets: Optional[List[NewAssetRequestSchema]] = Field(
        default=None,
        description='The Create Assets API creates assets (including asset data).',
        title='New Assets',
    )
    new_git_repos: Optional[List[NewGitRepoRequestSchema]] = Field(
        default=None,
        description='Creates a Git Repository Asset',
        title='New Git Repos',
    )
    new_assets_inheritance: Optional[List[NewAssetInheritanceRequestSchema]] = Field(
        default=None,
        description='The Create Assets Inheritence API enables you to create a connection between different assets (for example, a folder that contains multiple files).\n',
        title='New Assets Inheritance',
    )
    new_identities: Optional[List[NewIdentityRequestSchema]] = Field(
        default=None,
        description='The Create Identities API is used to create identities. \nThe data of the identity from this API is considered "the source of truth" and overrides the identity data from other systems.\n',
        title='New Identities',
    )
    new_service_accounts: Optional[List[NewServiceAccountRequestSchema]] = Field(
        default=None, title='New Service Accounts'
    )
    app: Optional[NewAssetRequestSchema] = Field(
        default=None,
        description='The Update Application Data API is used to update app data on `{appId}`.\n',
        title='App',
    )


class NewIdentitiesListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[NewIdentityRequestSchema] = Field(
        ..., description='New Identities', max_items=10000, min_items=1, title='Data'
    )
    validateOnly: Optional[bool] = Field(
        default=False,
        description='Validate the request without uploading the data into the system.',
        title='Validateonly',
    )


class NewServiceAccountListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[NewServiceAccountRequestSchema] = Field(
        ...,
        description='Create Service Accounts',
        max_items=10000,
        min_items=1,
        title='Data',
    )
    validateOnly: Optional[bool] = Field(
        default=False,
        description='Validate the request without uploading the data into the system.',
        title='Validateonly',
    )


class SearchServiceAccountListResponseSchema(BaseModel):
    data: List[ServiceAccountSchema] = Field(
        ..., description='List of service accounts', title='Data'
    )


class SearchUsersListResponseSchema(BaseModel):
    data: List[UserSchema] = Field(..., description='Users', title='Data')


class UpdateIdentitiesListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[UpdateIdentityRequestSchema] = Field(
        ...,
        description='List of update identity requests.\n',
        max_items=10000,
        min_items=1,
        title='Data',
    )


class UpdateServiceAccountListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[UpdateServiceAccountRequestSchema] = Field(
        ...,
        description='List of Service Accounts to be updated [Must contain at least `uniqueId`]',
        max_items=10000,
        min_items=1,
        title='Data',
    )


class UpdateUserListRequestSchema(BaseModel):
    executionId: Optional[str] = Field(
        default=None,
        description='The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n',
        title='Executionid',
    )
    data: List[UpdateUserRequestSchema] = Field(
        ...,
        description='List of update user requests.\n',
        max_items=10000,
        min_items=1,
        title='Data',
    )


class AddCampaignMembershipsListRequestSchema(BaseModel):
    data: List[AddCampaignMembershipsRequestSchema] = Field(
        ...,
        description='New Campaign Memberships.',
        max_items=1000,
        min_items=1,
        title='Data',
    )
    validateOnly: Optional[bool] = Field(
        default=False,
        description='Validate the request without uploading the data into the system.',
        title='Validateonly',
    )


class AddCampaignPermissionsListRequestSchema(BaseModel):
    data: List[AddCampaignPermissionsRequestSchema] = Field(
        ...,
        description='New Campaign Permissions.',
        max_items=1000,
        min_items=1,
        title='Data',
    )
    validateOnly: Optional[bool] = Field(
        default=False,
        description='Validate the request without uploading the data into the system.',
        title='Validateonly',
    )


class AllSchemasResponseSchema(BaseModel):
    v1_bundle_schema: Optional[ItemsBundleSchema] = None
    v2_bundle_schema: Optional[RequestsBundleSchema] = None
    v2_data_only_schema: Optional[IngestionDataBundleSchema] = None
