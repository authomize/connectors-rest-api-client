# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2023-10-24T14:33:37+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Extra, Field, conint, constr


class AccountExpansion(Enum):
    identity = 'identity'
    sourceApp = 'sourceApp'
    tags = 'tags'
    riskScores = 'riskScores'


class AccountRiskScore(BaseModel):
    blastRadiusRiskScore: Optional[int] = Field(
        default=None,
        description='Blast Radius Risk Score',
        title='Blastradiusriskscore',
    )
    takeoverRiskScore: Optional[int] = Field(
        default=None, description='Takeover Risk Score', title='Takeoverriskscore'
    )
    overallRiskScore: Optional[int] = Field(
        default=None, description='Overall Risk Score', title='Overallriskscore'
    )


class AccountSourceAppIdFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_eq: Optional[str] = Field(
        default=None, alias='$eq', description='Equals To', title='$Eq'
    )


class AddIncidentCommentRequestSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    content: constr(max_length=1025) = Field(
        ..., description='Content of comment.', title='Content'
    )


class AicpaTsc2017Standard(Enum):
    CC1_1 = 'CC1.1'
    CC6_3 = 'CC6.3'
    CC5_1 = 'CC5.1'
    CC5_3 = 'CC5.3'
    CC6_1 = 'CC6.1'
    CC6_2 = 'CC6.2'
    CC6_7 = 'CC6.7'
    CC6_6 = 'CC6.6'
    CC3_2 = 'CC3.2'
    CC3_3 = 'CC3.3'
    CC3_4 = 'CC3.4'


class AlertCategoryType(Enum):
    Change_Management = 'Change Management'
    Misconfiguration = 'Misconfiguration'
    Exposure = 'Exposure'
    Privileged_Access = 'Privileged Access'
    Suspicious_Behavior = 'Suspicious Behavior'
    Least_Privilege = 'Least Privilege'
    Custom = 'Custom'
    IAM_Infrastructure_Security = 'IAM Infrastructure Security'
    Account_Takeover_Protection = 'Account Takeover Protection'
    Stale_Access = 'Stale Access'
    Initial_Access = 'Initial Access'
    Over_privileges = 'Over-privileges'
    Privilege_Escalation = 'Privilege Escalation'
    Lateral_Movement = 'Lateral Movement'
    Detection = 'Detection'
    Persistence = 'Persistence'
    Evasion = 'Evasion'
    Account_Takeover = 'Account Takeover'
    Account_Impersonation__PE__LM_ = 'Account Impersonation (PE, LM)'


class AppIdFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_eq: Optional[str] = Field(
        default=None, alias='$eq', description='Equals To', title='$Eq'
    )


class AssetExpansion(Enum):
    sourceApp = 'sourceApp'
    tags = 'tags'


class AssetIdFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[str]] = Field(
        default=[], alias='$in', description='In', title='$In'
    )


class AttackTacticType(Enum):
    Collection = 'Collection'
    Credential_Access = 'Credential Access'
    Defense_Evasion = 'Defense Evasion'
    Discovery = 'Discovery'
    Exfiltration = 'Exfiltration'
    Impact = 'Impact'
    Initial_Access = 'Initial Access'
    Lateral_Movement = 'Lateral Movement'
    Persistence = 'Persistence'
    Privilege_Escalation = 'Privilege Escalation'


class CampaignExpansion(Enum):
    owner = 'owner'


class CampaignStatus(Enum):
    draft = 'draft'
    initializing = 'initializing'
    running = 'running'
    completed = 'completed'
    failed = 'failed'
    empty = 'empty'
    overdue = 'overdue'


class CampaignStatusFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[CampaignStatus]] = Field(
        default=[], alias='$in', description='In'
    )


class CampaignsPermissionDistinctIdentitySchema(BaseModel):
    id: str = Field(..., description='Distinct identity ID.', title='Id')
    name: Optional[str] = Field(
        default=None, description='Name of the distinct identity.', title='Name'
    )
    title: Optional[str] = Field(
        default=None, description='Distinct identity title.', title='Title'
    )
    department: Optional[str] = Field(
        default=None,
        description='Department of the distinct identity.',
        title='Department',
    )


class CampaignsPermissionSourceAppSchema(BaseModel):
    id: str = Field(..., description='Source app ID.', title='Id')
    name: Optional[str] = Field(
        default=None, description='Source app name.', title='Name'
    )
    sourceAppType: Optional[str] = Field(
        default=None, description='Source app type.', title='Sourceapptype'
    )


class CampaignsPermissionTagSchema(BaseModel):
    id: str = Field(..., description='Tag ID.', title='Id')
    name: Optional[str] = Field(
        default=None, description='Name of the tag.', title='Name'
    )


class Ccm301Standard(Enum):
    AIS_04 = 'AIS-04'
    IAM_01 = 'IAM-01'
    IAM_02 = 'IAM-02'
    IAM_03 = 'IAM-03'
    IAM_04 = 'IAM-04'
    IAM_05 = 'IAM-05'
    IAM_06 = 'IAM-06'
    IAM_07 = 'IAM-07'
    IAM_08 = 'IAM-08'
    IAM_09 = 'IAM-09'
    IAM_10 = 'IAM-10'
    IAM_11 = 'IAM-11'
    IAM_12 = 'IAM-12'
    IAM_13 = 'IAM-13'
    GRM_06 = 'GRM-06'
    IVS_06 = 'IVS-06'
    IVS_08 = 'IVS-08'
    DSI_04 = 'DSI-04'


class Ccm402Standard(Enum):
    IAM_01 = 'IAM-01'
    IAM_02 = 'IAM-02'
    IAM_03 = 'IAM-03'
    IAM_04 = 'IAM-04'
    IAM_05 = 'IAM-05'
    IAM_06 = 'IAM-06'
    IAM_07 = 'IAM-07'
    IAM_08 = 'IAM-08'
    IAM_09 = 'IAM-09'
    IAM_10 = 'IAM-10'
    IAM_11 = 'IAM-11'
    IAM_12 = 'IAM-12'
    IAM_13 = 'IAM-13'
    IAM_14 = 'IAM-14'
    IAM_15 = 'IAM-15'
    IAM_16 = 'IAM-16'
    IVS_03 = 'IVS-03'
    IVS_04 = 'IVS-04'
    DSP_07 = 'DSP-07'
    DSP_08 = 'DSP-08'
    DSP_10 = 'DSP-10'
    AIS_03 = 'AIS-03'
    DSP_17 = 'DSP-17'
    DSP_01 = 'DSP-01'
    HRS_05 = 'HRS-05'


class CisV8Standard(Enum):
    field_3_1 = '3.1'
    field_3_3 = '3.3'
    field_6_8 = '6.8'
    field_5_4 = '5.4'
    field_12_7 = '12.7'
    field_6_5 = '6.5'
    field_6_2 = '6.2'
    field_5_3 = '5.3'
    field_12_2 = '12.2'
    field_6_1 = '6.1'
    field_5_1 = '5.1'
    field_4_11 = '4.11'
    field_13_4 = '13.4'
    field_13_9 = '13.9'
    field_13_10 = '13.10'


class Cisv8(BaseModel):
    values: List[CisV8Standard] = Field(..., description='Values')
    id: Optional[str] = Field(default='cisv8', description='UniqueID', title='Id')
    name: Optional[str] = Field(default='CIS v.8', description='Name', title='Name')


class CommentSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str = Field(..., description='Unique ID of comment.', title='Id')
    content: constr(max_length=1025) = Field(
        ..., description='Content of comment.', title='Content'
    )


class CreateCampaignRequestSchema(BaseModel):
    name: str = Field(..., description='Name', title='Name')
    startDate: datetime = Field(..., description='Start date', title='Startdate')
    endDate: datetime = Field(..., description='End date', title='Enddate')
    fallbackReviewerUserId: Optional[str] = Field(
        default=None,
        description='Default: `UserId` connected to the current API-Token. \n Fallback reviewer user ID.',
        title='Fallbackrevieweruserid',
    )


class CreateCampaignResponseSchema(BaseModel):
    id: str = Field(..., description='Id', title='Id')
    name: str = Field(..., description='Name', title='Name')
    startDate: datetime = Field(..., description='Start date', title='Startdate')
    endDate: datetime = Field(..., description='End date', title='Enddate')
    fallbackReviewerUserId: Optional[str] = Field(
        default=None,
        description='Default: `UserId` connected to the current API-Token. \n Fallback reviewer user ID.',
        title='Fallbackrevieweruserid',
    )
    status: Optional[CampaignStatus] = Field(
        default='initializing', description='status', title='status'
    )
    isDeleted: Optional[bool] = Field(
        default=False, description='Is deleted', title='Isdeleted'
    )
    createdAt: Optional[datetime] = Field(
        default=None, description='Created at', title='Createdat'
    )


class DateFilterAllowedValues(Enum):
    Yesterday = 'Yesterday'
    Last_Week = 'Last Week'
    Last_Month = 'Last Month'
    Last_3_Months = 'Last 3 Months'
    Last_6_Months = 'Last 6 Months'
    Last_Year = 'Last Year'


class EmailFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[str]] = Field(
        default=[], alias='$in', description='In', title='$In'
    )


class EntitlementSelections(Enum):
    keep = 'keep'
    revoke = 'revoke'
    change = 'change'


class EventStatusType(Enum):
    Open = 'Open'
    InProgress = 'InProgress'
    WaitingForInput = 'WaitingForInput'
    Closed = 'Closed'


class FieldName(Enum):
    name = 'name'
    status = 'status'
    startDate = 'startDate'
    endDate = 'endDate'
    createdAt = 'createdAt'
    reviewerType = 'reviewerType'
    templateName = 'templateName'


class GroupExpansion(Enum):
    sourceApp = 'sourceApp'
    tags = 'tags'


class GroupMembership(BaseModel):
    actorName: Optional[str] = Field(
        default=None, description='Name of the member.', title='Actorname'
    )
    actorType: Optional[str] = Field(
        default=None, description='Type of the member', title='Actortype'
    )
    actorAuthomizeId: Optional[str] = Field(
        default=None,
        description='Authomizer ID of the member.',
        title='Actorauthomizeid',
    )
    actorOriginId: Optional[str] = Field(
        default=None, description='Origin ID of the member~', title='Actororiginid'
    )


class HiredAtFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_eq: Optional[DateFilterAllowedValues] = Field(
        default=None, alias='$eq', description='Equals To'
    )


class IdFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[str]] = Field(
        default=[], alias='$in', description='In', title='$In'
    )


class IdentityExpansion(Enum):
    account = 'account'
    tags = 'tags'


class IdentityRiskScore(BaseModel):
    takeoverRiskScore: Optional[int] = Field(
        default=None, description='Takeover Risk Score', title='Takeoverriskscore'
    )
    blastRadiusRiskScore: Optional[int] = Field(
        default=None,
        description='Blast Radius Risk Score',
        title='Blastradiusriskscore',
    )
    overallRiskScore: Optional[int] = Field(
        default=None, description='Summary Risk Score', title='Overallriskscore'
    )


class IncidentExpansion(Enum):
    policy = 'policy'
    assignee = 'assignee'


class IncidentsCreatedAtFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_lte: Optional[datetime] = Field(
        default=None, alias='$lte', description='Less Than Or Equals To', title='$Lte'
    )
    field_gte: Optional[datetime] = Field(
        default=None,
        alias='$gte',
        description='Greater Than Or Equals To',
        title='$Gte',
    )
    field_lt: Optional[datetime] = Field(
        default=None, alias='$lt', description='Less Than', title='$Lt'
    )
    field_gt: Optional[datetime] = Field(
        default=None, alias='$gt', description='Greater Than', title='$Gt'
    )


class IncidentsIsResolvedFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_eq: Optional[bool] = Field(
        default=None, alias='$eq', description='Equals To', title='$Eq'
    )


class IncidentsPolicyIdFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_eq: Optional[str] = Field(
        default=None, alias='$eq', description='Equals To', title='$Eq'
    )


class IncidentsPolicyTempalteIdFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_eq: Optional[str] = Field(
        default=None, alias='$eq', description='Equals To', title='$Eq'
    )


class IncidentsStatusFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[EventStatusType]] = Field(
        default=[], alias='$in', description='In'
    )


class IncidentsUpdatedAtFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_lte: Optional[datetime] = Field(
        default=None, alias='$lte', description='Less Than Or Equals To', title='$Lte'
    )
    field_gte: Optional[datetime] = Field(
        default=None,
        alias='$gte',
        description='Greater Than Or Equals To',
        title='$Gte',
    )
    field_lt: Optional[datetime] = Field(
        default=None, alias='$lt', description='Less Than', title='$Lt'
    )
    field_gt: Optional[datetime] = Field(
        default=None, alias='$gt', description='Greater Than', title='$Gt'
    )


class InventoryObjects(Enum):
    identity = 'identity'
    account = 'account'
    asset = 'asset'
    privilege = 'privilege'
    other = 'other'


class IsAliveResponse(BaseModel):
    isAlive: bool = Field(..., description='**isAlive**', title='Isalive')


class IsExternalFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_eq: Optional[bool] = Field(
        default=None, alias='$eq', description='Equals To', title='$Eq'
    )


class IsMFAEnabledFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_eq: Optional[bool] = Field(
        default=None, alias='$eq', description='Equals To', title='$Eq'
    )


class IsoIec27001Standard(Enum):
    A_6_1_2 = 'A.6.1.2'
    A_8_1_1 = 'A.8.1.1'
    A_8_1_3 = 'A.8.1.3'
    A_8_3_3 = 'A.8.3.3'
    A_9_1_1 = 'A.9.1.1'
    A_9_2_1 = 'A.9.2.1'
    A_9_2_3 = 'A.9.2.3'
    A_9_2_6 = 'A.9.2.6'
    A_9_4_1 = 'A.9.4.1'
    A_9_1_2 = 'A.9.1.2'
    A_9_4_2 = 'A.9.4.2'
    A_9_2_2 = 'A.9.2.2'
    A_13_2_1 = 'A.13.2.1'
    A_9_4_3 = 'A.9.4.3'
    A_7_2_2 = 'A.7.2.2'
    A_9_4_5 = 'A.9.4.5'
    A_8_2_3 = 'A.8.2.3'
    A_7_3_1 = 'A.7.3.1'
    A_8_1_4 = 'A.8.1.4'


class LastLoginAtFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_eq: Optional[DateFilterAllowedValues] = Field(
        default=None, alias='$eq', description='Equals To'
    )


class MeResponse(BaseModel):
    version: Optional[str] = Field(
        default='4.5.0', description='**version**', title='Version'
    )
    id: str = Field(..., description='**id**', title='Id')
    tenant: str = Field(..., description='**tenant**', title='Tenant')


class NonPaginatedResponseSchemaCommentSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Union[CommentSchema, List[CommentSchema]] = Field(
        ..., description='Actual Data', title='Data'
    )


class OkResponse(BaseModel):
    ok: Optional[bool] = Field(default=True, description='OK\n', title='Ok')


class OriginIdFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[str]] = Field(
        default=[], alias='$in', description='In', title='$In'
    )


class PaginationRequestSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    limit: Optional[int] = Field(
        default=None,
        description='Limit the number of identities per page',
        title='Limit',
    )
    nextPage: Optional[str] = Field(
        default=None, description='Token denoting start of next page', title='NextPage'
    )


class PaginationResponseSchema(BaseModel):
    limit: Optional[int] = Field(
        default=20, description='Limit the number of identities per page', title='Limit'
    )
    hasMore: Optional[bool] = Field(
        default=None,
        description='Indicates that more data is available',
        title='HasMore',
    )
    nextPage: Optional[str] = Field(
        default=None, description='Token denoting start of next page', title='NextPage'
    )


class PermissionsExpansion(Enum):
    reviewer_user = 'reviewer.user'


class PolicySchema(BaseModel):
    id: str = Field(..., description='Unique id of policy.', title='Id')
    name: str = Field(..., description='Name of policy.', title='Name')
    templateId: str = Field(..., description='Template ID', title='Templateid')


class ReviewStatus(Enum):
    pending = 'pending'
    completed = 'completed'
    reviewing = 'reviewing'
    notified = 'notified'
    inactive = 'inactive'


class ReviewerExpansion(Enum):
    user = 'user'


class RiskFactorIn(BaseModel):
    score: conint(ge=0, le=100) = Field(
        ...,
        description='The risk score can be an integer between 0 and 100.',
        title='Score',
    )
    title: str = Field(
        ...,
        description='The title of the risk factor that should be displayed on the UI.\n',
        title='Title',
    )
    description: str = Field(
        ..., description='Description of the risk score parameter.', title='Description'
    )
    modifiedAt: Optional[datetime] = Field(
        default=None,
        description='Automatically set modification time. Automatically generated.\n',
        title='Modifiedat',
    )


class RiskSeverity(Enum):
    Critical = 'Critical'
    High = 'High'
    Medium = 'Medium'
    Low = 'Low'


class SearchAccountsIdFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[str]] = Field(
        default=[], alias='$in', description='In', title='$In'
    )


class SearchAccountsOriginIdFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[str]] = Field(
        default=[], alias='$in', description='In', title='$In'
    )


class SearchAccountsSortFields(Enum):
    account_name = 'account.name'


class SearchAssetsSortFields(Enum):
    asset_name = 'asset.name'


class SearchGroupsAppIdFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_eq: Optional[str] = Field(
        default=None, alias='$eq', description='Equals To', title='$Eq'
    )


class SearchGroupsIdFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[str]] = Field(
        default=[], alias='$in', description='In', title='$In'
    )


class SearchGroupsOriginIdFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[str]] = Field(
        default=[], alias='$in', description='In', title='$In'
    )


class SearchGroupsSortFields(Enum):
    group_name = 'group.name'


class SearchGroupsUniqueIdFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[str]] = Field(
        default=[], alias='$in', description='In', title='$In'
    )


class SearchIdentitiesSortFields(Enum):
    identity_name = 'identity.name'


class SearchIncidentsSortFields(Enum):
    createdAt = 'createdAt'
    updatedAt = 'updatedAt'
    severity = 'severity'
    status = 'status'


class SearchSourceAppsResponseSchema(BaseModel):
    authomizeId: str = Field(
        ..., description='Authomize ID of source application', title='Authomizeid'
    )
    uniqueId: str = Field(
        ...,
        description='The unique ID of the asset (as provided by the connector)',
        title='Uniqueid',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the asset (for example, application, virtual machine, file, etc.)',
        title='Name',
    )


class Selection(Enum):
    keep = 'keep'
    revoke = 'revoke'
    change = 'change'
    null = 'null'


class SeverityType(Enum):
    Low = 'Low'
    Medium = 'Medium'
    High = 'High'
    Critical = 'Critical'


class SortOrder(Enum):
    ASC = 'ASC'
    DESC = 'DESC'


class SortSchemaFieldName(BaseModel):
    class Config:
        extra = Extra.forbid

    fieldName: FieldName = Field(
        ..., description='Sort the results by field name', title='FieldName'
    )
    order: Optional[SortOrder] = Field(
        default='ASC',
        description='Sort by ascending or descending order (ascending is the default)',
        title='Order',
    )


class SortSchemaSearchAccountsSortFields(BaseModel):
    class Config:
        extra = Extra.forbid

    fieldName: SearchAccountsSortFields = Field(
        ..., description='Sort the results by field name', title='FieldName'
    )
    order: Optional[SortOrder] = Field(
        default='ASC',
        description='Sort by ascending or descending order (ascending is the default)',
        title='Order',
    )


class SortSchemaSearchAssetsSortFields(BaseModel):
    class Config:
        extra = Extra.forbid

    fieldName: SearchAssetsSortFields = Field(
        ..., description='Sort the results by field name', title='FieldName'
    )
    order: Optional[SortOrder] = Field(
        default='ASC',
        description='Sort by ascending or descending order (ascending is the default)',
        title='Order',
    )


class SortSchemaSearchGroupsSortFields(BaseModel):
    class Config:
        extra = Extra.forbid

    fieldName: SearchGroupsSortFields = Field(
        ..., description='Sort the results by field name', title='FieldName'
    )
    order: Optional[SortOrder] = Field(
        default='ASC',
        description='Sort by ascending or descending order (ascending is the default)',
        title='Order',
    )


class SortSchemaSearchIdentitiesSortFields(BaseModel):
    class Config:
        extra = Extra.forbid

    fieldName: SearchIdentitiesSortFields = Field(
        ..., description='Sort the results by field name', title='FieldName'
    )
    order: Optional[SortOrder] = Field(
        default='ASC',
        description='Sort by ascending or descending order (ascending is the default)',
        title='Order',
    )


class SortSchemaSearchIncidentsSortFields(BaseModel):
    class Config:
        extra = Extra.forbid

    fieldName: SearchIncidentsSortFields = Field(
        ..., description='Sort the results by field name', title='FieldName'
    )
    order: Optional[SortOrder] = Field(
        default='ASC',
        description='Sort by ascending or descending order (ascending is the default)',
        title='Order',
    )


class SourceAppSchema(BaseModel):
    id: str = Field(..., description='Authomize ID of source application', title='Id')
    name: str = Field(
        ...,
        description='Name of the asset (for example, application, virtual machine, file, etc.)',
        title='Name',
    )


class TagSchema(BaseModel):
    id: str = Field(..., description='Authomize ID for the Tag', title='Id')
    name: str = Field(..., description='Name of the tag', title='Name')
    description: Optional[str] = Field(
        default=None, description='Description of the tag', title='Description'
    )


class TakeoverRiskFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[str]] = Field(
        default=[], alias='$in', description='In', title='$In'
    )


class TerminatedAtFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_eq: Optional[DateFilterAllowedValues] = Field(
        default=None, alias='$eq', description='Equals To'
    )


class UniqueIdFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[str]] = Field(
        default=[], alias='$in', description='In', title='$In'
    )


class UpdateIncidentRequestSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    assigneeId: Optional[str] = Field(
        default=None,
        description='ID of the entity assigned to this incident.',
        title='Assigneeid',
    )
    status: Optional[EventStatusType] = Field(
        default=None,
        description='The status of the incident (Open, InProgress, WaitingForInput, or Closed).',
    )
    severity: Optional[SeverityType] = Field(
        default=None,
        description='The severity of the incident (Low, Medium, High or Critical).',
    )


class UserSchema(BaseModel):
    id: str = Field(..., description='Unique ID', title='Id')
    name: Optional[str] = Field(default=None, description='Name', title='Name')
    firstName: Optional[str] = Field(
        default=None, description='First Name', title='Firstname'
    )
    lastName: Optional[str] = Field(
        default=None, description='Last Name', title='Lastname'
    )
    email: Optional[str] = Field(default=None, description='Email', title='Email')


class UserStatus(Enum):
    Deleted = 'Deleted'
    Disabled = 'Disabled'
    Enabled = 'Enabled'
    Staged = 'Staged'
    Suspended = 'Suspended'
    Unknown = 'Unknown'


class ValidationError(BaseModel):
    loc: List[str] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class AicpaTsc2017(BaseModel):
    values: List[AicpaTsc2017Standard] = Field(..., description='Values')
    id: Optional[str] = Field(
        default='aicpaTsc2017', description='UniqueID', title='Id'
    )
    name: Optional[str] = Field(
        default='SOC 2 (TSC 2017)', description='Name', title='Name'
    )


class AssetSchema(BaseModel):
    authomizeId: str = Field(
        ..., description='Authomize ID of source application', title='Authomizeid'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the asset (for example, application, virtual machine, file, etc.)',
        title='Name',
    )
    type: Optional[str] = Field(default=None, description='Type of asset', title='Type')
    originType: Optional[str] = Field(
        default=None,
        description='The type of asset on the source system',
        title='Origintype',
    )
    sourceApp: Optional[SourceAppSchema] = Field(
        default=None,
        description='The source application of the asset',
        title='Sourceapp',
    )
    createdAt: Optional[datetime] = Field(
        default=None,
        description='The date (in ISO 8601 format) that the asset was created\n',
        title='Createdat',
    )
    lastUsedAt: Optional[str] = Field(
        default=None,
        description='The date (in ISO 8601 format) of the last time that the asset was in use.',
        title='Lastusedat',
    )
    href: Optional[str] = Field(
        default=None,
        description='A link to the asset in the source application',
        title='Href',
    )
    uniqueId: Optional[str] = Field(
        default=None,
        description='The unique ID of the asset (as provided by the connector)',
        title='Uniqueid',
    )
    originId: Optional[str] = Field(
        default=None,
        description='The ID of the asset on the source system',
        title='Originid',
    )
    description: Optional[str] = Field(
        default=None, description='A description of the asset', title='Description'
    )
    tags: Optional[List[TagSchema]] = Field(
        default=[], description='List of tags associated with the asset', title='Tags'
    )
    incidentsCount: Optional[int] = Field(
        default=None,
        description='Number of associated incidents',
        title='Incidentscount',
    )


class BlastRadiusRiskFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[RiskSeverity]] = Field(
        default=[], alias='$in', description='In'
    )


class CampaignPermissionDecisionFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[Selection]] = Field(
        default=[], alias='$in', description='In'
    )


class CampaignPermissionsSearchFilterBody(BaseModel):
    class Config:
        extra = Extra.forbid

    decision: Optional[CampaignPermissionDecisionFilter] = Field(
        default=None,
        description='Reviewer decisions (keep, revoke, change or null).\n',
        title='Decision',
    )


class CampaignSchema(BaseModel):
    id: str = Field(..., description='Unique ID of campaign', title='Id')
    name: str = Field(..., description='Name of the campaign', title='Name')
    status: CampaignStatus = Field(..., description='The campaign status')
    startDate: datetime = Field(
        ..., description='Date when the campaign starts', title='Startdate'
    )
    endDate: datetime = Field(
        ..., description='Date when campaign ends', title='Enddate'
    )
    createdAt: datetime = Field(
        ..., description='Time of creation of campaign', title='Createdat'
    )
    ownerUserId: str = Field(
        ..., description='User ID of the campaign owner', title='Owneruserid'
    )
    owner: Optional[UserSchema] = Field(
        default=None, description='User Schema of the campaign owner', title='Owner'
    )


class CampaignSearchFilterBody(BaseModel):
    class Config:
        extra = Extra.forbid

    status: Optional[CampaignStatusFilter] = Field(
        default=None,
        description='Enum: "draft" "initializing" "running" "completed" "failed" "empty" "overdue"\n',
        title='Status',
    )


class CampaignsPermissionAccountSchema(BaseModel):
    id: str = Field(..., description='Account ID.', title='Id')
    name: Optional[str] = Field(
        default=None, description='Name of the account.', title='Name'
    )
    uniqueId: Optional[str] = Field(
        default=None, description='Account ID (unique).', title='Uniqueid'
    )
    isExternal: Optional[bool] = Field(
        default=None,
        description='Whether the account is external or not.',
        title='Isexternal',
    )
    type: Optional[str] = Field(default=None, description='Account type.', title='Type')
    email: Optional[str] = Field(
        default=None, description='Email of the account.', title='Email'
    )
    status: Optional[str] = Field(
        default=None, description='Account status.', title='Status'
    )
    distinctIdentity: Optional[CampaignsPermissionDistinctIdentitySchema] = Field(
        default=None,
        description='Distinct identity of the account.',
        title='Distinctidentity',
    )
    sourceApp: Optional[CampaignsPermissionSourceAppSchema] = Field(
        default=None, description='Source app of the account.', title='Sourceapp'
    )
    tags: Optional[List[CampaignsPermissionTagSchema]] = Field(
        default=[], description='Account tags.', title='Tags'
    )


class CampaignsPermissionAssetSchema(BaseModel):
    id: str = Field(..., description='Asset ID.', title='Id')
    type: Optional[str] = Field(default=None, description='Asset type.', title='Type')
    externalType: Optional[str] = Field(
        default=None, description='External type of the asset.', title='Externaltype'
    )
    name: Optional[str] = Field(
        default=None, description='Name of the asset.', title='Name'
    )
    sourceApp: Optional[CampaignsPermissionSourceAppSchema] = Field(
        default=None, description='Source app of the asset.', title='Sourceapp'
    )
    tags: Optional[List[CampaignsPermissionTagSchema]] = Field(
        default=[], description='Asset tags.', title='Tags'
    )


class CampaignsPermissionGroupSchema(BaseModel):
    id: str = Field(..., description='Group ID.', title='Id')
    name: Optional[str] = Field(default=None, description='Group name.', title='Name')
    sourceApp: Optional[CampaignsPermissionSourceAppSchema] = Field(
        default=None, description='Source app of the group.', title='Sourceapp'
    )
    tags: Optional[List[CampaignsPermissionTagSchema]] = Field(
        default=[], description='Group tags.', title='Tags'
    )


class CampaignsPermissionPrivilegeSchema(BaseModel):
    id: str = Field(..., description='Privilege Id.', title='Id')
    originType: Optional[str] = Field(
        default=None, description='Origin type of the privilege.', title='Origintype'
    )
    type: Optional[str] = Field(
        default=None, description='Privilege type.', title='Type'
    )
    sourceApp: Optional[CampaignsPermissionSourceAppSchema] = Field(
        default=None, description='Source app of the privilege.', title='Sourceapp'
    )
    tags: Optional[List[CampaignsPermissionTagSchema]] = Field(
        default=[], description='Privilege tags.', title='Tags'
    )


class Ccm301(BaseModel):
    values: List[Ccm301Standard] = Field(..., description='Values')
    id: Optional[str] = Field(default='ccm301', description='UniqueID', title='Id')
    name: Optional[str] = Field(
        default='CSA STAR (CCM 3.0.1)', description='Name', title='Name'
    )


class Ccm402(BaseModel):
    values: List[Ccm402Standard] = Field(..., description='Values')
    id: Optional[str] = Field(default='ccm402', description='UniqueID', title='Id')
    name: Optional[str] = Field(
        default='CSA STAR (CCM 4.0.2)', description='Name', title='Name'
    )


class GroupSchema(BaseModel):
    authomizeId: str = Field(
        ..., description='Authomize ID of the Group.', title='Authomizeid'
    )
    name: Optional[str] = Field(
        default=None, description='Name of the Group.', title='Name'
    )
    type: Optional[str] = Field(
        default=None, description='Type of the group.', title='Type'
    )
    incidentsCount: Optional[int] = Field(
        default=None,
        description='Number of incidents associated with the group.',
        title='Incidentscount',
    )
    tags: Optional[List[TagSchema]] = Field(
        default=[], description='List of tags associated with the group', title='Tags'
    )
    members: Optional[List[GroupMembership]] = Field(
        default=[],
        description='Entities that have direct access to the group.',
        title='Members',
    )
    sourceApp: Optional[SourceAppSchema] = Field(
        default=None, description='Authomize ID of the Group.', title='Sourceapp'
    )
    ownerId: Optional[str] = Field(
        default=None, description='Authomize ID of the Group Owner.', title='Ownerid'
    )
    originId: Optional[str] = Field(
        default=None,
        description='The ID of the group on the source system',
        title='Originid',
    )
    uniqueId: Optional[str] = Field(
        default=None,
        description='The unique ID of the group (as provided by the connector)',
        title='Uniqueid',
    )
    createdAt: Optional[str] = Field(
        default=None, description='Date when group was created.', title='Createdat'
    )
    originType: Optional[str] = Field(
        default=None,
        description='Type of the group in source system.',
        title='Origintype',
    )


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(default=None, title='Detail')


class IdentitiesBlastRadiusRiskFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[RiskSeverity]] = Field(
        default=[], alias='$in', description='In'
    )


class IdentitiesOverallRisk(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[RiskSeverity]] = Field(
        default=[], alias='$in', description='In'
    )


class IdentitiesTakeoverRiskFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[RiskSeverity]] = Field(
        default=[], alias='$in', description='In'
    )


class IncidentEntitiesSchema(BaseModel):
    id: str = Field(..., description='Unique id of entity.', title='Id')
    name: Optional[str] = Field(
        default=None, description='Name of entity.', title='Name'
    )
    object: Union[InventoryObjects, str] = Field(
        ..., description='Identity | Account | Asset', title='Object'
    )
    email: Optional[str] = Field(default=None, description='Email', title='Email')
    originId: Optional[str] = Field(
        default=None, description='Origin ID', title='Originid'
    )
    originType: Optional[str] = Field(
        default=None, description='Origin Type', title='Origintype'
    )
    riskScore: Optional[IdentityRiskScore] = Field(
        default=None, description='Risk Scores', title='Riskscore'
    )
    sourceApp: Optional[SourceAppSchema] = Field(
        default=None, description='Applications', title='Sourceapp'
    )


class IncidentsSeverityFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    field_in: Optional[List[SeverityType]] = Field(
        default=[], alias='$in', description='In'
    )


class IsoIec27001(BaseModel):
    values: List[IsoIec27001Standard] = Field(..., description='Values')
    id: Optional[str] = Field(default='isoIec27001', description='UniqueID', title='Id')
    name: Optional[str] = Field(
        default='ISO/IEC 27001', description='Name', title='Name'
    )


class NonPaginatedResponseSchemaCampaignSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Union[CampaignSchema, List[CampaignSchema]] = Field(
        ..., description='Actual Data', title='Data'
    )


class NonPaginatedResponseSchemaSearchSourceAppsResponseSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Union[
        SearchSourceAppsResponseSchema, List[SearchSourceAppsResponseSchema]
    ] = Field(..., description='Actual Data', title='Data')


class PaginatedResponseSchemaAssetSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    pagination: Optional[PaginationResponseSchema] = Field(
        default=None, description='Pagination Metadata', title='Pagination'
    )
    data: List[AssetSchema] = Field(
        ..., description='List of Actual Data', title='Data'
    )


class PaginatedResponseSchemaCampaignSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    pagination: Optional[PaginationResponseSchema] = Field(
        default=None, description='Pagination Metadata', title='Pagination'
    )
    data: List[CampaignSchema] = Field(
        ..., description='List of Actual Data', title='Data'
    )


class PaginatedResponseSchemaGroupSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    pagination: Optional[PaginationResponseSchema] = Field(
        default=None, description='Pagination Metadata', title='Pagination'
    )
    data: List[GroupSchema] = Field(
        ..., description='List of Actual Data', title='Data'
    )


class RawIdentitySchema(BaseModel):
    authomizeId: str = Field(..., description='Unique ID', title='Authomizeid')
    name: Optional[str] = Field(
        default=None, description='Name of the identity', title='Name'
    )
    title: Optional[str] = Field(
        default=None, description='Title of the identity', title='Title'
    )
    department: Optional[str] = Field(
        default=None,
        description='The department in which the identity works',
        title='Department',
    )
    accountIds: Optional[List[str]] = Field(
        default=[],
        description='The account IDs associated with the identity',
        title='Accountids',
    )
    email: Optional[str] = Field(
        default=None, description='The email of the identity', title='Email'
    )
    tags: Optional[List[TagSchema]] = Field(
        default=[], description='The tags provided for the identity', title='Tags'
    )
    terminatedAt: Optional[str] = Field(
        default=None, description='Time of termination', title='Terminatedat'
    )
    hiredAt: Optional[str] = Field(
        default=None, description='Hired At', title='Hiredat'
    )
    incidentsCount: Optional[int] = Field(
        default=None,
        description='Number of associated incidents',
        title='Incidentscount',
    )


class ReviewerSchema(BaseModel):
    id: str = Field(..., description='Unique ID', title='Id')
    reviewStatus: Union[ReviewStatus, str] = Field(
        ..., description='Review Status', title='Reviewstatus'
    )
    user: Optional[UserSchema] = Field(
        default=None, description='User Schema of the reviewer', title='User'
    )


class SearchAccountsFilterBody(BaseModel):
    class Config:
        extra = Extra.forbid

    originId: Optional[SearchAccountsOriginIdFilter] = Field(
        default=None,
        description='Find accounts by their ID in the source system',
        title='Originid',
    )
    authomizeId: Optional[SearchAccountsIdFilter] = Field(
        default=None,
        description='Find accounts by their Authomize ID',
        title='Authomizeid',
    )
    blastRadiusRisk: Optional[BlastRadiusRiskFilter] = Field(
        default=None,
        description='The blast radius present the impact of an account to be taken over, based on the access and type of access the account have.',
        title='Blastradiusrisk',
    )
    isExternal: Optional[IsExternalFilter] = Field(
        default=None,
        description='Is the account external or internal.',
        title='Isexternal',
    )
    isMfaEnabled: Optional[IsMFAEnabledFilter] = Field(
        default=None, description='Is MFA enabled or disabled.', title='Ismfaenabled'
    )
    lastLoginAt: Optional[LastLoginAtFilter] = Field(
        default=None,
        description='Date of the last login in a specific application.',
        title='Lastloginat',
    )
    sourceAppId: Optional[AccountSourceAppIdFilter] = Field(
        default=None,
        description='The ID of the source application.',
        title='Sourceappid',
    )
    takeoverRisk: Optional[TakeoverRiskFilter] = Field(
        default=None,
        description='The account takeover risk presents the probability that an account will be taken over by an external identity.',
        title='Takeoverrisk',
    )


class SearchAccountsRequestSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    pagination: Optional[PaginationRequestSchema] = Field(
        default=None, description='Pagination metadata', title='Pagination'
    )
    expand: Optional[List[AccountExpansion]] = Field(
        default=None, description='Expand Fields'
    )
    sort: Optional[List[SortSchemaSearchAccountsSortFields]] = Field(
        default=None,
        description='Sort the results by account fields in ascending or descending order',
        title='Sort',
    )
    filter: Optional[SearchAccountsFilterBody] = Field(
        default=None, description='Search Accounts Filter', title='Filter'
    )


class SearchAssetsFilterBody(BaseModel):
    class Config:
        extra = Extra.forbid

    originId: Optional[OriginIdFilter] = Field(
        default=None,
        description='Find assets by their ID in the source system',
        title='Originid',
    )
    appId: Optional[AppIdFilter] = Field(
        default=None, description='Find assets by their app ID', title='Appid'
    )
    uniqueId: Optional[UniqueIdFilter] = Field(
        default=None, description='Find assets by their unique ID', title='Uniqueid'
    )
    authomizeId: Optional[AssetIdFilter] = Field(
        default=None,
        description='Find assets by their Authomize ID',
        title='Authomizeid',
    )


class SearchAssetsRequestSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    sort: Optional[List[SortSchemaSearchAssetsSortFields]] = Field(
        default=None,
        description="Sort the results by asset's name in ascending or descending order",
        title='Sort',
    )
    pagination: Optional[PaginationRequestSchema] = Field(
        default=None, description='Pagination metadata', title='Pagination'
    )
    expand: Optional[List[AssetExpansion]] = Field(
        default=None, description='Expand fields (to show additional information)'
    )
    filter: Optional[SearchAssetsFilterBody] = Field(
        default=None, description='Search Assets Filter', title='Filter'
    )


class SearchCampaignPermissionsRequestSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    pagination: Optional[PaginationRequestSchema] = Field(
        default=None, description='Pagination metadata', title='Pagination'
    )
    filter: Optional[CampaignPermissionsSearchFilterBody] = Field(
        default=None, description='Filter by the reviewer decisions. \n', title='Filter'
    )
    expand: Optional[List[PermissionsExpansion]] = Field(
        default=None, description='Fields to expand.\n'
    )


class SearchCampaignsRequestSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    filter: Optional[CampaignSearchFilterBody] = Field(
        default=None, description='Status filter', title='Filter'
    )
    expand: Optional[List[CampaignExpansion]] = Field(
        default=None, description='Expand Fields'
    )
    pagination: Optional[PaginationRequestSchema] = Field(
        default=None, description='Pagination metadata', title='Pagination'
    )
    sort: Optional[List[SortSchemaFieldName]] = Field(
        default=None,
        description='Sort the results by campaign fields in ascending or descending order',
        title='Sort',
    )


class SearchGroupsFilterBody(BaseModel):
    class Config:
        extra = Extra.forbid

    uniqueId: Optional[SearchGroupsUniqueIdFilter] = Field(
        default=None, description='Find groups by their unique ID', title='Uniqueid'
    )
    originId: Optional[SearchGroupsOriginIdFilter] = Field(
        default=None,
        description='Find groups by their ID in the source system',
        title='Originid',
    )
    appId: Optional[SearchGroupsAppIdFilter] = Field(
        default=None, description='Find groups by their app ID', title='Appid'
    )
    authomizeId: Optional[SearchGroupsIdFilter] = Field(
        default=None,
        description='Find groups by their Authomize ID',
        title='Authomizeid',
    )


class SearchGroupsRequestSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    sort: Optional[List[SortSchemaSearchGroupsSortFields]] = Field(
        default=None,
        description="Sort the results by group's name in ascending or descending order",
        title='Sort',
    )
    pagination: Optional[PaginationRequestSchema] = Field(
        default=None, description='Pagination metadata', title='Pagination'
    )
    expand: Optional[List[GroupExpansion]] = Field(
        default=None, description='Expand fields (to show additional information)'
    )
    filter: Optional[SearchGroupsFilterBody] = Field(
        default=None, description='Search Groups Filter', title='Filter'
    )


class SearchIdentitiesFilterBody(BaseModel):
    class Config:
        extra = Extra.forbid

    email: Optional[EmailFilter] = Field(
        default=None,
        description='Find identities by their email address',
        title='Email',
    )
    authomizeId: Optional[IdFilter] = Field(
        default=None,
        description='Find identities by their Authomize ID',
        title='Authomizeid',
    )
    blastRadiusRisk: Optional[IdentitiesBlastRadiusRiskFilter] = Field(
        default=None,
        description='The blast radius present the impact of the identity to be taken over, based on the access and type of access the account have.',
        title='Blastradiusrisk',
    )
    takeoverRisk: Optional[IdentitiesTakeoverRiskFilter] = Field(
        default=None,
        description='The account takeover risk presents the probability that the identity to be taken over by an external identity.',
        title='Takeoverrisk',
    )
    overallRisk: Optional[IdentitiesOverallRisk] = Field(
        default=None,
        description='The overall risk score of the identity, based on the blast radius and account take over risk.',
        title='Overallrisk',
    )
    hiredAt: Optional[HiredAtFilter] = Field(
        default=None, description='Date of hired.', title='Hiredat'
    )
    terminatedAt: Optional[TerminatedAtFilter] = Field(
        default=None, description='Date of termination.', title='Terminatedat'
    )


class SearchIdentitiesRequestSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    sort: Optional[List[SortSchemaSearchIdentitiesSortFields]] = Field(
        default=None,
        description='Sort the results by identity name in ascending or descending order',
        title='Sort',
    )
    pagination: Optional[PaginationRequestSchema] = Field(
        default=None, description='Pagination metadata', title='Pagination'
    )
    expand: Optional[List[IdentityExpansion]] = Field(
        default=None,
        description='Expand the account or tag fields to get additional data on related accounts or related tags',
    )
    filter: Optional[SearchIdentitiesFilterBody] = Field(
        default=None, description='Search filter options', title='Filter'
    )


class SearchIncidentsFilter(BaseModel):
    class Config:
        extra = Extra.forbid

    createdAt: Optional[IncidentsCreatedAtFilter] = Field(
        default=None, description='Created At date', title='Createdat'
    )
    updatedAt: Optional[IncidentsUpdatedAtFilter] = Field(
        default=None, description='Updated At date', title='Updatedat'
    )
    severity: Optional[IncidentsSeverityFilter] = Field(
        default=None, description='Severity', title='Severity'
    )
    status: Optional[IncidentsStatusFilter] = Field(
        default=None, description='Status', title='Status'
    )
    policyId: Optional[IncidentsPolicyIdFilter] = Field(
        default=None, description='Policy Id ', title='Policyid'
    )
    policyTemplateId: Optional[IncidentsPolicyTempalteIdFilter] = Field(
        default=None, description='Policy Template ID', title='Policytemplateid'
    )
    isResolved: Optional[IncidentsIsResolvedFilter] = Field(
        default=None, description='Is resolved?', title='Isresolved'
    )


class SearchIncidentsRequestSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    filter: Optional[SearchIncidentsFilter] = Field(
        default=None, description='Filter', title='Filter'
    )
    expand: Optional[List[IncidentExpansion]] = Field(
        default=None, description='Expend'
    )
    sort: Optional[List[SortSchemaSearchIncidentsSortFields]] = Field(
        default=None,
        description='Sort the results by incident fields in ascending or descending order',
        title='Sort',
    )
    pagination: Optional[PaginationRequestSchema] = Field(
        default=None, description='Pagination metadata', title='Pagination'
    )


class AccountSchema(BaseModel):
    authomizeId: str = Field(
        ..., description='Authomize ID of the account', title='Authomizeid'
    )
    originId: Optional[str] = Field(
        default=None,
        description='The identifier of the account from the source system.',
        title='Originid',
    )
    uniqueId: Optional[str] = Field(
        default=None,
        description='Unique ID is an identifier coming from the connector that is unique across all accounts coming from that connector',
        title='Uniqueid',
    )
    name: Optional[str] = Field(
        default=None, description='Name of account', title='Name'
    )
    type: str = Field(..., description='Type of account', title='Type')
    isExternal: bool = Field(
        ..., description='Is account external (Yes or No)', title='Isexternal'
    )
    email: Optional[str] = Field(
        default=None, description='Email address of account', title='Email'
    )
    identity: Optional[RawIdentitySchema] = Field(
        default=None, description='Associated Identity', title='Identity'
    )
    sourceApp: Optional[SourceAppSchema] = Field(
        default=None, description='Associated source app ', title='Sourceapp'
    )
    firstName: Optional[str] = Field(
        default=None, description='First name of account', title='Firstname'
    )
    lastName: Optional[str] = Field(
        default=None, description='Last name of account', title='Lastname'
    )
    isAdmin: Optional[bool] = Field(
        default=None,
        description='Is the account an admin account (Yes or No)',
        title='Isadmin',
    )
    status: Optional[UserStatus] = Field(default=None, description='The account status')
    description: Optional[str] = Field(
        default=None, description='The account description', title='Description'
    )
    hasMfa: Optional[bool] = Field(
        default=None,
        description='Does the account have MFA enabled (Yes or No)',
        title='Hasmfa',
    )
    lastLoginAt: Optional[str] = Field(
        default=None, description='Account Last Logged date', title='Lastloginat'
    )
    tags: Optional[List[TagSchema]] = Field(
        default=[], description='Tags associated with the account.', title='Tags'
    )
    riskScore: Optional[AccountRiskScore] = Field(
        default=None, description='Risk Scores for the Account.', title='Riskscore'
    )


class AddIdentityRisksRequestSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    filter: Optional[SearchIdentitiesFilterBody] = Field(
        default=None, description='Search filter options', title='Filter'
    )
    risks: List[RiskFactorIn] = Field(
        ..., description='List of risks to add to the identity', title='Risks'
    )


class CampaignsPermissionSchema(BaseModel):
    campaignId: str = Field(..., description='Campaign ID.\n', title='Campaignid')
    campaignName: str = Field(..., description='Campaign name.\n', title='Campaignname')
    reviewer: Optional[ReviewerSchema] = Field(
        default=None, description='Details of the reviewer.\n', title='Reviewer'
    )
    selection: Optional[EntitlementSelections] = Field(
        default=None, description='Reviewer decisions (keep, revoke, change or null).\n'
    )
    reason: Optional[str] = Field(
        default=None,
        description='Reviewer decision for keeping or revoking or requesting permission change for the reviewed access.  \n',
        title='Reason',
    )
    account: Optional[CampaignsPermissionAccountSchema] = Field(
        default=None,
        description='Account that their access was reviewed. \n',
        title='Account',
    )
    asset: Optional[CampaignsPermissionAssetSchema] = Field(
        default=None,
        description='Asset that the access to was reviewed.',
        title='Asset',
    )
    group: Optional[CampaignsPermissionGroupSchema] = Field(
        default=None,
        description='Group that the access to was reviewed.',
        title='Group',
    )
    privilege: Optional[CampaignsPermissionPrivilegeSchema] = Field(
        default=None, description='Privilege that was reviewed. \n', title='Privilege'
    )


class IdentitySchema(BaseModel):
    authomizeId: str = Field(..., description='Unique ID', title='Authomizeid')
    name: Optional[str] = Field(
        default=None, description='Name of the identity', title='Name'
    )
    title: Optional[str] = Field(
        default=None, description='Title of the identity', title='Title'
    )
    department: Optional[str] = Field(
        default=None,
        description='The department in which the identity works',
        title='Department',
    )
    accountIds: Optional[List[str]] = Field(
        default=[],
        description='The account IDs associated with the identity',
        title='Accountids',
    )
    email: Optional[str] = Field(
        default=None, description='The email of the identity', title='Email'
    )
    tags: Optional[List[TagSchema]] = Field(
        default=[], description='The tags provided for the identity', title='Tags'
    )
    terminatedAt: Optional[str] = Field(
        default=None, description='Time of termination', title='Terminatedat'
    )
    hiredAt: Optional[str] = Field(
        default=None, description='Hired At', title='Hiredat'
    )
    incidentsCount: Optional[int] = Field(
        default=None,
        description='Number of associated incidents',
        title='Incidentscount',
    )
    accounts: Optional[List[AccountSchema]] = Field(
        default=[],
        description='List of associated user or service accounts',
        title='Accounts',
    )
    riskScore: Optional[IdentityRiskScore] = Field(
        default=None, description='Risk Scores', title='Riskscore'
    )


class IncidentSchema(BaseModel):
    id: str = Field(..., description='Unique id', title='Id')
    createdAt: Optional[datetime] = Field(
        default=None,
        description='The date the incident was first reported.',
        title='Createdat',
    )
    updatedAt: Optional[datetime] = Field(
        default=None,
        description='The date the incident was last updated.',
        title='Updatedat',
    )
    entities: Optional[List[IncidentEntitiesSchema]] = Field(
        default=[], description='Entity', title='Entities'
    )
    apps: Optional[List[SourceAppSchema]] = Field(
        default=[], description='Applications', title='Apps'
    )
    category: Optional[AlertCategoryType] = Field(default=None, description='Category')
    tactics: Optional[List[AttackTacticType]] = Field(default=[], description='Tactics')
    compliance: Optional[
        List[Union[IsoIec27001, AicpaTsc2017, Ccm402, Ccm301, Cisv8]]
    ] = Field(default=[], description='Compliance', title='Compliance')
    techniques: Optional[List[str]] = Field(
        default=[], description='Techniques', title='Techniques'
    )
    status: Optional[EventStatusType] = Field(
        default=None,
        description='The status of the incident (Open, In Progress, Waiting for Input, or Closed)',
    )
    severity: SeverityType = Field(
        ..., description='The severity of the incident (Low, Medium, High or Critical).'
    )
    policyId: str = Field(..., description='Unique id of policy.', title='Policyid')
    policy: Optional[PolicySchema] = Field(
        default=None, description='Policy', title='Policy'
    )
    assigneeId: Optional[str] = Field(
        default=None, description='Unique id of assignee.', title='Assigneeid'
    )
    assignee: Optional[UserSchema] = Field(
        default=None, description='Assignee', title='Assignee'
    )
    recommendation: Optional[str] = Field(
        default=None, description='Recommendation', title='Recommendation'
    )
    description: Optional[str] = Field(
        default=None, description='Description', title='Description'
    )
    isResolved: bool = Field(..., description='Is Resolved?', title='Isresolved')
    url: str = Field(..., description='URL', title='Url')


class NonPaginatedResponseSchemaIncidentSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Union[IncidentSchema, List[IncidentSchema]] = Field(
        ..., description='Actual Data', title='Data'
    )


class NonPaginatedResponseSchemaReviewerSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Union[ReviewerSchema, List[ReviewerSchema]] = Field(
        ..., description='Actual Data', title='Data'
    )


class PaginatedResponseSchemaAccountSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    pagination: Optional[PaginationResponseSchema] = Field(
        default=None, description='Pagination Metadata', title='Pagination'
    )
    data: List[AccountSchema] = Field(
        ..., description='List of Actual Data', title='Data'
    )


class PaginatedResponseSchemaCampaignsPermissionSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    pagination: Optional[PaginationResponseSchema] = Field(
        default=None, description='Pagination Metadata', title='Pagination'
    )
    data: List[CampaignsPermissionSchema] = Field(
        ..., description='List of Actual Data', title='Data'
    )


class PaginatedResponseSchemaIdentitySchema(BaseModel):
    class Config:
        extra = Extra.forbid

    pagination: Optional[PaginationResponseSchema] = Field(
        default=None, description='Pagination Metadata', title='Pagination'
    )
    data: List[IdentitySchema] = Field(
        ..., description='List of Actual Data', title='Data'
    )


class PaginatedResponseSchemaIncidentSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    pagination: Optional[PaginationResponseSchema] = Field(
        default=None, description='Pagination Metadata', title='Pagination'
    )
    data: List[IncidentSchema] = Field(
        ..., description='List of Actual Data', title='Data'
    )


class RemoveIdentityRisksRequestSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    filter: Optional[SearchIdentitiesFilterBody] = Field(
        default=None, description='Search filter options', title='Filter'
    )
    since: datetime = Field(
        ...,
        description='Delete the risk score data lastly updated before the given date.',
        title='Since',
    )
