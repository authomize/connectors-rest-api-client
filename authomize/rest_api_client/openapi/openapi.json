{
  "openapi": "3.0.2",
  "info": {
    "title": "Authomize REST API",
    "description": "Authomize enables users to integrate your applications with Authomize via custom connectors. You can use the APIs described in this document to create your connector. Once data is uploaded and processed successfully, your custom connector will function in the same way as the connectors created by Authomize. \n# Authentication\nTo Authenticate use the API key, with the format: `Token=API_Key`.\nAn API key is a token you provide when making API calls. \n",
    "version": "1.2.0",
    "x-logo": {
      "url": "https://demo.authomize.com/favicon.svg"
    }
  },
  "paths": {
    "/is_alive": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Is Alive",
        "description": "Service status.",
        "operationId": "is_alive_is_alive_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsAliveResponse"
                }
              }
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Me",
        "description": "API status.",
        "operationId": "me_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/data": {
      "delete": {
        "tags": [
          "Apps"
        ],
        "summary": "Delete Application Data",
        "description": "Delete app data by {appId}",
        "operationId": "delete_application_data_v2_apps__appId__data_delete",
        "parameters": [
          {
            "description": "Application ID",
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string",
              "description": "Application ID"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/accounts/users": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create Users",
        "description": "**Create new users.**",
        "operationId": "create_users_v2_apps__appId__accounts_users_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NewUserRequestSchema"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewUserResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/access/grouping": {
      "post": {
        "tags": [
          "Access"
        ],
        "summary": "Create Groupings",
        "description": "A \"grouping\" is any object that collects multiple accounts or other groupings and can be granted permissions. Examples include groups, roles on certain platforms (e.g. AWS), profiles in certain platforms (e.g. SFDC) and more.\n",
        "operationId": "create_groupings_v2_apps__appId__access_grouping_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NewGroupingRequestSchema"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewGroupingResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/access/permissions": {
      "post": {
        "tags": [
          "Access"
        ],
        "summary": "Create Permissions",
        "description": "A permission (also referred to as an “entitlement”) is a set of privileges, assigned to a specific target. \nExamples include: file permissions, file shares, GCP entitlements, the actual policies assigning access to roles in AWS, and inline policies.\n",
        "operationId": "create_permissions_v2_apps__appId__access_permissions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NewPermissionsRequestSchema"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewPermissionsResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/privileges": {
      "post": {
        "tags": [
          "Privileges"
        ],
        "summary": "Create Privileges",
        "description": "Add privileges.\n",
        "operationId": "create_privileges_v2_apps__appId__privileges_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NewPrivilegesRequestSchema"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewPrivilegesResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/privileges/grants": {
      "post": {
        "tags": [
          "Privileges"
        ],
        "summary": "Create Privileges Grants",
        "description": "This API allows you to create a connection between different assets (for example, a folder that contains multiple files).\n",
        "operationId": "create_privileges_grants_v2_apps__appId__privileges_grants_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NewPrivilegeGrantsRequestSchema"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewPrivilegeGrantsResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/association/accounts": {
      "post": {
        "tags": [
          "Association"
        ],
        "summary": "Create Accounts Association",
        "description": "**post_accounts association**",
        "operationId": "create_accounts_association_v2_apps__appId__association_accounts_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NewAccountsAssociationRequestSchema"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAccountsAssociationResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/association/groupings": {
      "post": {
        "tags": [
          "Association"
        ],
        "summary": "Create Groupings Association",
        "description": "Create associations between accounts and groups.\n",
        "operationId": "create_groupings_association_v2_apps__appId__association_groupings_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NewGroupingsAssociationRequestSchema"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewGroupingsAssociationResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/assets": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Create Assets",
        "description": "Add assets.\n",
        "operationId": "create_assets_v2_apps__appId__assets_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NewAssetsRequestSchema"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAssetsResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/assets/inheritance": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Create Assets Inheritance",
        "description": "This API allows you to create a connection between different assets (for example, a folder that contains multiple files).\n",
        "operationId": "create_assets_inheritance_v2_apps__appId__assets_inheritance_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NewAssetsInheritanceRequestSchema"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAssetsInheritanceResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/identities/identities": {
      "post": {
        "tags": [
          "Identities"
        ],
        "summary": "Create Identities",
        "description": "Use this end point when adding metadata to an identity.\nThe data of the identity from this API is considered \"the source of truth\" and overrides the identity data from other systems.\n",
        "operationId": "create_identities_v2_apps__appId__identities_identities_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NewIdentityRequestSchema"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewIdentityResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/me": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Me",
        "description": "API status.",
        "operationId": "me_v1_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors/{connectorId}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieve",
        "description": "Retrieve connector by {connectorId}.",
        "operationId": "retrieve_v1_connectors__connectorId__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiConnectorSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Search",
        "description": "Search connectors.",
        "operationId": "search_v1_connectors_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 20
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Skip",
              "type": "integer",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiConnectorListSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Post",
        "description": "Create new connector.",
        "operationId": "post_v1_connectors_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRestApiConnectorSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiConnectorSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors/{connectorId}/transactions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Search",
        "description": "Search transactions of a connector.",
        "operationId": "search_v1_connectors__connectorId__transactions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 20
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Skip",
              "type": "integer",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionStateType"
            },
            "name": "state",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPaginatedSearchSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create",
        "description": "Create new transaction of a connector.",
        "operationId": "create_v1_connectors__connectorId__transactions_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BundleTransactionSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors/{connectorId}/transactions/{transactionId}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieve",
        "description": "Retrieve transaction of a connector by {transactionId}.",
        "operationId": "retrieve_v1_connectors__connectorId__transactions__transactionId__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Transactionid",
              "type": "string"
            },
            "name": "transactionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BundleTransactionSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete Transaction",
        "description": "Delete transaction of a connector by {transactionId}.",
        "operationId": "delete_transaction_v1_connectors__connectorId__transactions__transactionId__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Transactionid",
              "type": "string"
            },
            "name": "transactionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors/{connectorId}/transactions/{transactionId}/apply": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Apply",
        "description": "Apply a transaction.",
        "operationId": "apply_v1_connectors__connectorId__transactions__transactionId__apply_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Transactionid",
              "type": "string"
            },
            "name": "transactionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BundleTransactionSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors/{connectorId}/transactions/{transactionId}/items": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Items",
        "description": "Append items to transaction.",
        "operationId": "items_v1_connectors__connectorId__transactions__transactionId__items_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Transactionid",
              "type": "string"
            },
            "name": "transactionId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsBundleSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors/{connectorId}/export/{exportId}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieve",
        "description": "Download link to the connector data in archive of csv forms.",
        "operationId": "retrieve_v1_connectors__connectorId__export__exportId__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Exportid",
              "type": "string"
            },
            "name": "exportId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors/{connectorId}/export": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Search",
        "description": "Download link to the connector data in archive of csv forms.",
        "operationId": "search_v1_connectors__connectorId__export_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Search V1 Connectors  Connectorid  Export Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExportResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/schemas": {
      "get": {
        "tags": [
          "extended_schemas"
        ],
        "summary": "Create Groupings",
        "operationId": "create_groupings_schemas_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSchemasResponseSchema"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessDescription": {
        "title": "AccessDescription",
        "required": [
          "fromIdentityId",
          "toAssetId",
          "accessType"
        ],
        "type": "object",
        "properties": {
          "fromIdentityId": {
            "title": "Fromidentityid",
            "type": "string"
          },
          "toAssetId": {
            "title": "Toassetid",
            "type": "string"
          },
          "accessType": {
            "$ref": "#/components/schemas/AccessTypes"
          },
          "accessName": {
            "title": "Accessname",
            "type": "string"
          }
        }
      },
      "AccessTypes": {
        "title": "AccessTypes",
        "enum": [
          "Unknown",
          "All",
          "Owner",
          "Read",
          "ReadMetadata",
          "Write",
          "Create",
          "Delete",
          "Execute",
          "Enable",
          "Assign",
          "Restore",
          "Import",
          "Export",
          "Get",
          "Set",
          "Update",
          "Cancel",
          "Use",
          "AllowUse",
          "List",
          "Administrative",
          "Delegate",
          "Join",
          "Invite",
          "Leave",
          "Share"
        ],
        "description": "An enumeration."
      },
      "AllSchemasResponseSchema": {
        "title": "AllSchemasResponseSchema",
        "type": "object",
        "properties": {
          "v1_bundle_schema": {
            "$ref": "#/components/schemas/ItemsBundleSchema"
          },
          "v2_bundle_schema": {
            "$ref": "#/components/schemas/RequestsBundleSchema"
          }
        }
      },
      "AssetDescription": {
        "title": "AssetDescription",
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AssetTypes"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "logoUrl": {
            "title": "Logourl",
            "type": "string"
          },
          "href": {
            "title": "Href",
            "type": "string"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "format": "date-time"
          },
          "isAuxiliary": {
            "title": "Isauxiliary",
            "type": "boolean"
          },
          "service": {
            "title": "Service",
            "type": "string"
          },
          "isFederated": {
            "title": "Isfederated",
            "type": "boolean"
          }
        }
      },
      "AssetType": {
        "title": "AssetType",
        "enum": [
          "Application",
          "Database",
          "Drive",
          "File",
          "Folder",
          "GitRepository",
          "Integration",
          "Project",
          "Site",
          "Table",
          "Ticket",
          "VirtualMachine",
          "Other"
        ],
        "description": "An enumeration."
      },
      "AssetTypes": {
        "title": "AssetTypes",
        "enum": [
          "Resource",
          "File",
          "Folder",
          "Drive",
          "Site",
          "Application",
          "Integration",
          "Package",
          "Project",
          "Cluster",
          "Dataset",
          "Subscription",
          "Table",
          "TableRecord",
          "Disk",
          "Image",
          "Instance",
          "Snapshot",
          "Service",
          "Topic",
          "Bucket",
          "BillingAccount",
          "Device",
          "Calendar",
          "Policy",
          "GitRepository",
          "Network",
          "Vpc",
          "NetworkInterface",
          "VirtualMachine",
          "NetworkSecurityGroup",
          "Ticket",
          "NetworkSubnet",
          "NetworkAcl",
          "RouteTable",
          "NetworkAddress",
          "Secret",
          "Storage",
          "Workspace",
          "SharedLink",
          "Collection",
          "Database",
          "ServerlessFunction",
          "ServerlessApplication",
          "Gateway",
          "ImageRepository",
          "Resource_BusinessAccount",
          "LoadBalancer",
          "Listener"
        ],
        "description": "An enumeration."
      },
      "AssetsInheritance": {
        "title": "AssetsInheritance",
        "required": [
          "fromId",
          "toId"
        ],
        "type": "object",
        "properties": {
          "fromId": {
            "title": "Fromid",
            "type": "string"
          },
          "toId": {
            "title": "Toid",
            "type": "string"
          }
        }
      },
      "AvailableConnectorId": {
        "title": "AvailableConnectorId",
        "enum": [
          "restApiImport"
        ],
        "description": "An enumeration."
      },
      "BundleTransactionSchema": {
        "title": "BundleTransactionSchema",
        "required": [
          "connectorId",
          "id",
          "state"
        ],
        "type": "object",
        "properties": {
          "connectorId": {
            "title": "Connectorid",
            "type": "string"
          },
          "transactionCreatedAt": {
            "title": "Transactioncreatedat",
            "type": "string",
            "format": "date-time"
          },
          "warnings": {
            "title": "Warnings",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "validations": {
            "title": "Validations",
            "type": "object"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/TransactionStateType"
          }
        },
        "description": "API response schema"
      },
      "ConnectorStatus": {
        "title": "ConnectorStatus",
        "enum": [
          "initializing",
          "validating",
          "failure",
          "enabled",
          "installable",
          "archived",
          "disabled",
          "deleted"
        ],
        "description": "An enumeration."
      },
      "ExportResponse": {
        "title": "ExportResponse",
        "required": [
          "exportId",
          "exportUrl"
        ],
        "type": "object",
        "properties": {
          "exportId": {
            "title": "Exportid",
            "type": "string"
          },
          "exportUrl": {
            "title": "Exporturl",
            "type": "string"
          }
        }
      },
      "GroupingType": {
        "title": "GroupingType",
        "enum": [
          "Group",
          "VirtualGroup"
        ],
        "description": "An enumeration."
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "IdentitiesInheritance": {
        "title": "IdentitiesInheritance",
        "required": [
          "fromId",
          "toId"
        ],
        "type": "object",
        "properties": {
          "fromId": {
            "title": "Fromid",
            "type": "string"
          },
          "toId": {
            "title": "Toid",
            "type": "string"
          }
        }
      },
      "IdentityDescription": {
        "title": "IdentityDescription",
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IdentityTypes"
          },
          "userType": {
            "title": "Usertype",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "manager": {
            "title": "Manager",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "department": {
            "title": "Department",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "href": {
            "title": "Href",
            "type": "string"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "format": "date-time"
          },
          "terminationDate": {
            "title": "Terminationdate",
            "type": "string",
            "format": "date-time"
          },
          "isExternal": {
            "title": "Isexternal",
            "type": "boolean"
          },
          "isAuxiliary": {
            "title": "Isauxiliary",
            "type": "boolean"
          },
          "hasTwoFactorAuthenticationEnabled": {
            "title": "Hastwofactorauthenticationenabled",
            "type": "boolean"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string"
          },
          "userName": {
            "title": "Username",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "service": {
            "title": "Service",
            "type": "string"
          },
          "lastLoginDate": {
            "title": "Lastlogindate",
            "type": "string",
            "format": "date-time"
          },
          "anyoneCanJoinOrLeave": {
            "title": "Anyonecanjoinorleave",
            "type": "boolean"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "city": {
            "title": "City",
            "type": "string"
          },
          "country": {
            "title": "Country",
            "type": "string"
          },
          "division": {
            "title": "Division",
            "type": "string"
          },
          "employeeNumber": {
            "title": "Employeenumber",
            "type": "string"
          },
          "personalEmail": {
            "title": "Personalemail",
            "type": "string"
          },
          "hireDate": {
            "title": "Hiredate",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IdentityTypes": {
        "title": "IdentityTypes",
        "enum": [
          "Identity",
          "User",
          "Group",
          "EntitlementProxy",
          "AccessKey",
          "ServiceAccount",
          "Alias",
          "Domain",
          "Organization",
          "TaskPerformer",
          "BusinessAccount"
        ],
        "description": "An enumeration."
      },
      "IsAliveResponse": {
        "title": "IsAliveResponse",
        "required": [
          "isAlive"
        ],
        "type": "object",
        "properties": {
          "isAlive": {
            "title": "Isalive",
            "type": "boolean",
            "description": "**isAlive**"
          }
        }
      },
      "ItemsBundleSchema": {
        "title": "ItemsBundleSchema",
        "required": [
          "identities",
          "assets",
          "inheritanceIdentities",
          "inheritanceAssets",
          "access"
        ],
        "type": "object",
        "properties": {
          "services": {
            "title": "Services",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDescription"
            }
          },
          "identities": {
            "title": "Identities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityDescription"
            }
          },
          "assets": {
            "title": "Assets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDescription"
            }
          },
          "inheritanceIdentities": {
            "title": "Inheritanceidentities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentitiesInheritance"
            }
          },
          "inheritanceAssets": {
            "title": "Inheritanceassets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetsInheritance"
            }
          },
          "access": {
            "title": "Access",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessDescription"
            }
          }
        }
      },
      "MeResponse": {
        "title": "MeResponse",
        "required": [
          "version",
          "id",
          "tenant"
        ],
        "type": "object",
        "properties": {
          "version": {
            "title": "Version",
            "type": "string",
            "description": "**version**"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "**id**"
          },
          "tenant": {
            "title": "Tenant",
            "type": "string",
            "description": "**tenant**"
          }
        }
      },
      "NewAccountsAssociationRequestSchema": {
        "title": "NewAccountsAssociationRequestSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "type": "string",
            "description": "Source account ID **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "type": "string",
            "description": "Target acount ID **Mandatory**\nThe grouping to associate with.\n"
          }
        },
        "description": "New accounts associations request schema"
      },
      "NewAccountsAssociationResponseSchema": {
        "title": "NewAccountsAssociationResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          }
        },
        "description": "New accounts associations response schema"
      },
      "NewAssetsInheritanceRequestSchema": {
        "title": "NewAssetsInheritanceRequestSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "type": "string",
            "description": "ID of the source asset. **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "type": "string",
            "description": "The ID of the iherited asset (or assets). **Mandatory**\n"
          }
        },
        "description": "New assets inheritance request schema"
      },
      "NewAssetsInheritanceResponseSchema": {
        "title": "NewAssetsInheritanceResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          }
        },
        "description": "New assets inheritance response schema"
      },
      "NewAssetsRequestSchema": {
        "title": "NewAssetsRequestSchema",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "ID of asset. **Mandatory**. The ID must be unique.\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the asset. The default is the Asset ID. **Mandatory**\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetType"
              }
            ],
            "description": "The asset types that are supported by Authomize **Mandatory**\n\nPermitted values: \n   •\t`Application` (federation) \n   •\t`Database`\n   •\t`Drive`\n   •\t`File`\n   •\t`Folder`\n   •\t`Git Repository`\n   •\t`Integration`\n   •\t`Project`\n   •\t`Site`\n   •\t`Table`\n   •\t`Ticket`\n   •\t`Virtual Machine`\n\nIf the asset type does not exist use `Other`.\n",
            "default": "Other"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The asset type in the source system.\nThe default is the canonical type (if not mentioned).\n",
            "default": "Group"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "The date (in ISO 8601 format) that the asset was created.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A description of the asset (up to 512 characters).\n"
          },
          "href": {
            "title": "Href",
            "type": "string",
            "description": "A link to the asset in the source system.\n"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the asset.\n"
          }
        },
        "description": "New assets request schema"
      },
      "NewAssetsResponseSchema": {
        "title": "NewAssetsResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          }
        },
        "description": "New assets response schema"
      },
      "NewGroupingRequestSchema": {
        "title": "NewGroupingRequestSchema",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "User IDs must be unique **Mandatory**\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the grouping. The default is the ID field. **Optional**\n"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The name of the type of grouping in the source system. The default is `Group`. Example: Group/Alias/AWS Role\n",
            "default": "Group"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupingType"
              }
            ],
            "description": "Allowed values are `Group` and `Virtual Group`.\nThe default is `Group`.\nVirtual Groups are mapped to the Authomize access explorer graph and are not present in other places in the user interface nor are they counted as a group.\n",
            "default": "Group"
          },
          "anyoneCanJoinOrLeave": {
            "title": "Anyonecanjoinorleave",
            "type": "boolean",
            "description": "Must be either `ture` or `false`.\nWhen set to `true` users can give themselves membership in this grouping without the grouping's managers' or owners' permission. \nExamples include public groups (M365), Google Groups with specific flags, ...\nValid only when `groupingType = Group`\n",
            "default": false
          },
          "isRole": {
            "title": "Isrole",
            "type": "boolean",
            "description": "If `True`, the grouping represent the role in the source application and the name of the role is the grouping `name`.\nThe default is `False`.\n"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags on the access grouping.\n"
          }
        },
        "description": "New group request schema"
      },
      "NewGroupingResponseSchema": {
        "title": "NewGroupingResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          }
        },
        "description": "New group response schema"
      },
      "NewGroupingsAssociationRequestSchema": {
        "title": "NewGroupingsAssociationRequestSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "type": "string",
            "description": "Grouping source ID **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "type": "string",
            "description": "Grouping Target Id  **Mandatory**. The grouping to associate with.\n"
          }
        },
        "description": "New groupings associations request schema"
      },
      "NewGroupingsAssociationResponseSchema": {
        "title": "NewGroupingsAssociationResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          }
        },
        "description": "New groupings associations response schema"
      },
      "NewIdentityRequestSchema": {
        "title": "NewIdentityRequestSchema",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Identity ID **Mandatory**\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's work email address.\n"
          },
          "personalEmail": {
            "title": "Personalemail",
            "type": "string",
            "description": "User's personal email address.\n"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "employeeNumber": {
            "title": "Employeenumber",
            "type": "string",
            "description": "Employee number"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "The user status must be one of the following: `Deleted`, `Disabled`, `Enabled`, `Staged` or `Suspended`.\n"
          },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Country"
          },
          "city": {
            "title": "City",
            "type": "string",
            "description": "City"
          },
          "department": {
            "title": "Department",
            "type": "string",
            "description": "The identity's department in the organization.\n"
          },
          "division": {
            "title": "Division",
            "type": "string",
            "description": "The identity's division in their organization.\n"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The user's job title.\n"
          },
          "manager": {
            "title": "Manager",
            "type": "string",
            "description": "The user's manager's ID.\n"
          },
          "hireDate": {
            "title": "Hiredate",
            "type": "string",
            "description": "The user's first day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "terminationDate": {
            "title": "Terminationdate",
            "type": "string",
            "description": "The user's last day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the identity.\n"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "New Identity request schema"
      },
      "NewIdentityResponseSchema": {
        "title": "NewIdentityResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          }
        },
        "description": "New identity response schema"
      },
      "NewPermissionsRequestSchema": {
        "title": "NewPermissionsRequestSchema",
        "required": [
          "permissionSource",
          "privilegeId"
        ],
        "type": "object",
        "properties": {
          "permissionSource": {
            "title": "Permissionsource",
            "type": "string",
            "description": "The source of the permission. This field is **Mandatory**.\nSet `permissionSource` to either `Account ID` or `Grouping ID`.\n"
          },
          "privilegeId": {
            "title": "Privilegeid",
            "type": "string",
            "description": "A privilege, by id, that allows access to assets. This field is **Mandatory**."
          },
          "targetAssets": {
            "title": "Targetassets",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the asset. \nWhen `null`, the entire application has global permission.\n"
          },
          "isRole": {
            "title": "Isrole",
            "type": "string",
            "description": "If `True`, the permissions represent the role in the source application.\nThe default is `False`.\n"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags on access permissions.\n"
          }
        },
        "description": "New permissions request schema"
      },
      "NewPermissionsResponseSchema": {
        "title": "NewPermissionsResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          }
        },
        "description": "New permissions response schema"
      },
      "NewPrivilegeGrantsRequestSchema": {
        "title": "NewPrivilegeGrantsRequestSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "type": "string",
            "description": "ID of the source privilege. **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "type": "string",
            "description": "ID of the granted privilege. **Mandatory**\n"
          }
        },
        "description": "New privilege grants request schema"
      },
      "NewPrivilegeGrantsResponseSchema": {
        "title": "NewPrivilegeGrantsResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          }
        },
        "description": "New privilege grants response schema"
      },
      "NewPrivilegesRequestSchema": {
        "title": "NewPrivilegesRequestSchema",
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "ID of privilege. **Mandatory, must be unique.**\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PrivilegeType"
              }
            ],
            "description": "The privilege types that are supported by Authomize **Mandatory**\n\nPermitted values: \n   •\t`Administrative`\n   •\t`Unknown`\n   •\t`Read`\n   •\t`ReadMetadata`\n   •\t`Write`\n   •\t`Create`\n   •\t`Delete`\n   •\t`Execute`\n   •\t`Enable`\n   •\t`Assign`\n   •\t`Restore`\n   •\t`Import`\n   •\t`Export`\n   •\t`Update`\n   •\t`Cancel`\n   •\t`Use`\n   •\t`Delegate`\n   •\t`Join`\n   •\t`Invite`\n   •\t`Share`\n\nIf the privilege type does not exist use `Unknown` or `Use`.\n"
          },
          "originPrivilegeName": {
            "title": "Originprivilegename",
            "type": "string",
            "description": "The privilege name in the source system.\nThe default is the canonical type (if not mentioned).\n"
          }
        },
        "description": "New privileges request schema"
      },
      "NewPrivilegesResponseSchema": {
        "title": "NewPrivilegesResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          }
        },
        "description": "New privileges response schema"
      },
      "NewRestApiConnectorSchema": {
        "title": "NewRestApiConnectorSchema",
        "required": [
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "config": {
            "title": "Config",
            "type": "object"
          },
          "serviceId": {
            "title": "Serviceid",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "NewUserRequestSchema": {
        "title": "NewUserRequestSchema",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "User's Account ID. **Mandatory, must be unique.**\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username\n"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's email address\n"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "User status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the user\n"
          },
          "isExternal": {
            "title": "Isexternal",
            "type": "boolean",
            "description": "Account is external to Authomize.\nMust be either `true` or `false`.\n"
          },
          "hasMFA": {
            "title": "Hasmfa",
            "type": "boolean",
            "description": "Has Multi-Factor Authentication enabled.\nMust be either `true` or `false`.\n"
          },
          "lastLoginDate": {
            "title": "Lastlogindate",
            "type": "string",
            "description": "The last login date in ISO 8601 format.\n",
            "format": "date-time"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "New user request schema"
      },
      "NewUserResponseSchema": {
        "title": "NewUserResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          }
        },
        "description": "New users response schema"
      },
      "Pagination": {
        "title": "Pagination",
        "type": "object",
        "properties": {
          "limit": {
            "title": "Limit",
            "type": "integer",
            "default": -1
          },
          "skip": {
            "title": "Skip",
            "type": "integer",
            "default": 0
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "default": -1
          },
          "hasMore": {
            "title": "Hasmore",
            "type": "boolean"
          }
        },
        "description": "Base schema for pagination"
      },
      "PrivilegeType": {
        "title": "PrivilegeType",
        "enum": [
          "Administrative",
          "Unknown",
          "Read",
          "ReadMetadata",
          "Write",
          "Create",
          "Delete",
          "Execute",
          "Enable",
          "Assign",
          "Restore",
          "Import",
          "Export",
          "Update",
          "Cancel",
          "Use",
          "Delegate",
          "Join",
          "Invite",
          "Share"
        ],
        "description": "An enumeration."
      },
      "RequestsBundleSchema": {
        "title": "RequestsBundleSchema",
        "type": "object",
        "properties": {
          "new_users": {
            "title": "New Users",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewUserRequestSchema"
            },
            "description": "**Create new users.**"
          },
          "new_groupings": {
            "title": "New Groupings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewGroupingRequestSchema"
            },
            "description": "A \"grouping\" is any object that collects multiple accounts or other groupings and can be granted permissions. Examples include groups, roles on certain platforms (e.g. AWS), profiles in certain platforms (e.g. SFDC) and more.\n"
          },
          "new_permissions": {
            "title": "New Permissions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPermissionsRequestSchema"
            },
            "description": "A permission (also referred to as an “entitlement”) is a set of privileges, assigned to a specific target. \nExamples include: file permissions, file shares, GCP entitlements, the actual policies assigning access to roles in AWS, and inline policies.\n"
          },
          "new_privileges": {
            "title": "New Privileges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPrivilegesRequestSchema"
            },
            "description": "Add privileges.\n"
          },
          "new_privileges_grants": {
            "title": "New Privileges Grants",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPrivilegeGrantsRequestSchema"
            },
            "description": "This API allows you to create a connection between different assets (for example, a folder that contains multiple files).\n"
          },
          "new_accounts_association": {
            "title": "New Accounts Association",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAccountsAssociationRequestSchema"
            },
            "description": "**post_accounts association**"
          },
          "new_groupings_association": {
            "title": "New Groupings Association",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewGroupingsAssociationRequestSchema"
            },
            "description": "Create associations between accounts and groups.\n"
          },
          "new_assets": {
            "title": "New Assets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAssetsRequestSchema"
            },
            "description": "Add assets.\n"
          },
          "new_assets_inheritance": {
            "title": "New Assets Inheritance",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAssetsInheritanceRequestSchema"
            },
            "description": "This API allows you to create a connection between different assets (for example, a folder that contains multiple files).\n"
          },
          "new_identities": {
            "title": "New Identities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewIdentityRequestSchema"
            },
            "description": "Use this end point when adding metadata to an identity.\nThe data of the identity from this API is considered \"the source of truth\" and overrides the identity data from other systems.\n"
          }
        }
      },
      "RestApiConnectorListSchema": {
        "title": "RestApiConnectorListSchema",
        "required": [
          "pagination",
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestApiConnectorSchema"
            }
          }
        }
      },
      "RestApiConnectorSchema": {
        "title": "RestApiConnectorSchema",
        "required": [
          "id",
          "serviceType"
        ],
        "type": "object",
        "properties": {
          "config": {
            "title": "Config",
            "type": "object"
          },
          "serviceId": {
            "title": "Serviceid",
            "type": "string",
            "default": ""
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "format": "date-time"
          },
          "lastSyncedAt": {
            "title": "Lastsyncedat",
            "type": "string"
          },
          "lastError": {
            "title": "Lasterror",
            "type": "string"
          },
          "modifiedAt": {
            "title": "Modifiedat",
            "type": "string"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorStatus"
              }
            ],
            "default": "disabled"
          },
          "serviceType": {
            "title": "Servicetype",
            "type": "string"
          },
          "availableConnectorId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailableConnectorId"
              }
            ],
            "default": "restApiImport"
          },
          "actorType": {
            "title": "Actortype",
            "type": "string"
          },
          "actorId": {
            "title": "Actorid",
            "type": "string"
          }
        }
      },
      "ServiceDescription": {
        "title": "ServiceDescription",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "icon": {
            "title": "Icon",
            "type": "string"
          }
        }
      },
      "SubmitResponse": {
        "title": "SubmitResponse",
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          }
        }
      },
      "TransactionPaginatedSearchSchema": {
        "title": "TransactionPaginatedSearchSchema",
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BundleTransactionSchema"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "TransactionStateType": {
        "title": "TransactionStateType",
        "enum": [
          "Applying",
          "Complete",
          "Failed",
          "Ingest",
          "IngestChunk",
          "PostProcess",
          "Queue"
        ],
        "description": "An enumeration."
      },
      "UserStatus": {
        "title": "UserStatus",
        "enum": [
          "Staged",
          "Enabled",
          "Disabled",
          "Suspended",
          "Deleted",
          "Unknown"
        ],
        "description": "An enumeration."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  },
  "tags": [
    {
      "name": "Status",
      "description": "The status of the API.\n"
    },
    {
      "name": "Apps",
      "description": "Actions at the application level.\n"
    },
    {
      "name": "Accounts",
      "description": "Each account is associated with a specific application.\nIf the an account already exists on the platform, the account data will be overridden with the new data.\n"
    },
    {
      "name": "Access",
      "description": "Access is a way to relate between accounts, roles and assets.\n"
    },
    {
      "name": "Privileges",
      "description": "Privileges that allows access to assets."
    },
    {
      "name": "Association",
      "description": "Associates between accounts and groups and between groups and other groups.\n"
    },
    {
      "name": "Assets",
      "description": "**assets section**"
    },
    {
      "name": "Identities",
      "description": "A unique identity (person or entity) who owns one or more accounts.\nFor example: a regular employee (John doe) or an external contractor (Willy from Acme Corp.).\n"
    },
    {
      "name": "v1",
      "description": "v1 routes"
    },
    {
      "name": "extended_schemas",
      "description": "Extended schemas"
    }
  ]
}
