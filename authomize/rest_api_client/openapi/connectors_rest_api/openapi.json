{
  "openapi": "3.0.2",
  "info": {
    "title": "Authomize API Reference",
    "description": "Authomize enables users to integrate your applications with Authomize via custom connectors.\n\nYou can use the APIs described in this document to create your connector.\n\nOnce data is uploaded and processed successfully, your custom connector will function in the same way as the connectors created by Authomize.\n\n## How does Authomize work?\nAuthomize works by gathering information about:\n\n· individuals, teams and functions.\n\n· apps, assets and accounts.\n\n· all the relationships between them.\n\n![img.png](https://storagetry1.blob.core.windows.net/public/78d82650-71b0-4909-8444-022aab79add5.png)\n\n## Connector APIs\n\nAuthomize connector APIs enable pushing data into Authomize from external sources.\n\nThese APIs enable data extracted from outside applications (via application APIs) to be delivered to Authomize.\n\nA connector processes extracted application data to transform it into a format compatible with Authomize.\n\n![img_1.png](https://storagetry1.blob.core.windows.net/public/341bf6ef-2e5b-4284-b715-45105ffbf0f8.png)\n\n## Authentication\nTo Authenticate use the API Token, with the format: `Authorization: API_Token`.\n\nAn API Token is a token you provide when making API calls. \n\n\nThe API Token should be included in every request to the API in an `Authorization` header.\n```\ncurl -v -X POST \\n\n     -H \"Authorization: {API_Token}\" \\n\n     ...\n```\n\n## Limits\nRequests cannot exceed a size of 1MB.\n",
    "version": "4.3.0",
    "x-logo": {
      "url": "https://static.authomize.com/public/icons/authomize-green.svg"
    }
  },
  "paths": {
    "/metrics": {
      "get": {
        "summary": "Metrics",
        "description": "Endpoint that serves Prometheus metrics.",
        "operationId": "metrics_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/is_alive": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Is Alive",
        "description": "Service status.",
        "operationId": "is_alive_is_alive_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsAliveResponse"
                }
              }
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Me",
        "description": "API status.",
        "operationId": "me_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/files/template": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Get File Template",
        "description": "The Get File Template API downloads a template file for file-provider based on the REST API schema.",
        "operationId": "get_file_template_v2_apps_files_template_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v2/apps/{appId}/data": {
      "delete": {
        "tags": [
          "Apps"
        ],
        "summary": "Delete Application Data",
        "description": "The Delete Application Data API is used to delete app data by `{appId}`.",
        "operationId": "delete_application_data_v2_apps__appId__data_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n",
            "required": false,
            "schema": {
              "title": "Executionid",
              "type": "string",
              "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
            },
            "name": "executionId",
            "in": "query"
          },
          {
            "description": "Delete all the app data lastly updated before the given date.",
            "required": false,
            "schema": {
              "title": "Modifiedbefore",
              "type": "string",
              "description": "Delete all the app data lastly updated before the given date.",
              "format": "date-time"
            },
            "example": "2023-07-02T08:30:55.198087+00:00",
            "name": "modifiedBefore",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestSubmitResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}": {
      "patch": {
        "tags": [
          "Apps"
        ],
        "summary": "Update Application Data",
        "description": "The Update Application Data API is used to update app data on `{appId}`.\n",
        "operationId": "update_application_data_v2_apps__appId__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAppSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestSubmitResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/accounts/users": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Search Users",
        "description": "The Search Users APIs lists users of an App (by App ID).",
        "operationId": "search_users_v2_apps__appId__accounts_users_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchUsersListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create Users",
        "description": "The Create Users APIs sets up App users(by App ID).",
        "operationId": "create_users_v2_apps__appId__accounts_users_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUsersListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewUserResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Accounts"
        ],
        "summary": "Patch Users",
        "description": "The Patch Users API is used to edit user data.\nWhen editing user data, any combination of fields can be updated at a time.\nThe uniqueId is required and can't be changed.\nOnly the fields that are supplied will be affected by the PATCH request (others will be unchanged).\n",
        "operationId": "patch_users_v2_apps__appId__accounts_users_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewUserResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/access/grouping": {
      "get": {
        "tags": [
          "Access"
        ],
        "summary": "Search Groupings",
        "description": "The Search Grouping API is used to get a list of groups that have access to a particular app.",
        "operationId": "search_groupings_v2_apps__appId__access_grouping_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchGroupingResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Access"
        ],
        "summary": "Create Groupings",
        "description": "The Create Groupings API is used to create groups that have access to a particular app.",
        "operationId": "create_groupings_v2_apps__appId__access_grouping_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewGroupingsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewGroupingResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Access"
        ],
        "summary": "Patch Groupings",
        "description": "The Patch Groupings API is used to edit grouping data. \nWhen editing grouping data, any combination of fields can be updated at a time. \nThe uniqueId is required and can't be changed. \nOnly the fields that are supplied will be affected by the PATCH request (others will be unchanged). ",
        "operationId": "patch_groupings_v2_apps__appId__access_grouping_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroupingsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateGroupingsResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/access/permissions": {
      "get": {
        "tags": [
          "Access"
        ],
        "summary": "Search Permissions",
        "description": "The Search Permissions API is used to list the privileges, assigned to a specific target.\nA permission (also referred to as an \"entitlement\") is a set of privileges, assigned to a specific target. \nExamples include: file permissions, file shares, GCP entitlements, the actual policies assigning access to roles in AWS, and inline policies. \n",
        "operationId": "search_permissions_v2_apps__appId__access_permissions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchPermissionResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Access"
        ],
        "summary": "Create Permissions",
        "description": "The Create Permissions API is used to create a set of privileges, assigned to a specific target.\nA permission (also referred to as an \"entitlement\") is a set of privileges, assigned to a specific target. \nExamples include: file permissions, file shares, GCP entitlements, the actual policies assigning access to roles in AWS, and inline policies.\n",
        "operationId": "create_permissions_v2_apps__appId__access_permissions_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPermissionsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewPermissionsResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/privileges": {
      "get": {
        "tags": [
          "Privileges"
        ],
        "summary": "Search Privileges",
        "description": "The Search Privileges API gets all the privileges from a particular date until now. ",
        "operationId": "search_privileges_v2_apps__appId__privileges_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchPrivilegesListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Privileges"
        ],
        "summary": "Create Privileges",
        "description": "The Create Privileges API is used to define privileges that can be associated with assets.\nFor example, Read privileges on a file.\nHere you can define the type of privileges and associate it to assets in the Permission API.\n",
        "operationId": "create_privileges_v2_apps__appId__privileges_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPrivilegesListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewPrivilegesResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Privileges"
        ],
        "summary": "Patch Privileges",
        "description": "Patch Privileges API is used to update privilege data.\nWhen editing privilege data, any combination of fields can be updated at a time.\nA uniqueId is required and can't be changed.\nOnly the fields that are supplied will be affected by the PATCH request (others will be unchanged).",
        "operationId": "patch_privileges_v2_apps__appId__privileges_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePrivilegesListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewPrivilegesResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/privileges/grants": {
      "get": {
        "tags": [
          "Privileges"
        ],
        "summary": "Search Privileges Grants",
        "description": "The Search Privileges Grants API lists the privileges granted (for example: admin privileges can read, write, view).",
        "operationId": "search_privileges_grants_v2_apps__appId__privileges_grants_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchPrivilegeGrantsListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Privileges"
        ],
        "summary": "Create Privileges Grants",
        "description": "The Create Privileges Grants API enables you to establish inheritance between privileges, so that a single privilege contains a set of other privileges. \nFor example, an Administrative privilege that contains read and write privileges.",
        "operationId": "create_privileges_grants_v2_apps__appId__privileges_grants_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPrivilegesGrantsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewPrivilegeGrantsResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/association/accounts": {
      "get": {
        "tags": [
          "Association"
        ],
        "summary": "Search Accounts Association",
        "description": "The Search Accounts Association API gets a list of account associations between user accounts and groups.",
        "operationId": "search_accounts_association_v2_apps__appId__association_accounts_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchAccountsAssociationsListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Association"
        ],
        "summary": "Create Accounts Association",
        "description": "The Create Accounts Association API creates account associations between user accounts and groups.",
        "operationId": "create_accounts_association_v2_apps__appId__association_accounts_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountsAssociationsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAccountsAssociationResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/association/groupings": {
      "get": {
        "tags": [
          "Association"
        ],
        "summary": "Search Groupings Association",
        "description": "The Search Groupings Association API gets a list of associations between groups and other groups.",
        "operationId": "search_groupings_association_v2_apps__appId__association_groupings_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchGroupingsAssociationsListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Association"
        ],
        "summary": "Create Groupings Association",
        "description": "The Create Groupings Association API creates associations between groups and other groups.\n",
        "operationId": "create_groupings_association_v2_apps__appId__association_groupings_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewGroupingsAssociationsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewGroupingsAssociationResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Search Assets",
        "description": "The Search Assets API gets a list of all assets (including asset data).",
        "operationId": "search_assets_v2_apps__appId__assets_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchAssetsListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Create Assets",
        "description": "The Create Assets API creates assets (including asset data).",
        "operationId": "create_assets_v2_apps__appId__assets_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAssetsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAssetsResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Assets"
        ],
        "summary": "Patch Assets",
        "description": "The Patch Assets API is used to edit assets (including asset data).\nWhen editing asset data, any combination of fields can be updated at a time.\nThe uniqueId is required and can't be changed.\nOnly the fields that are supplied are affected by the PATCH request (others are unchanged).\n",
        "operationId": "patch_assets_v2_apps__appId__assets_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAssetsResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/assets/inheritance": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Search Assets Inheritance",
        "description": "The Search Assets Inheritance API gets all the assets related to the source asset (for examples, all files in a folder).",
        "operationId": "search_assets_inheritance_v2_apps__appId__assets_inheritance_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchAssetsInheritanceListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Create Assets Inheritance",
        "description": "The Create Assets Inheritence API enables you to create a connection between different assets (for example, a folder that contains multiple files).\n",
        "operationId": "create_assets_inheritance_v2_apps__appId__assets_inheritance_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAssetsInheritanceListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAssetsInheritanceResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/identities": {
      "get": {
        "tags": [
          "Identities"
        ],
        "summary": "Search Identities",
        "description": "The Search Identities API gets all identities and their data.",
        "operationId": "search_identities_v2_apps__appId__identities_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchIdentitiesListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Identities"
        ],
        "summary": "Create Identities",
        "description": "The Create Identities API is used to create identities. \nThe data of the identity from this API is considered \"the source of truth\" and overrides the identity data from other systems.\n",
        "operationId": "create_identities_v2_apps__appId__identities_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewIdentitiesListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewIdentityResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Identities"
        ],
        "summary": "Patch Identities",
        "description": "The Patch Identities API is used to edit identity data.\nWhen editing identity data, any combination of fields can be updated at a time.\nThe uniqueId is required and can't be changed.\nOnly the fields that are supplied will be affected by the PATCH request (others will be unchanged).\n",
        "operationId": "patch_identities_v2_apps__appId__identities_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIdentitiesListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewIdentityResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/me": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Me",
        "description": "API status.",
        "operationId": "me_v1_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors/{connectorId}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieve",
        "description": "Retrieve connector by {connectorId}.",
        "operationId": "retrieve_v1_connectors__connectorId__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiConnectorSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Search",
        "description": "Search connectors.",
        "operationId": "search_v1_connectors_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 20
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Skip",
              "type": "integer",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiConnectorListSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Post",
        "description": "Create new connector.",
        "operationId": "post_v1_connectors_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRestApiConnectorSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiConnectorSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors/{connectorId}/transactions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Search",
        "description": "Search transactions of a connector.",
        "operationId": "search_v1_connectors__connectorId__transactions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 20
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Skip",
              "type": "integer",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionStateType"
            },
            "name": "state",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPaginatedSearchSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create",
        "description": "Create new transaction of a connector.",
        "operationId": "create_v1_connectors__connectorId__transactions_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BundleTransactionSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors/{connectorId}/transactions/{transactionId}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieve",
        "description": "Retrieve transaction of a connector by {transactionId}.",
        "operationId": "retrieve_v1_connectors__connectorId__transactions__transactionId__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Transactionid",
              "type": "string"
            },
            "name": "transactionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BundleTransactionSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete Transaction",
        "description": "Delete transaction of a connector by {transactionId}.",
        "operationId": "delete_transaction_v1_connectors__connectorId__transactions__transactionId__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Transactionid",
              "type": "string"
            },
            "name": "transactionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors/{connectorId}/transactions/{transactionId}/apply": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Apply",
        "description": "Apply a transaction.",
        "operationId": "apply_v1_connectors__connectorId__transactions__transactionId__apply_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Transactionid",
              "type": "string"
            },
            "name": "transactionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BundleTransactionSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors/{connectorId}/transactions/{transactionId}/items": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Items",
        "description": "Append items to transaction.",
        "operationId": "items_v1_connectors__connectorId__transactions__transactionId__items_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Transactionid",
              "type": "string"
            },
            "name": "transactionId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsBundleSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors/{connectorId}/export/{exportId}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieve",
        "description": "Download link to the connector data in archive of csv forms.",
        "operationId": "retrieve_v1_connectors__connectorId__export__exportId__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Exportid",
              "type": "string"
            },
            "name": "exportId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/connectors/{connectorId}/export": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Search",
        "description": "Download link to the connector data in archive of csv forms.",
        "operationId": "search_v1_connectors__connectorId__export_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connectorid",
              "type": "string"
            },
            "name": "connectorId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Search V1 Connectors  Connectorid  Export Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExportResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/schemas": {
      "get": {
        "tags": [
          "extended_schemas"
        ],
        "summary": "Create Groupings",
        "operationId": "create_groupings_schemas_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSchemasResponseSchema"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessDescription": {
        "title": "AccessDescription",
        "required": [
          "fromIdentityId",
          "accessType"
        ],
        "type": "object",
        "properties": {
          "fromIdentityId": {
            "title": "Fromidentityid",
            "type": "string"
          },
          "toAssetId": {
            "title": "Toassetid",
            "type": "string"
          },
          "accessType": {
            "$ref": "#/components/schemas/AccessTypes"
          },
          "accessName": {
            "title": "Accessname",
            "type": "string"
          }
        }
      },
      "AccessTypes": {
        "title": "AccessTypes",
        "enum": [
          "Unknown",
          "All",
          "Owner",
          "Login",
          "Read",
          "ReadMetadata",
          "Write",
          "Create",
          "Delete",
          "Execute",
          "Enable",
          "Assign",
          "Restore",
          "Import",
          "Export",
          "Get",
          "Set",
          "Update",
          "Cancel",
          "Use",
          "AllowUse",
          "List",
          "Administrative",
          "Delegate",
          "Join",
          "Invite",
          "Leave",
          "Share"
        ],
        "description": "An enumeration."
      },
      "AccountsAssociationSchema": {
        "title": "AccountsAssociationSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "Source account ID **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "Target grouping ID to associate with  **Mandatory**.\n"
          }
        },
        "description": "Accounts association schema"
      },
      "AllSchemasResponseSchema": {
        "title": "AllSchemasResponseSchema",
        "type": "object",
        "properties": {
          "v1_bundle_schema": {
            "$ref": "#/components/schemas/ItemsBundleSchema"
          },
          "v2_bundle_schema": {
            "$ref": "#/components/schemas/RequestsBundleSchema"
          },
          "v2_data_only_schema": {
            "$ref": "#/components/schemas/IngestionDataBundleSchema"
          }
        }
      },
      "AssetDescription": {
        "title": "AssetDescription",
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "customName": {
            "title": "Customname",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AssetTypes"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "logoUrl": {
            "title": "Logourl",
            "type": "string"
          },
          "href": {
            "title": "Href",
            "type": "string"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "format": "date-time"
          },
          "isAuxiliary": {
            "title": "Isauxiliary",
            "type": "boolean"
          },
          "service": {
            "title": "Service",
            "type": "string"
          },
          "isFederated": {
            "title": "Isfederated",
            "type": "boolean"
          }
        }
      },
      "AssetInheritanceSchema": {
        "title": "AssetInheritanceSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "ID of the source asset. **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "The ID of the iherited asset (or assets). **Mandatory**\n"
          }
        },
        "description": "Asset inheritance schema"
      },
      "AssetSchema": {
        "title": "AssetSchema",
        "required": [
          "uniqueId",
          "name"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Asset ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The asset ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The name of the asset. The default is the Asset ID. **Mandatory**\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetType"
              }
            ],
            "description": "The asset types that are supported by Authomize **Mandatory**\n\nPermitted values:\n\n   •\t`Application` (federation) \n   •\t`Database`\n   •\t`Drive`\n   •\t`File`\n   •\t`Folder`\n   •\t`GitRepository`\n   •\t`Integration`\n   •\t`Project`\n   •\t`Site`\n   •\t`Table`\n   •\t`Ticket`\n   •\t`VirtualMachine`\n   •\t`Other`\n\nIf the asset type does not exist use `Other`.\n",
            "default": "Other"
          },
          "alternativeName": {
            "title": "Alternativename",
            "type": "string",
            "description": "Any alternative name for the resource, or any other representation of the resource, if it exists.\nThe default is `null`.\n"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The asset type in the source system.\nThe default is the canonical type (if not mentioned).\n"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "The date (in ISO 8601 format) that the asset was created.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "lastUsedAt": {
            "title": "Lastusedat",
            "type": "string",
            "description": "The date (in ISO 8601 format) of the last time that the asset was in use.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A description of the asset (up to 512 characters).\n"
          },
          "href": {
            "title": "Href",
            "type": "string",
            "description": "A link to the asset in the source system.\n"
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The owner ID"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags associated with the asset.\n"
          }
        },
        "description": "Asset schema"
      },
      "AssetType": {
        "title": "AssetType",
        "enum": [
          "Application",
          "Database",
          "Drive",
          "File",
          "Folder",
          "GitRepository",
          "Integration",
          "Project",
          "Site",
          "Table",
          "Ticket",
          "VirtualMachine",
          "Secret",
          "Other"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AssetTypes": {
        "title": "AssetTypes",
        "enum": [
          "Resource",
          "File",
          "Folder",
          "Drive",
          "Site",
          "Application",
          "Integration",
          "Package",
          "Project",
          "Cluster",
          "Dataset",
          "Subscription",
          "Table",
          "TableRecord",
          "Disk",
          "Image",
          "Instance",
          "Snapshot",
          "Service",
          "Topic",
          "Bucket",
          "BillingAccount",
          "Device",
          "Calendar",
          "Policy",
          "GitRepository",
          "Network",
          "Vpc",
          "NetworkInterface",
          "VirtualMachine",
          "NetworkSecurityGroup",
          "Ticket",
          "NetworkSubnet",
          "NetworkAcl",
          "RouteTable",
          "NetworkAddress",
          "Secret",
          "Storage",
          "Workspace",
          "SharedLink",
          "Collection",
          "Database",
          "ServerlessFunction",
          "ServerlessApplication",
          "Gateway",
          "ImageRepository",
          "Resource_BusinessAccount",
          "LoadBalancer",
          "Listener"
        ],
        "description": "An enumeration."
      },
      "AssetsInheritance": {
        "title": "AssetsInheritance",
        "required": [
          "fromId",
          "toId"
        ],
        "type": "object",
        "properties": {
          "fromId": {
            "title": "Fromid",
            "type": "string"
          },
          "toId": {
            "title": "Toid",
            "type": "string"
          }
        }
      },
      "AvailableConnectorId": {
        "title": "AvailableConnectorId",
        "enum": [
          "restApiImport"
        ],
        "description": "An enumeration."
      },
      "BundleTransactionSchema": {
        "title": "BundleTransactionSchema",
        "required": [
          "connectorId",
          "id",
          "state"
        ],
        "type": "object",
        "properties": {
          "connectorId": {
            "title": "Connectorid",
            "type": "string"
          },
          "transactionCreatedAt": {
            "title": "Transactioncreatedat",
            "type": "string",
            "format": "date-time"
          },
          "warnings": {
            "title": "Warnings",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "validations": {
            "title": "Validations",
            "type": "object"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/TransactionStateType"
          }
        },
        "description": "API response schema"
      },
      "ConnectorStatus": {
        "title": "ConnectorStatus",
        "enum": [
          "initializing",
          "validating",
          "failure",
          "enabled",
          "installable",
          "archived",
          "disabled",
          "deleted"
        ],
        "description": "An enumeration."
      },
      "ExportResponse": {
        "title": "ExportResponse",
        "required": [
          "exportId",
          "exportUrl"
        ],
        "type": "object",
        "properties": {
          "exportId": {
            "title": "Exportid",
            "type": "string"
          },
          "exportUrl": {
            "title": "Exporturl",
            "type": "string"
          }
        }
      },
      "GroupingSchema": {
        "title": "GroupingSchema",
        "required": [
          "uniqueId",
          "name"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "\nGrouping ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The groupping ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The name of the grouping. The default is the ID field. **Mandatory**\n"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The name of the type of grouping in the source system. The default is `Group`. Example: Group/Alias/AWS Role\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupingType"
              }
            ],
            "description": "Allowed values are `Group` and `VirtualGroup`.\n\nThe default is `Group`.\n\n`VirtualGroup` are mapped to the Authomize access explorer graph and are not present in other places in the user interface nor are they counted as a group.\n",
            "default": "Group"
          },
          "isRole": {
            "title": "Isrole",
            "type": "boolean",
            "description": "If `Role`, the grouping represents a role in the source application and the name of the role is the grouping `name`.\n\nThe default is `False`.\n",
            "default": false
          },
          "anyoneCanJoinOrLeave": {
            "title": "Anyonecanjoinorleave",
            "type": "boolean",
            "description": "Must be either `ture` or `false`.\nWhen set to `true` users can give themselves membership in this grouping without the grouping's managers' or owners' permission. \nExamples include public groups (M365), Google Groups with specific flags, ...\nValid only when `groupingType = Group`\n",
            "default": false
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The uniqueId of the user who is the \"owner\" (or manager) of the group.\n"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags on the access grouping.\n"
          },
          "alternativeName": {
            "title": "Alternativename",
            "maxLength": 256,
            "type": "string",
            "description": "Alias of the grouping."
          }
        },
        "description": "Grouping schema"
      },
      "GroupingType": {
        "title": "GroupingType",
        "enum": [
          "Group",
          "VirtualGroup"
        ],
        "description": "An enumeration."
      },
      "GroupingsAssociationSchema": {
        "title": "GroupingsAssociationSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "Grouping source ID **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "Grouping Target ID  **Mandatory**. The grouping to associate with.\n"
          }
        },
        "description": "Groupings association schema"
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "IdentitiesInheritance": {
        "title": "IdentitiesInheritance",
        "required": [
          "fromId",
          "toId"
        ],
        "type": "object",
        "properties": {
          "fromId": {
            "title": "Fromid",
            "type": "string"
          },
          "toId": {
            "title": "Toid",
            "type": "string"
          }
        }
      },
      "IdentityDescription": {
        "title": "IdentityDescription",
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IdentityTypes"
          },
          "userType": {
            "title": "Usertype",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "manager": {
            "title": "Manager",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "department": {
            "title": "Department",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "href": {
            "title": "Href",
            "type": "string"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "format": "date-time"
          },
          "terminationDate": {
            "title": "Terminationdate",
            "type": "string",
            "format": "date-time"
          },
          "isExternal": {
            "title": "Isexternal",
            "type": "boolean"
          },
          "isAuxiliary": {
            "title": "Isauxiliary",
            "type": "boolean"
          },
          "hasTwoFactorAuthenticationEnabled": {
            "title": "Hastwofactorauthenticationenabled",
            "type": "boolean"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string"
          },
          "userName": {
            "title": "Username",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "service": {
            "title": "Service",
            "type": "string"
          },
          "lastLoginAt": {
            "title": "Lastloginat",
            "type": "string",
            "format": "date-time"
          },
          "anyoneCanJoinOrLeave": {
            "title": "Anyonecanjoinorleave",
            "type": "boolean"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "city": {
            "title": "City",
            "type": "string"
          },
          "country": {
            "title": "Country",
            "type": "string"
          },
          "division": {
            "title": "Division",
            "type": "string"
          },
          "employeeNumber": {
            "title": "Employeenumber",
            "type": "string"
          },
          "personalEmail": {
            "title": "Personalemail",
            "type": "string"
          },
          "hireDate": {
            "title": "Hiredate",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IdentitySchema": {
        "title": "IdentitySchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Identity ID **Mandatory**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The identity ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's work email address.\n"
          },
          "personalEmail": {
            "title": "Personalemail",
            "type": "string",
            "description": "User's personal email address.\n"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "employeeNumber": {
            "title": "Employeenumber",
            "type": "string",
            "description": "Employee number"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "The user status must be one of the following: `Deleted`, `Disabled`, `Enabled`, `Staged` or `Suspended`.\n"
          },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Country"
          },
          "city": {
            "title": "City",
            "type": "string",
            "description": "City"
          },
          "department": {
            "title": "Department",
            "type": "string",
            "description": "The identity's department in the organization.\n"
          },
          "division": {
            "title": "Division",
            "type": "string",
            "description": "The identity's division in their organization.\n"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The user's job title.\n"
          },
          "managerId": {
            "title": "Managerid",
            "type": "string",
            "description": "The manager identity's ID.\n"
          },
          "hireAt": {
            "title": "Hireat",
            "type": "string",
            "description": "The user's first day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "terminationAt": {
            "title": "Terminationat",
            "type": "string",
            "description": "The user's last day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the identity.\n"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "Identity schema"
      },
      "IdentityTypes": {
        "title": "IdentityTypes",
        "enum": [
          "Identity",
          "Person",
          "User",
          "Group",
          "EntitlementProxy",
          "AccessKey",
          "ServiceAccount",
          "Alias",
          "Domain",
          "Organization",
          "TaskPerformer",
          "BusinessAccount"
        ],
        "description": "An enumeration."
      },
      "IngestionDataBundleSchema": {
        "title": "IngestionDataBundleSchema",
        "type": "object",
        "properties": {
          "new_users": {
            "title": "New Users",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewUserRequestSchema"
            },
            "description": "The Create Users APIs sets up App users(by App ID)."
          },
          "new_groupings": {
            "title": "New Groupings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewGroupingRequestSchema"
            },
            "description": "The Create Groupings API is used to create groups that have access to a particular app."
          },
          "new_permissions": {
            "title": "New Permissions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPermissionRequestSchema"
            },
            "description": "The Create Permissions API is used to create a set of privileges, assigned to a specific target.\nA permission (also referred to as an \"entitlement\") is a set of privileges, assigned to a specific target. \nExamples include: file permissions, file shares, GCP entitlements, the actual policies assigning access to roles in AWS, and inline policies.\n"
          },
          "new_privileges": {
            "title": "New Privileges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPrivilegeRequestSchema"
            },
            "description": "The Create Privileges API is used to define privileges that can be associated with assets.\nFor example, Read privileges on a file.\nHere you can define the type of privileges and associate it to assets in the Permission API.\n"
          },
          "new_privileges_grants": {
            "title": "New Privileges Grants",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPrivilegeGrantsRequestSchema"
            },
            "description": "The Create Privileges Grants API enables you to establish inheritance between privileges, so that a single privilege contains a set of other privileges. \nFor example, an Administrative privilege that contains read and write privileges."
          },
          "new_accounts_association": {
            "title": "New Accounts Association",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAccountsAssociationRequestSchema"
            },
            "description": "The Create Accounts Association API creates account associations between user accounts and groups."
          },
          "new_groupings_association": {
            "title": "New Groupings Association",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewGroupingsAssociationRequestSchema"
            },
            "description": "The Create Groupings Association API creates associations between groups and other groups.\n"
          },
          "new_assets": {
            "title": "New Assets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAssetRequestSchema"
            },
            "description": "The Create Assets API creates assets (including asset data)."
          },
          "new_assets_inheritance": {
            "title": "New Assets Inheritance",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAssetInheritanceRequestSchema"
            },
            "description": "The Create Assets Inheritence API enables you to create a connection between different assets (for example, a folder that contains multiple files).\n"
          },
          "new_identities": {
            "title": "New Identities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewIdentityRequestSchema"
            },
            "description": "The Create Identities API is used to create identities. \nThe data of the identity from this API is considered \"the source of truth\" and overrides the identity data from other systems.\n"
          },
          "app": {
            "title": "App",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewAssetRequestSchema"
              }
            ],
            "description": "The Update Application Data API is used to update app data on `{appId}`.\n"
          }
        }
      },
      "IsAliveResponse": {
        "title": "IsAliveResponse",
        "required": [
          "isAlive"
        ],
        "type": "object",
        "properties": {
          "isAlive": {
            "title": "Isalive",
            "type": "boolean",
            "description": "**isAlive**"
          }
        }
      },
      "ItemsBundleSchema": {
        "title": "ItemsBundleSchema",
        "type": "object",
        "properties": {
          "services": {
            "title": "Services",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDescription"
            }
          },
          "identities": {
            "title": "Identities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityDescription"
            }
          },
          "assets": {
            "title": "Assets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDescription"
            }
          },
          "inheritanceIdentities": {
            "title": "Inheritanceidentities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentitiesInheritance"
            }
          },
          "inheritanceAssets": {
            "title": "Inheritanceassets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetsInheritance"
            }
          },
          "access": {
            "title": "Access",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessDescription"
            }
          }
        }
      },
      "MeResponse": {
        "title": "MeResponse",
        "required": [
          "version",
          "id",
          "tenant"
        ],
        "type": "object",
        "properties": {
          "version": {
            "title": "Version",
            "type": "string",
            "description": "**version**"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "**id**"
          },
          "tenant": {
            "title": "Tenant",
            "type": "string",
            "description": "**tenant**"
          }
        }
      },
      "NewAccountsAssociationRequestSchema": {
        "title": "NewAccountsAssociationRequestSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "Source account ID **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "Target grouping ID to associate with  **Mandatory**.\n"
          }
        },
        "description": "New accounts associations request schema"
      },
      "NewAccountsAssociationResponseDataSchema": {
        "title": "NewAccountsAssociationResponseDataSchema",
        "required": [
          "validSourceIds",
          "validTargetIds",
          "invalidSourceIds",
          "invalidTargetIds"
        ],
        "type": "object",
        "properties": {
          "validSourceIds": {
            "title": "Validsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** source account ids."
          },
          "validTargetIds": {
            "title": "Validtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** target grouping ids."
          },
          "invalidSourceIds": {
            "title": "Invalidsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** source account ids."
          },
          "invalidTargetIds": {
            "title": "Invalidtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** target grouping ids."
          }
        },
        "description": "New accounts associations response data schema"
      },
      "NewAccountsAssociationResponseSchema": {
        "title": "NewAccountsAssociationResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewAccountsAssociationResponseDataSchema"
              }
            ],
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New accounts associations response schema"
      },
      "NewAccountsAssociationsListRequestSchema": {
        "title": "NewAccountsAssociationsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAccountsAssociationRequestSchema"
            },
            "description": "New Accounts Associations"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewAssetInheritanceRequestSchema": {
        "title": "NewAssetInheritanceRequestSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "ID of the source asset. **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "The ID of the iherited asset (or assets). **Mandatory**\n"
          }
        },
        "description": "New assets inheritance request schema"
      },
      "NewAssetRequestSchema": {
        "title": "NewAssetRequestSchema",
        "required": [
          "uniqueId",
          "name"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Asset ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The asset ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The name of the asset. The default is the Asset ID. **Mandatory**\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetType"
              }
            ],
            "description": "The asset types that are supported by Authomize **Mandatory**\n\nPermitted values:\n\n   •\t`Application` (federation) \n   •\t`Database`\n   •\t`Drive`\n   •\t`File`\n   •\t`Folder`\n   •\t`GitRepository`\n   •\t`Integration`\n   •\t`Project`\n   •\t`Site`\n   •\t`Table`\n   •\t`Ticket`\n   •\t`VirtualMachine`\n   •\t`Other`\n\nIf the asset type does not exist use `Other`.\n",
            "default": "Other"
          },
          "alternativeName": {
            "title": "Alternativename",
            "type": "string",
            "description": "Any alternative name for the resource, or any other representation of the resource, if it exists.\nThe default is `null`.\n"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The asset type in the source system.\nThe default is the canonical type (if not mentioned).\n"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "The date (in ISO 8601 format) that the asset was created.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "lastUsedAt": {
            "title": "Lastusedat",
            "type": "string",
            "description": "The date (in ISO 8601 format) of the last time that the asset was in use.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A description of the asset (up to 512 characters).\n"
          },
          "href": {
            "title": "Href",
            "type": "string",
            "description": "A link to the asset in the source system.\n"
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The owner ID"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags associated with the asset.\n"
          }
        },
        "description": "New asset request schema"
      },
      "NewAssetsInheritanceListRequestSchema": {
        "title": "NewAssetsInheritanceListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAssetInheritanceRequestSchema"
            },
            "description": "New Assets Inheritance"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewAssetsInheritanceResponseDataSchema": {
        "title": "NewAssetsInheritanceResponseDataSchema",
        "required": [
          "validSourceIds",
          "validTargetIds",
          "invalidSourceIds",
          "invalidTargetIds"
        ],
        "type": "object",
        "properties": {
          "validSourceIds": {
            "title": "Validsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** source assets ids."
          },
          "validTargetIds": {
            "title": "Validtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** target assets ids."
          },
          "invalidSourceIds": {
            "title": "Invalidsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** source assets ids."
          },
          "invalidTargetIds": {
            "title": "Invalidtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** target assets ids."
          }
        },
        "description": "New assets inheritance response data schema"
      },
      "NewAssetsInheritanceResponseSchema": {
        "title": "NewAssetsInheritanceResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewAssetsInheritanceResponseDataSchema"
              }
            ],
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New assets inheritance response schema"
      },
      "NewAssetsListRequestSchema": {
        "title": "NewAssetsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAssetRequestSchema"
            },
            "description": "New Assets"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewAssetsResponseSchema": {
        "title": "NewAssetsResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities",
          "validOwnerIds",
          "invalidOwnerIds"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "description": "Response data.",
            "default": {}
          },
          "validOwnerIds": {
            "title": "Validownerids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** owner (user) ids."
          },
          "invalidOwnerIds": {
            "title": "Invalidownerids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** owner (user) ids."
          }
        },
        "description": "New assets response schema"
      },
      "NewGroupingRequestSchema": {
        "title": "NewGroupingRequestSchema",
        "required": [
          "uniqueId",
          "name"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "\nGrouping ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The groupping ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The name of the grouping. The default is the ID field. **Mandatory**\n"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The name of the type of grouping in the source system. The default is `Group`. Example: Group/Alias/AWS Role\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupingType"
              }
            ],
            "description": "Allowed values are `Group` and `VirtualGroup`.\n\nThe default is `Group`.\n\n`VirtualGroup` are mapped to the Authomize access explorer graph and are not present in other places in the user interface nor are they counted as a group.\n",
            "default": "Group"
          },
          "isRole": {
            "title": "Isrole",
            "type": "boolean",
            "description": "If `Role`, the grouping represents a role in the source application and the name of the role is the grouping `name`.\n\nThe default is `False`.\n",
            "default": false
          },
          "anyoneCanJoinOrLeave": {
            "title": "Anyonecanjoinorleave",
            "type": "boolean",
            "description": "Must be either `ture` or `false`.\nWhen set to `true` users can give themselves membership in this grouping without the grouping's managers' or owners' permission. \nExamples include public groups (M365), Google Groups with specific flags, ...\nValid only when `groupingType = Group`\n",
            "default": false
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The uniqueId of the user who is the \"owner\" (or manager) of the group.\n"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags on the access grouping.\n"
          },
          "alternativeName": {
            "title": "Alternativename",
            "maxLength": 256,
            "type": "string",
            "description": "Alias of the grouping."
          }
        },
        "description": "New group request schema"
      },
      "NewGroupingResponseSchema": {
        "title": "NewGroupingResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities",
          "validOwnerIds",
          "invalidOwnerIds"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "description": "Response data.",
            "default": {}
          },
          "validOwnerIds": {
            "title": "Validownerids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** owner (user) ids."
          },
          "invalidOwnerIds": {
            "title": "Invalidownerids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** owner (user) ids."
          }
        },
        "description": "New group response schema"
      },
      "NewGroupingsAssociationRequestSchema": {
        "title": "NewGroupingsAssociationRequestSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "Grouping source ID **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "Grouping Target ID  **Mandatory**. The grouping to associate with.\n"
          }
        },
        "description": "New groupings associations request schema"
      },
      "NewGroupingsAssociationResponseDataSchema": {
        "title": "NewGroupingsAssociationResponseDataSchema",
        "required": [
          "validSourceIds",
          "validTargetIds",
          "invalidSourceIds",
          "invalidTargetIds"
        ],
        "type": "object",
        "properties": {
          "validSourceIds": {
            "title": "Validsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** source grouping ids."
          },
          "validTargetIds": {
            "title": "Validtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** target grouping ids."
          },
          "invalidSourceIds": {
            "title": "Invalidsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** source grouping ids."
          },
          "invalidTargetIds": {
            "title": "Invalidtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** target grouping ids."
          }
        },
        "description": "New groupings associations response data schema"
      },
      "NewGroupingsAssociationResponseSchema": {
        "title": "NewGroupingsAssociationResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewGroupingsAssociationResponseDataSchema"
              }
            ],
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New groupings associations response schema"
      },
      "NewGroupingsAssociationsListRequestSchema": {
        "title": "NewGroupingsAssociationsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewGroupingsAssociationRequestSchema"
            },
            "description": "New Groupings Associations"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewGroupingsListRequestSchema": {
        "title": "NewGroupingsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewGroupingRequestSchema"
            },
            "description": "New Groupings"
          },
          "validateOnly": {
            "title": "Validate Only\n",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewIdentitiesListRequestSchema": {
        "title": "NewIdentitiesListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewIdentityRequestSchema"
            },
            "description": "New Identities"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewIdentityRequestSchema": {
        "title": "NewIdentityRequestSchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Identity ID **Mandatory**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The identity ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's work email address.\n"
          },
          "personalEmail": {
            "title": "Personalemail",
            "type": "string",
            "description": "User's personal email address.\n"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "employeeNumber": {
            "title": "Employeenumber",
            "type": "string",
            "description": "Employee number"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "The user status must be one of the following: `Deleted`, `Disabled`, `Enabled`, `Staged` or `Suspended`.\n"
          },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Country"
          },
          "city": {
            "title": "City",
            "type": "string",
            "description": "City"
          },
          "department": {
            "title": "Department",
            "type": "string",
            "description": "The identity's department in the organization.\n"
          },
          "division": {
            "title": "Division",
            "type": "string",
            "description": "The identity's division in their organization.\n"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The user's job title.\n"
          },
          "managerId": {
            "title": "Managerid",
            "type": "string",
            "description": "The manager identity's ID.\n"
          },
          "hireAt": {
            "title": "Hireat",
            "type": "string",
            "description": "The user's first day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "terminationAt": {
            "title": "Terminationat",
            "type": "string",
            "description": "The user's last day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the identity.\n"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "New Identity request schema"
      },
      "NewIdentityResponseSchema": {
        "title": "NewIdentityResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New identity response schema"
      },
      "NewPermissionRequestSchema": {
        "title": "NewPermissionRequestSchema",
        "required": [
          "sourceUniqueId",
          "sourceType",
          "privilegeId"
        ],
        "type": "object",
        "properties": {
          "sourceUniqueId": {
            "title": "Sourceuniqueid",
            "minLength": 1,
            "type": "string",
            "description": "The unique ID of the permission's source. Must be either `userId` or `groupingId`. **Mandatory**.\n"
          },
          "sourceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionSourceType"
              }
            ],
            "description": "The type of the permission's source. **Mandatory**.\n\nSet `sourceType` to either:\n\n- User `uniqueId`.\n- Grouping `uniqueId`."
          },
          "privilegeId": {
            "title": "Privilegeid",
            "minLength": 1,
            "type": "string",
            "description": "The ID of the privilege, allows access to assets. **Mandatory**.\n"
          },
          "assetId": {
            "title": "Assetid",
            "type": "string",
            "description": "The ID of the asset.\n\nWhen `null`, this is a global permission on the entire application (not just locally)."
          },
          "isRole": {
            "title": "Isrole",
            "type": "boolean",
            "description": "If `true`, the permissions represent the role in the source application.\nThe default is `false`.\n",
            "default": false
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags on access permissions.\n"
          },
          "escalationPathPossible": {
            "title": "Escalationpathpossible",
            "type": "boolean",
            "description": "If `true`, it's possible to perform a privilege escalation using the permission.   \nexample: User has Read access to a secret containing credentials of another user.  This allows \nprivilege escalation.\nopposite example: User has Read metadata permission to a secret containing credentials of another user. This *Does NOT* allows \nprivilege escalation.\n\n",
            "default": false
          }
        }
      },
      "NewPermissionsListRequestSchema": {
        "title": "NewPermissionsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPermissionRequestSchema"
            },
            "description": "New Permissions"
          },
          "validateOnly": {
            "title": "Validate Only\n",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewPermissionsResponseDataSchema": {
        "title": "NewPermissionsResponseDataSchema",
        "required": [
          "validUserIds",
          "validGroupingIds",
          "validAssetIds",
          "validPrivilegeIds",
          "invalidUserIds",
          "invalidGroupingIds",
          "invalidAssetIds",
          "invalidPrivilegeIds"
        ],
        "type": "object",
        "properties": {
          "validUserIds": {
            "title": "Validuserids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** user ids."
          },
          "validGroupingIds": {
            "title": "Validgroupingids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** grouping ids."
          },
          "validAssetIds": {
            "title": "Validassetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** asset ids."
          },
          "validPrivilegeIds": {
            "title": "Validprivilegeids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** privilege ids."
          },
          "invalidUserIds": {
            "title": "Invaliduserids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** user ids."
          },
          "invalidGroupingIds": {
            "title": "Invalidgroupingids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** grouping ids."
          },
          "invalidAssetIds": {
            "title": "Invalidassetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** asset ids."
          },
          "invalidPrivilegeIds": {
            "title": "Invalidprivilegeids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** privilege ids."
          }
        },
        "description": "New permissions response data schema"
      },
      "NewPermissionsResponseSchema": {
        "title": "NewPermissionsResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewPermissionsResponseDataSchema"
              }
            ],
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New permissions response schema"
      },
      "NewPrivilegeGrantsRequestSchema": {
        "title": "NewPrivilegeGrantsRequestSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "ID of the source privilege. **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "ID of the granted privilege. **Mandatory**\n"
          }
        },
        "description": "New privilege grants request schema"
      },
      "NewPrivilegeGrantsResponseDataSchema": {
        "title": "NewPrivilegeGrantsResponseDataSchema",
        "required": [
          "validSourceIds",
          "validTargetIds",
          "invalidSourceIds",
          "invalidTargetIds"
        ],
        "type": "object",
        "properties": {
          "validSourceIds": {
            "title": "Validsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** source privilege ids."
          },
          "validTargetIds": {
            "title": "Validtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** target privilege ids."
          },
          "invalidSourceIds": {
            "title": "Invalidsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** source privilege ids."
          },
          "invalidTargetIds": {
            "title": "Invalidtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** target privilege ids."
          }
        },
        "description": "New privilege grants response data schema"
      },
      "NewPrivilegeGrantsResponseSchema": {
        "title": "NewPrivilegeGrantsResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewPrivilegeGrantsResponseDataSchema"
              }
            ],
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New privilege grants response schema"
      },
      "NewPrivilegeRequestSchema": {
        "title": "NewPrivilegeRequestSchema",
        "required": [
          "uniqueId",
          "type"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Privilege ID.\n\nIf not defined, set as originName. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The privilege ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PrivilegeType"
              }
            ],
            "description": "The \"canonical\" privilege types that are supported by Authomize off-the-shelf: **Mandatory**\n\nPermitted values: \n   •\t`Administrative`\n   •\t`Unknown`\n   •\t`Read`\n   •\t`ReadMetadata`\n   •\t`Write`\n   •\t`Create`\n   •\t`Delete`\n   •\t`Execute`\n   •\t`Enable`\n   •\t`Assign`\n   •\t`Restore`\n   •\t`Import`\n   •\t`Export`\n   •\t`Update`\n   •\t`Cancel`\n   •\t`Use`\n   •\t`Delegate`\n   •\t`Join`\n   •\t`Invite`\n   •\t`Share`\n\nIf the privilege type does not exist use `Unknown` or `Use`.\n"
          },
          "originName": {
            "title": "Originname",
            "type": "string",
            "description": "The privilege name in the source system."
          }
        },
        "description": "New privilege request schema"
      },
      "NewPrivilegesGrantsListRequestSchema": {
        "title": "NewPrivilegesGrantsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPrivilegeGrantsRequestSchema"
            },
            "description": "New Privileges Grants"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewPrivilegesListRequestSchema": {
        "title": "NewPrivilegesListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPrivilegeRequestSchema"
            },
            "description": "New Privileges"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewPrivilegesResponseSchema": {
        "title": "NewPrivilegesResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New privileges response schema"
      },
      "NewRestApiConnectorSchema": {
        "title": "NewRestApiConnectorSchema",
        "required": [
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "config": {
            "title": "Config",
            "type": "object"
          },
          "serviceId": {
            "title": "Serviceid",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "NewUserRequestSchema": {
        "title": "NewUserRequestSchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "User's Account ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The user ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username\n"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's email address."
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "User status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the user.\n"
          },
          "isExternal": {
            "title": "Isexternal",
            "type": "boolean",
            "description": "Account is external to Authomize.\nMust be either `true` or `false`.\n",
            "default": false
          },
          "hasMFA": {
            "title": "Hasmfa",
            "type": "boolean",
            "description": "Has Multi-Factor Authentication enabled.\nMust be either `true` or `false`.\n"
          },
          "lastLoginAt": {
            "title": "Lastloginat",
            "type": "string",
            "description": "The last login date in ISO 8601 format.\n",
            "format": "date-time"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "New user request schema"
      },
      "NewUserResponseSchema": {
        "title": "NewUserResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New users response schema"
      },
      "NewUsersListRequestSchema": {
        "title": "NewUsersListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewUserRequestSchema"
            },
            "description": "New Users"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "Pagination": {
        "title": "Pagination",
        "type": "object",
        "properties": {
          "limit": {
            "title": "Limit",
            "type": "integer",
            "default": -1
          },
          "skip": {
            "title": "Skip",
            "type": "integer",
            "default": 0
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "default": -1
          },
          "hasMore": {
            "title": "Hasmore",
            "type": "boolean"
          },
          "search_after": {
            "title": "Search After",
            "type": "array",
            "items": {}
          }
        },
        "description": "Base schema for pagination"
      },
      "PermissionSchema": {
        "title": "PermissionSchema",
        "required": [
          "sourceUniqueId",
          "sourceType",
          "privilegeId"
        ],
        "type": "object",
        "properties": {
          "sourceUniqueId": {
            "title": "Sourceuniqueid",
            "minLength": 1,
            "type": "string",
            "description": "The unique ID of the permission's source. Must be either `userId` or `groupingId`. **Mandatory**.\n"
          },
          "sourceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionSourceType"
              }
            ],
            "description": "The type of the permission's source. **Mandatory**.\n\nSet `sourceType` to either:\n\n- User `uniqueId`.\n- Grouping `uniqueId`."
          },
          "privilegeId": {
            "title": "Privilegeid",
            "minLength": 1,
            "type": "string",
            "description": "The ID of the privilege, allows access to assets. **Mandatory**.\n"
          },
          "assetId": {
            "title": "Assetid",
            "type": "string",
            "description": "The ID of the asset.\n\nWhen `null`, this is a global permission on the entire application (not just locally)."
          },
          "isRole": {
            "title": "Isrole",
            "type": "boolean",
            "description": "If `true`, the permissions represent the role in the source application.\nThe default is `false`.\n",
            "default": false
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags on access permissions.\n"
          },
          "escalationPathPossible": {
            "title": "Escalationpathpossible",
            "type": "boolean",
            "description": "If `true`, it's possible to perform a privilege escalation using the permission.   \nexample: User has Read access to a secret containing credentials of another user.  This allows \nprivilege escalation.\nopposite example: User has Read metadata permission to a secret containing credentials of another user. This *Does NOT* allows \nprivilege escalation.\n\n",
            "default": false
          }
        },
        "description": "Permission schema"
      },
      "PermissionSourceType": {
        "title": "PermissionSourceType",
        "enum": [
          "User",
          "Grouping"
        ],
        "description": "An enumeration."
      },
      "PrivilegeGrantSchema": {
        "title": "PrivilegeGrantSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "ID of the source privilege. **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "ID of the granted privilege. **Mandatory**\n"
          }
        },
        "description": "Privilege grant schema"
      },
      "PrivilegeSchema": {
        "title": "PrivilegeSchema",
        "required": [
          "uniqueId",
          "type"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Privilege ID.\n\nIf not defined, set as originName. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The privilege ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PrivilegeType"
              }
            ],
            "description": "The \"canonical\" privilege types that are supported by Authomize off-the-shelf: **Mandatory**\n\nPermitted values: \n   •\t`Administrative`\n   •\t`Unknown`\n   •\t`Read`\n   •\t`ReadMetadata`\n   •\t`Write`\n   •\t`Create`\n   •\t`Delete`\n   •\t`Execute`\n   •\t`Enable`\n   •\t`Assign`\n   •\t`Restore`\n   •\t`Import`\n   •\t`Export`\n   •\t`Update`\n   •\t`Cancel`\n   •\t`Use`\n   •\t`Delegate`\n   •\t`Join`\n   •\t`Invite`\n   •\t`Share`\n\nIf the privilege type does not exist use `Unknown` or `Use`.\n"
          },
          "originName": {
            "title": "Originname",
            "type": "string",
            "description": "The privilege name in the source system."
          }
        },
        "description": "Privilege schema"
      },
      "PrivilegeType": {
        "title": "PrivilegeType",
        "enum": [
          "Administrative",
          "Unknown",
          "Read",
          "ReadMetadata",
          "Write",
          "Create",
          "Delete",
          "Execute",
          "Enable",
          "Assign",
          "Restore",
          "Import",
          "Export",
          "Update",
          "Cancel",
          "Use",
          "Delegate",
          "Join",
          "Invite",
          "Share"
        ],
        "description": "An enumeration."
      },
      "RequestSubmitResponse": {
        "title": "RequestSubmitResponse",
        "required": [
          "requestId"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          }
        }
      },
      "RequestsBundleSchema": {
        "title": "RequestsBundleSchema",
        "type": "object",
        "properties": {
          "execution_id": {
            "title": "Execution Id",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "delete_app_data": {
            "title": "Delete App Data",
            "type": "boolean",
            "description": "The Delete Application Data API is used to delete app data by `{appId}`.",
            "default": false
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "format": "date-time"
          },
          "new_users": {
            "title": "New Users",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewUserRequestSchema"
            },
            "description": "The Create Users APIs sets up App users(by App ID)."
          },
          "new_groupings": {
            "title": "New Groupings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewGroupingRequestSchema"
            },
            "description": "The Create Groupings API is used to create groups that have access to a particular app."
          },
          "new_permissions": {
            "title": "New Permissions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPermissionRequestSchema"
            },
            "description": "The Create Permissions API is used to create a set of privileges, assigned to a specific target.\nA permission (also referred to as an \"entitlement\") is a set of privileges, assigned to a specific target. \nExamples include: file permissions, file shares, GCP entitlements, the actual policies assigning access to roles in AWS, and inline policies.\n"
          },
          "new_privileges": {
            "title": "New Privileges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPrivilegeRequestSchema"
            },
            "description": "The Create Privileges API is used to define privileges that can be associated with assets.\nFor example, Read privileges on a file.\nHere you can define the type of privileges and associate it to assets in the Permission API.\n"
          },
          "new_privileges_grants": {
            "title": "New Privileges Grants",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPrivilegeGrantsRequestSchema"
            },
            "description": "The Create Privileges Grants API enables you to establish inheritance between privileges, so that a single privilege contains a set of other privileges. \nFor example, an Administrative privilege that contains read and write privileges."
          },
          "new_accounts_association": {
            "title": "New Accounts Association",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAccountsAssociationRequestSchema"
            },
            "description": "The Create Accounts Association API creates account associations between user accounts and groups."
          },
          "new_groupings_association": {
            "title": "New Groupings Association",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewGroupingsAssociationRequestSchema"
            },
            "description": "The Create Groupings Association API creates associations between groups and other groups.\n"
          },
          "new_assets": {
            "title": "New Assets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAssetRequestSchema"
            },
            "description": "The Create Assets API creates assets (including asset data)."
          },
          "new_assets_inheritance": {
            "title": "New Assets Inheritance",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAssetInheritanceRequestSchema"
            },
            "description": "The Create Assets Inheritence API enables you to create a connection between different assets (for example, a folder that contains multiple files).\n"
          },
          "new_identities": {
            "title": "New Identities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewIdentityRequestSchema"
            },
            "description": "The Create Identities API is used to create identities. \nThe data of the identity from this API is considered \"the source of truth\" and overrides the identity data from other systems.\n"
          },
          "app": {
            "title": "App",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewAssetRequestSchema"
              }
            ],
            "description": "The Update Application Data API is used to update app data on `{appId}`.\n"
          }
        }
      },
      "RestApiConnectorListSchema": {
        "title": "RestApiConnectorListSchema",
        "required": [
          "pagination",
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestApiConnectorSchema"
            }
          }
        }
      },
      "RestApiConnectorSchema": {
        "title": "RestApiConnectorSchema",
        "required": [
          "id",
          "serviceType"
        ],
        "type": "object",
        "properties": {
          "config": {
            "title": "Config",
            "type": "object"
          },
          "serviceId": {
            "title": "Serviceid",
            "type": "string",
            "default": ""
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "format": "date-time"
          },
          "lastSyncedAt": {
            "title": "Lastsyncedat",
            "type": "string"
          },
          "lastError": {
            "title": "Lasterror",
            "type": "string"
          },
          "modifiedAt": {
            "title": "Modifiedat",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorStatus"
              }
            ],
            "default": "disabled"
          },
          "serviceType": {
            "title": "Servicetype",
            "type": "string"
          },
          "availableConnectorId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailableConnectorId"
              }
            ],
            "default": "restApiImport"
          },
          "actorType": {
            "title": "Actortype",
            "type": "string"
          },
          "actorId": {
            "title": "Actorid",
            "type": "string"
          }
        }
      },
      "SearchAccountsAssociationsListResponseSchema": {
        "title": "SearchAccountsAssociationsListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountsAssociationSchema"
            },
            "description": "Accounts Associations"
          }
        },
        "description": "Search accounts association response schema"
      },
      "SearchAssetsInheritanceListResponseSchema": {
        "title": "SearchAssetsInheritanceListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetInheritanceSchema"
            },
            "description": "Assets Inheritance"
          }
        },
        "description": "Search asset inheritance response schema"
      },
      "SearchAssetsListResponseSchema": {
        "title": "SearchAssetsListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetSchema"
            },
            "description": "Assets"
          }
        },
        "description": "Search asset response schema"
      },
      "SearchGroupingResponseSchema": {
        "title": "SearchGroupingResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupingSchema"
            },
            "description": "Groupings"
          }
        },
        "description": "Search grouping response schema"
      },
      "SearchGroupingsAssociationsListResponseSchema": {
        "title": "SearchGroupingsAssociationsListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupingsAssociationSchema"
            },
            "description": "Groupings Associations"
          }
        },
        "description": "Search groupings association response schema"
      },
      "SearchIdentitiesListResponseSchema": {
        "title": "SearchIdentitiesListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentitySchema"
            },
            "description": "Identities"
          }
        },
        "description": "Search identity response schema"
      },
      "SearchPermissionResponseSchema": {
        "title": "SearchPermissionResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionSchema"
            },
            "description": "Permissions"
          }
        },
        "description": "Search permission response schema"
      },
      "SearchPrivilegeGrantsListResponseSchema": {
        "title": "SearchPrivilegeGrantsListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivilegeGrantSchema"
            },
            "description": "Privilege Grants"
          }
        },
        "description": "Search privilege grant response schema"
      },
      "SearchPrivilegesListResponseSchema": {
        "title": "SearchPrivilegesListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivilegeSchema"
            },
            "description": "Privileges"
          }
        },
        "description": "Search privilege response schema"
      },
      "SearchUsersListResponseSchema": {
        "title": "SearchUsersListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSchema"
            },
            "description": "Users"
          }
        },
        "description": "Search user response schema"
      },
      "ServiceDescription": {
        "title": "ServiceDescription",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "icon": {
            "title": "Icon",
            "type": "string"
          }
        }
      },
      "SubmitResponse": {
        "title": "SubmitResponse",
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          }
        }
      },
      "TransactionPaginatedSearchSchema": {
        "title": "TransactionPaginatedSearchSchema",
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BundleTransactionSchema"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "TransactionStateType": {
        "title": "TransactionStateType",
        "enum": [
          "Applying",
          "Complete",
          "Failed",
          "Ingest",
          "IngestChunk",
          "PostProcess",
          "Queue"
        ],
        "description": "An enumeration."
      },
      "UpdateAppSchema": {
        "title": "UpdateAppSchema",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the Application.\n"
          },
          "logo_url_sync": {
            "title": "Logo Url Sync",
            "type": "boolean",
            "description": "Ensure that the Application logo is the same as in the integration."
          }
        }
      },
      "UpdateAssetRequestSchema": {
        "title": "UpdateAssetRequestSchema",
        "required": [
          "uniqueId",
          "name"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Asset ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The asset ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The name of the asset. The default is the Asset ID. **Mandatory**\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetType"
              }
            ],
            "description": "The asset types that are supported by Authomize **Mandatory**\n\nPermitted values:\n\n   •\t`Application` (federation) \n   •\t`Database`\n   •\t`Drive`\n   •\t`File`\n   •\t`Folder`\n   •\t`GitRepository`\n   •\t`Integration`\n   •\t`Project`\n   •\t`Site`\n   •\t`Table`\n   •\t`Ticket`\n   •\t`VirtualMachine`\n   •\t`Other`\n\nIf the asset type does not exist use `Other`.\n",
            "default": "Other"
          },
          "alternativeName": {
            "title": "Alternativename",
            "type": "string",
            "description": "Any alternative name for the resource, or any other representation of the resource, if it exists.\nThe default is `null`.\n"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The asset type in the source system.\nThe default is the canonical type (if not mentioned).\n"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "The date (in ISO 8601 format) that the asset was created.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "lastUsedAt": {
            "title": "Lastusedat",
            "type": "string",
            "description": "The date (in ISO 8601 format) of the last time that the asset was in use.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A description of the asset (up to 512 characters).\n"
          },
          "href": {
            "title": "Href",
            "type": "string",
            "description": "A link to the asset in the source system.\n"
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The owner ID"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags associated with the asset.\n"
          }
        },
        "description": "Update asset request schema"
      },
      "UpdateAssetsListRequestSchema": {
        "title": "UpdateAssetsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateAssetRequestSchema"
            },
            "description": "Update Assets"
          }
        },
        "description": "List request schema"
      },
      "UpdateGroupingsListRequestSchema": {
        "title": "UpdateGroupingsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateGroupingsRequestSchema"
            },
            "description": "List of update user requests.\n"
          }
        },
        "description": "List of update requests request schema"
      },
      "UpdateGroupingsRequestSchema": {
        "title": "UpdateGroupingsRequestSchema",
        "required": [
          "uniqueId",
          "name"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "\nGrouping ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The groupping ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The name of the grouping. The default is the ID field. **Mandatory**\n"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The name of the type of grouping in the source system. The default is `Group`. Example: Group/Alias/AWS Role\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupingType"
              }
            ],
            "description": "Allowed values are `Group` and `VirtualGroup`.\n\nThe default is `Group`.\n\n`VirtualGroup` are mapped to the Authomize access explorer graph and are not present in other places in the user interface nor are they counted as a group.\n",
            "default": "Group"
          },
          "isRole": {
            "title": "Isrole",
            "type": "boolean",
            "description": "If `Role`, the grouping represents a role in the source application and the name of the role is the grouping `name`.\n\nThe default is `False`.\n",
            "default": false
          },
          "anyoneCanJoinOrLeave": {
            "title": "Anyonecanjoinorleave",
            "type": "boolean",
            "description": "Must be either `ture` or `false`.\nWhen set to `true` users can give themselves membership in this grouping without the grouping's managers' or owners' permission. \nExamples include public groups (M365), Google Groups with specific flags, ...\nValid only when `groupingType = Group`\n",
            "default": false
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The uniqueId of the user who is the \"owner\" (or manager) of the group.\n"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags on the access grouping.\n"
          },
          "alternativeName": {
            "title": "Alternativename",
            "maxLength": 256,
            "type": "string",
            "description": "Alias of the grouping."
          }
        },
        "description": "New group request schema"
      },
      "UpdateGroupingsResponseSchema": {
        "title": "UpdateGroupingsResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "Update user response schema"
      },
      "UpdateIdentitiesListRequestSchema": {
        "title": "UpdateIdentitiesListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateIdentityRequestSchema"
            },
            "description": "List of update identity requests.\n"
          }
        },
        "description": "List of update requests request schema"
      },
      "UpdateIdentityRequestSchema": {
        "title": "UpdateIdentityRequestSchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Identity ID **Mandatory**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The identity ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's work email address.\n"
          },
          "personalEmail": {
            "title": "Personalemail",
            "type": "string",
            "description": "User's personal email address.\n"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "employeeNumber": {
            "title": "Employeenumber",
            "type": "string",
            "description": "Employee number"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "The user status must be one of the following: `Deleted`, `Disabled`, `Enabled`, `Staged` or `Suspended`.\n"
          },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Country"
          },
          "city": {
            "title": "City",
            "type": "string",
            "description": "City"
          },
          "department": {
            "title": "Department",
            "type": "string",
            "description": "The identity's department in the organization.\n"
          },
          "division": {
            "title": "Division",
            "type": "string",
            "description": "The identity's division in their organization.\n"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The user's job title.\n"
          },
          "managerId": {
            "title": "Managerid",
            "type": "string",
            "description": "The manager identity's ID.\n"
          },
          "hireAt": {
            "title": "Hireat",
            "type": "string",
            "description": "The user's first day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "terminationAt": {
            "title": "Terminationat",
            "type": "string",
            "description": "The user's last day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the identity.\n"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "New Identity request schema"
      },
      "UpdatePrivilegeRequestSchema": {
        "title": "UpdatePrivilegeRequestSchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Privilege ID.\n\nIf not defined, set as originName. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The privilege ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PrivilegeType"
              }
            ],
            "description": "The \"canonical\" privilege types that are supported by Authomize off-the-shelf: **Mandatory**\n\nPermitted values: \n   •\t`Administrative`\n   •\t`Unknown`\n   •\t`Read`\n   •\t`ReadMetadata`\n   •\t`Write`\n   •\t`Create`\n   •\t`Delete`\n   •\t`Execute`\n   •\t`Enable`\n   •\t`Assign`\n   •\t`Restore`\n   •\t`Import`\n   •\t`Export`\n   •\t`Update`\n   •\t`Cancel`\n   •\t`Use`\n   •\t`Delegate`\n   •\t`Join`\n   •\t`Invite`\n   •\t`Share`\n\nIf the privilege type does not exist use `Unknown` or `Use`.\n"
          },
          "originName": {
            "title": "Originname",
            "type": "string",
            "description": "The privilege name in the source system."
          }
        },
        "description": "New privilege request schema"
      },
      "UpdatePrivilegesListRequestSchema": {
        "title": "UpdatePrivilegesListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdatePrivilegeRequestSchema"
            },
            "description": "Update Privileges"
          }
        },
        "description": "List request schema"
      },
      "UpdateUserListRequestSchema": {
        "title": "UpdateUserListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "title": "Executionid",
            "type": "string",
            "description": "The `executionId` parameter can be used to allow an app to run as a set of multiple, different executions with different configurations.\n\nOnce the data was uploaded using a certain `executionId`, all other requests, referring to the same data using `GET`/`POST`/`PUT`/`DELETE`, should use the **same** `executionId`.\n\n**Warning**, this parameter is an advanced feature and should be used with caution.\n"
          },
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateUserRequestSchema"
            },
            "description": "List of update user requests.\n"
          }
        },
        "description": "List of update requests request schema"
      },
      "UpdateUserRequestSchema": {
        "title": "UpdateUserRequestSchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "User's Account ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The user ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username\n"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's email address."
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "User status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the user.\n"
          },
          "isExternal": {
            "title": "Isexternal",
            "type": "boolean",
            "description": "Account is external to Authomize.\nMust be either `true` or `false`.\n",
            "default": false
          },
          "hasMFA": {
            "title": "Hasmfa",
            "type": "boolean",
            "description": "Has Multi-Factor Authentication enabled.\nMust be either `true` or `false`.\n"
          },
          "lastLoginAt": {
            "title": "Lastloginat",
            "type": "string",
            "description": "The last login date in ISO 8601 format.\n",
            "format": "date-time"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "New user request schema"
      },
      "UserSchema": {
        "title": "UserSchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "User's Account ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The user ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username\n"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's email address."
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "User status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the user.\n"
          },
          "isExternal": {
            "title": "Isexternal",
            "type": "boolean",
            "description": "Account is external to Authomize.\nMust be either `true` or `false`.\n",
            "default": false
          },
          "hasMFA": {
            "title": "Hasmfa",
            "type": "boolean",
            "description": "Has Multi-Factor Authentication enabled.\nMust be either `true` or `false`.\n"
          },
          "lastLoginAt": {
            "title": "Lastloginat",
            "type": "string",
            "description": "The last login date in ISO 8601 format.\n",
            "format": "date-time"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "User schema"
      },
      "UserStatus": {
        "title": "UserStatus",
        "enum": [
          "Staged",
          "Enabled",
          "Disabled",
          "Suspended",
          "Deleted",
          "Unknown"
        ],
        "description": "An enumeration."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  },
  "tags": [
    {
      "name": "Status",
      "description": "The status of the API.\n"
    },
    {
      "name": "Apps",
      "description": "The Apps APIs are used for application level actions such as geting file templates and deleting application data.\n"
    },
    {
      "name": "Accounts",
      "description": "Each account is associated with a specific application.\nAccount APIs are used to find, create and edit account data.\n"
    },
    {
      "name": "Access",
      "description": "Access is a way to relate between accounts, roles and assets.\nAccess APIs can be used to get a list of groups (including the users in each group), to create groups and to edit groups."
    },
    {
      "name": "Privileges",
      "description": "The Privileges APIs are used to get, create and edit privileges that enable access to assets."
    },
    {
      "name": "Association",
      "description": "Association APIs can be used to search and create account associations and group associations. "
    },
    {
      "name": "Assets",
      "description": "The Assets API is used to get, create and edit assets (files, folders, drives, applications ...)."
    },
    {
      "name": "Identities",
      "description": "The Identities APIs are used for getting, creating and editing Identities."
    },
    {
      "name": "v1",
      "description": "v1 routes"
    },
    {
      "name": "extended_schemas",
      "description": "Extended schemas"
    }
  ]
}
