{
  "openapi": "3.0.2",
  "info": {
    "title": "Authomize API Reference",
    "description": "Authomize enables users to integrate your applications with Authomize via custom connectors.\n\nYou can use the APIs described in this document to create your connector.\n\nOnce data is uploaded and processed successfully, your custom connector will function in the same way as the connectors created by Authomize.\n\n## How does Authomize work?\nAuthomize works by gathering information about:\n\n· individuals, teams and functions.\n\n· apps, assets and accounts.\n\n· all the relationships between them.\n\n![img.png](https://storagetry1.blob.core.windows.net/public/78d82650-71b0-4909-8444-022aab79add5.png)\n\n## Connector APIs\n\nAuthomize connector APIs enable pushing data into Authomize from external sources.\n\nThese APIs enable data extracted from outside applications (via application APIs) to be delivered to Authomize.\n\nA connector processes extracted application data to transform it into a format compatible with Authomize.\n\n![img_1.png](https://storagetry1.blob.core.windows.net/public/341bf6ef-2e5b-4284-b715-45105ffbf0f8.png)\n\n## Authentication\nTo Authenticate use the API Token, with the format: `Authorization: API_Token`.\n\nAn API Token is a token you provide when making API calls. \n\n\nThe API Token should be included in every request to the API in an `Authorization` header.\n```\ncurl -v -X POST \\n\n     -H \"Authorization: {API_Token}\" \\n\n     ...\n```\n\n## Limits\nRequests cannot exceed a size of 1MB.\n",
    "version": "3.1.5",
    "x-logo": {
      "url": "https://static.authomize.com/public/icons/authomize-green.svg"
    }
  },
  "paths": {
    "/v2/apps/files/template": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Get File Template",
        "description": "Download template file for file-provider based on REST API schema",
        "operationId": "get_file_template_v2_apps_files_template_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v2/apps/{appId}/data": {
      "delete": {
        "tags": [
          "Apps"
        ],
        "summary": "Delete Application Data",
        "description": "The Delete Application Data API is used to delete app data by `{appId}`.",
        "operationId": "delete_application_data_v2_apps__appId__data_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Delete all the app data lastly updated before the given date.",
            "required": false,
            "schema": {
              "title": "Modifiedbefore",
              "type": "string",
              "description": "Delete all the app data lastly updated before the given date.",
              "format": "date-time"
            },
            "example": "2023-04-19T20:35:22.312798+00:00",
            "name": "modifiedBefore",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestSubmitResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/accounts/users": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Search Users",
        "description": "The Search Users APIs lists users of an App (by App ID).",
        "operationId": "search_users_v2_apps__appId__accounts_users_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchUsersListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create Users",
        "description": "The Create Users APIs sets up App users(by App ID).",
        "operationId": "create_users_v2_apps__appId__accounts_users_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUsersListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewUserResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Accounts"
        ],
        "summary": "Patch Users",
        "description": "The Patch Users API is used to edit user data.\nWhen editing user data, any combination of fields can be updated at a time.\nThe uniqueId is required and can't be changed.\nOnly the fields that are supplied will be affected by the PATCH request (others will be unchanged).\n",
        "operationId": "patch_users_v2_apps__appId__accounts_users_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewUserResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/access/grouping": {
      "get": {
        "tags": [
          "Access"
        ],
        "summary": "Search Groupings",
        "description": "The Search Grouping API is used to get a list of groups that have access to a particular app.",
        "operationId": "search_groupings_v2_apps__appId__access_grouping_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchGroupingResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Access"
        ],
        "summary": "Create Groupings",
        "description": "The Create Groupings API is used to create groups that have access to a particular app.",
        "operationId": "create_groupings_v2_apps__appId__access_grouping_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewGroupingsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewGroupingResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Access"
        ],
        "summary": "Patch Groupings",
        "description": "The Patch Groupings API is used to edit grouping data. \nWhen editing grouping data, any combination of fields can be updated at a time. \nThe uniqueId is required and can't be changed. \nOnly the fields that are supplied will be affected by the PATCH request (others will be unchanged). ",
        "operationId": "patch_groupings_v2_apps__appId__access_grouping_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroupingsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateGroupingsResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/access/permissions": {
      "get": {
        "tags": [
          "Access"
        ],
        "summary": "Search Permissions",
        "description": "The Search Permissions API is used to list the privileges, assigned to a specific target.\nA permission (also referred to as an “entitlement”) is a set of privileges, assigned to a specific target. \nExamples include: file permissions, file shares, GCP entitlements, the actual policies assigning access to roles in AWS, and inline policies. ",
        "operationId": "search_permissions_v2_apps__appId__access_permissions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchPermissionResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Access"
        ],
        "summary": "Create Permissions",
        "description": "The Create Permissions API is used to create a set of privileges, assigned to a specific target.\nA permission (also referred to as an “entitlement”) is a set of privileges, assigned to a specific target. \nExamples include: file permissions, file shares, GCP entitlements, the actual policies assigning access to roles in AWS, and inline policies.",
        "operationId": "create_permissions_v2_apps__appId__access_permissions_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPermissionsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewPermissionsResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/privileges": {
      "get": {
        "tags": [
          "Privileges"
        ],
        "summary": "Search Privileges",
        "description": "The Search Privileges API gets all the privileges from a particular date until now. ",
        "operationId": "search_privileges_v2_apps__appId__privileges_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchPrivilegesListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Privileges"
        ],
        "summary": "Create Privileges",
        "description": "The Create Privileges API is used to define privileges that can be associated with assets.\nFor example, Read privileges on a file.\nHere you can define the type of privileges and associate it to assets in the Permission API.\n",
        "operationId": "create_privileges_v2_apps__appId__privileges_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPrivilegesListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewPrivilegesResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Privileges"
        ],
        "summary": "Patch Privileges",
        "description": "Patch Privileges API is used to update privilege data.\nWhen editing privilege data, any combination of fields can be updated at a time.\nA uniqueId is required and can't be changed.\nOnly the fields that are supplied will be affected by the PATCH request (others will be unchanged).",
        "operationId": "patch_privileges_v2_apps__appId__privileges_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePrivilegesListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewPrivilegesResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/privileges/grants": {
      "get": {
        "tags": [
          "Privileges"
        ],
        "summary": "Search Privileges Grants",
        "description": "The Search Privileges Grants API lists the privileges granted (for example: admin privileges can read, write, view).",
        "operationId": "search_privileges_grants_v2_apps__appId__privileges_grants_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchPrivilegeGrantsListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Privileges"
        ],
        "summary": "Create Privileges Grants",
        "description": "The Create Privileges Grants API enables you to establish inheritance between privileges, so that a single privilege contains a set of other privileges. \nFor example, an Administrative privilege that contains read and write privileges.",
        "operationId": "create_privileges_grants_v2_apps__appId__privileges_grants_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPrivilegesGrantsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewPrivilegeGrantsResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/association/accounts": {
      "get": {
        "tags": [
          "Association"
        ],
        "summary": "Search Accounts Association",
        "description": "The Search Accounts Association API gets a list of account associations between user accounts and groups.",
        "operationId": "search_accounts_association_v2_apps__appId__association_accounts_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchAccountsAssociationsListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Association"
        ],
        "summary": "Create Accounts Association",
        "description": "The Create Accounts Association API creates account associations between user accounts and groups.",
        "operationId": "create_accounts_association_v2_apps__appId__association_accounts_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountsAssociationsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAccountsAssociationResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/association/groupings": {
      "get": {
        "tags": [
          "Association"
        ],
        "summary": "Search Groupings Association",
        "description": "The Search Groupings Association API gets a list of associations between groups and other groups.",
        "operationId": "search_groupings_association_v2_apps__appId__association_groupings_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchGroupingsAssociationsListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Association"
        ],
        "summary": "Create Groupings Association",
        "description": "The Create Groupings Association API creates associations between groups and other groups.\n",
        "operationId": "create_groupings_association_v2_apps__appId__association_groupings_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewGroupingsAssociationsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewGroupingsAssociationResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Search Assets",
        "description": "The Search Assets API gets a list of all assets (including asset data).",
        "operationId": "search_assets_v2_apps__appId__assets_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchAssetsListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Create Assets",
        "description": "The Create Assets API creates assets (including asset data).",
        "operationId": "create_assets_v2_apps__appId__assets_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAssetsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAssetsResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Assets"
        ],
        "summary": "Patch Assets",
        "description": "The Patch Assets API is used to edit assets (including asset data).\nWhen editing asset data, any combination of fields can be updated at a time.\nThe uniqueId is required and can't be changed.\nOnly the fields that are supplied are affected by the PATCH request (others are unchanged).\n",
        "operationId": "patch_assets_v2_apps__appId__assets_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetsListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAssetsResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/assets/inheritance": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Search Assets Inheritance",
        "description": "The Search Assets Inheritance API gets all the assets related to the source asset (for examples, all files in a folder).",
        "operationId": "search_assets_inheritance_v2_apps__appId__assets_inheritance_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchAssetsInheritanceListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Create Assets Inheritance",
        "description": "The Create Assets Inheritence API enables you to create a connection between different assets (for example, a folder that contains multiple files).\n",
        "operationId": "create_assets_inheritance_v2_apps__appId__assets_inheritance_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAssetsInheritanceListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAssetsInheritanceResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/apps/{appId}/identities": {
      "get": {
        "tags": [
          "Identities"
        ],
        "summary": "Search Identities",
        "description": "The Search Identities API gets all identities and their data.",
        "operationId": "search_identities_v2_apps__appId__identities_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          },
          {
            "description": "Everything from this date and forward.",
            "required": false,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "Everything from this date and forward.",
              "format": "date-time"
            },
            "name": "startDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchIdentitiesListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Identities"
        ],
        "summary": "Create Identities",
        "description": "The Create Identities API is used to create identities. \nThe data of the identity from this API is considered \"the source of truth\" and overrides the identity data from other systems.\n",
        "operationId": "create_identities_v2_apps__appId__identities_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewIdentitiesListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewIdentityResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Identities"
        ],
        "summary": "Patch Identities",
        "description": "The Patch Identities API is used to edit identity data.\nWhen editing identity data, any combination of fields can be updated at a time.\nThe uniqueId is required and can't be changed.\nOnly the fields that are supplied will be affected by the PATCH request (others will be unchanged).\n",
        "operationId": "patch_identities_v2_apps__appId__identities_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Appid",
              "type": "string"
            },
            "name": "appId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIdentitiesListRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewIdentityResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/customers-service/{customer_name}/distinct-identities/base-merge-rules": {
      "post": {
        "summary": "Create Base Merge Rule",
        "operationId": "create_base_merge_rule_customers_service__customer_name__distinct_identities_base_merge_rules_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Customer Name",
              "type": "string"
            },
            "name": "customer_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseMergeRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers-service/{customer_name}/distinct-identities/distinct-merge-rules": {
      "post": {
        "summary": "Create Distinct Merge Rule",
        "operationId": "create_distinct_merge_rule_customers_service__customer_name__distinct_identities_distinct_merge_rules_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Customer Name",
              "type": "string"
            },
            "name": "customer_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DistinctMergeRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers-service/{customer_name}/distinct-identities/split-rules": {
      "post": {
        "summary": "Create Split Rule",
        "operationId": "create_split_rule_customers_service__customer_name__distinct_identities_split_rules_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Customer Name",
              "type": "string"
            },
            "name": "customer_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers-service/{customer_name}/distinct-identities/run-tags-workflow": {
      "post": {
        "summary": "Run Unify Identities Tags",
        "operationId": "run_unify_identities_tags_customers_service__customer_name__distinct_identities_run_tags_workflow_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Customer Name"
            },
            "name": "customer_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Run Unify Identities Tags Customers Service  Customer Name  Distinct Identities Run Tags Workflow Post",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers-service/{customer_name}/settings/identity-unification": {
      "get": {
        "summary": "Get Identity Unification Settings",
        "description": "Get identity_unification settings",
        "operationId": "get_identity_unification_settings_customers_service__customer_name__settings_identity_unification_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Customer Name",
              "type": "string"
            },
            "name": "customer_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalSettingListSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Identity Unification Settings",
        "description": "Create or update identity_unification settings",
        "operationId": "create_identity_unification_settings_customers_service__customer_name__settings_identity_unification_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Customer Name",
              "type": "string"
            },
            "name": "customer_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewIdentityUnificationSettingsSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalSettingListSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Partially Update Identity Unification Settings",
        "description": "Partially update identity_unification settings",
        "operationId": "partially_update_identity_unification_settings_customers_service__customer_name__settings_identity_unification_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Customer Name",
              "type": "string"
            },
            "name": "customer_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityUnificationSettingsSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalSettingListSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers-service/{customer_name}/migrations/migrate-file-provider": {
      "post": {
        "summary": "Migrate File Provider Start",
        "operationId": "migrate_file_provider_start_customers_service__customer_name__migrations_migrate_file_provider_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Customer Name",
              "type": "string"
            },
            "name": "customer_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Yes",
              "type": "string"
            },
            "name": "yes",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/is_alive": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Is Alive",
        "description": "Service status.",
        "operationId": "is_alive_is_alive_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authomize__connectors_rest_api__app__routes_schema__status_schema__IsAliveResponse"
                }
              }
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Me",
        "description": "API status.",
        "operationId": "me_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authomize__connectors_rest_api__app__routes_schema__status_schema__MeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/incidents/{incident_id}": {
      "get": {
        "tags": [
          "Incident"
        ],
        "summary": "Retrieve Incident",
        "description": "The Retrieve Incident API fetches a particular incident and all its details.",
        "operationId": "retrieve_incident_v2_incidents__incident_id__get",
        "parameters": [
          {
            "description": "Unique id",
            "required": true,
            "schema": {
              "title": "Incident Id",
              "type": "string",
              "description": "Unique id"
            },
            "name": "incident_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IncidentExpansion"
              }
            },
            "name": "expand",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonPaginatedResponseSchema_IncidentSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Incident"
        ],
        "summary": "Patch Incident",
        "description": "The Patch Incident API updates an existing incident (based on incident ID).",
        "operationId": "patch_incident_v2_incidents__incident_id__patch",
        "parameters": [
          {
            "description": "Unique id of the incident.",
            "required": true,
            "schema": {
              "title": "Incident Id",
              "type": "string",
              "description": "Unique id of the incident."
            },
            "name": "incident_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIncidentRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonPaginatedResponseSchema_IncidentSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/incidents/search": {
      "post": {
        "tags": [
          "Incident"
        ],
        "summary": "Search Incidents",
        "description": "The Search Incidents API lists incidents and related data.",
        "operationId": "search_incidents_v2_incidents_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchIncidentsRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseSchema_IncidentSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/incidents/{incident_id}/comments": {
      "post": {
        "tags": [
          "Incident"
        ],
        "summary": "Post Incident Comment",
        "description": "The Post Incident Comment API adds a comment to a particular incident (based on incident ID).",
        "operationId": "post_incident_comment_v2_incidents__incident_id__comments_post",
        "parameters": [
          {
            "description": "Unique id of comment.",
            "required": true,
            "schema": {
              "title": "Incident Id",
              "type": "string",
              "description": "Unique id of comment."
            },
            "name": "incident_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddIncidentCommentRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonPaginatedResponseSchema_CommentSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/campaigns/{campaign_id}": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Retrieve Campaign",
        "description": "After a campaign is created it can go through several stages:\n\"draft\", \"initialization\", \"running\", \"completed\", \"failed\", \"empty\" and \"overdue\"\n\nUsing the Retrieve Campaign API you can get details about the campaign (such as its status, the date the campaign was launched, the campaign owner and more) based on the unique campaign id.",
        "operationId": "retrieve_campaign_v2_campaigns__campaign_id__get",
        "parameters": [
          {
            "description": "Unique ID",
            "required": true,
            "schema": {
              "title": "Campaign Id",
              "type": "string",
              "description": "Unique ID"
            },
            "name": "campaign_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CampaignExpansion"
              }
            },
            "name": "expand",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonPaginatedResponseSchema_CampaignSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/campaigns/search": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Search Campaigns",
        "description": "The Search Campaigns API is used to retrieve a list of all campaigns. \nYou can filter the campaign list by status.\n",
        "operationId": "search_campaigns_v2_campaigns_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCampaignsRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseSchema_CampaignSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/campaigns/{campaign_id}/reviewers/{reviewer_id}": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Retrieve Campaign Reviewer",
        "description": "The Retrieve Campaign Reviewer API is used to retrieve campaign data about a specific campaign and reviewer.",
        "operationId": "retrieve_campaign_reviewer_v2_campaigns__campaign_id__reviewers__reviewer_id__get",
        "parameters": [
          {
            "description": "Unique ID of the Campaign",
            "required": true,
            "schema": {
              "title": "Campaign Id",
              "type": "string",
              "description": "Unique ID of the Campaign"
            },
            "name": "campaign_id",
            "in": "path"
          },
          {
            "description": "Unique ID of the Reviewer",
            "required": true,
            "schema": {
              "title": "Reviewer Id",
              "type": "string",
              "description": "Unique ID of the Reviewer"
            },
            "name": "reviewer_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReviewerExpansion"
              }
            },
            "name": "expand",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonPaginatedResponseSchema_ReviewerSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/campaigns/{campaign_id}/permissions/search": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Search Campaign Permissions",
        "description": "The Search Campaign Permissions API gets the permissions (keep or revoke) associated with a specific campaign.\n",
        "operationId": "search_campaign_permissions_v2_campaigns__campaign_id__permissions_search_post",
        "parameters": [
          {
            "description": "Unique ID of the Campaign",
            "required": true,
            "schema": {
              "title": "Campaign Id",
              "type": "string",
              "description": "Unique ID of the Campaign"
            },
            "name": "campaign_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCampaignPermissionsRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseSchema_CampaignsPermissionSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/inventory/identities/search": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Search Identities",
        "description": "Search Identities",
        "operationId": "search_identities_v2_inventory_identities_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchIdentitiesRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseSchema_IdentitySchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/inventory/assets/search": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Search Assets",
        "description": "Search Assets",
        "operationId": "search_assets_v2_inventory_assets_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchAssetsRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseSchema_AssetSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    },
    "/v2/inventory/accounts/search": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Search Accounts",
        "description": "Search Accounts",
        "operationId": "search_accounts_v2_inventory_accounts_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchAccountsRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseSchema_AccountSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "RestAPIKeyHeader": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccessDescription": {
        "title": "AccessDescription",
        "required": [
          "fromIdentityId",
          "accessType"
        ],
        "type": "object",
        "properties": {
          "fromIdentityId": {
            "title": "Fromidentityid",
            "type": "string"
          },
          "toAssetId": {
            "title": "Toassetid",
            "type": "string"
          },
          "accessType": {
            "$ref": "#/components/schemas/AccessTypes"
          },
          "accessName": {
            "title": "Accessname",
            "type": "string"
          }
        }
      },
      "AccessTypes": {
        "title": "AccessTypes",
        "enum": [
          "Unknown",
          "All",
          "Owner",
          "Login",
          "Read",
          "ReadMetadata",
          "Write",
          "Create",
          "Delete",
          "Execute",
          "Enable",
          "Assign",
          "Restore",
          "Import",
          "Export",
          "Get",
          "Set",
          "Update",
          "Cancel",
          "Use",
          "AllowUse",
          "List",
          "Administrative",
          "Delegate",
          "Join",
          "Invite",
          "Leave",
          "Share"
        ],
        "description": "An enumeration."
      },
      "AccountsAssociationSchema": {
        "title": "AccountsAssociationSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "Source account ID **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "Target grouping ID to associate with  **Mandatory**.\n"
          }
        },
        "description": "Accounts association schema"
      },
      "ActorType": {
        "title": "ActorType",
        "enum": [
          "Authomize",
          "User"
        ],
        "description": "Enum of actor type"
      },
      "AllSchemasResponseSchema": {
        "title": "AllSchemasResponseSchema",
        "type": "object",
        "properties": {
          "v1_bundle_schema": {
            "$ref": "#/components/schemas/ItemsBundleSchema"
          },
          "v2_bundle_schema": {
            "$ref": "#/components/schemas/RequestsBundleSchema"
          },
          "v2_data_only_schema": {
            "$ref": "#/components/schemas/IngestionDataBundleSchema"
          }
        }
      },
      "AssetDescription": {
        "title": "AssetDescription",
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AssetTypes"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "logoUrl": {
            "title": "Logourl",
            "type": "string"
          },
          "href": {
            "title": "Href",
            "type": "string"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "format": "date-time"
          },
          "isAuxiliary": {
            "title": "Isauxiliary",
            "type": "boolean"
          },
          "service": {
            "title": "Service",
            "type": "string"
          },
          "isFederated": {
            "title": "Isfederated",
            "type": "boolean"
          }
        }
      },
      "AssetInheritanceSchema": {
        "title": "AssetInheritanceSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "ID of the source asset. **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "The ID of the iherited asset (or assets). **Mandatory**\n"
          }
        },
        "description": "Asset inheritance schema"
      },
      "AssetSchema": {
        "title": "AssetSchema",
        "required": [
          "uniqueId",
          "name"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Asset ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The asset ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The name of the asset. The default is the Asset ID. **Mandatory**\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetType"
              }
            ],
            "description": "The asset types that are supported by Authomize **Mandatory**\n\nPermitted values:\n\n   •\t`Application` (federation) \n   •\t`Database`\n   •\t`Drive`\n   •\t`File`\n   •\t`Folder`\n   •\t`GitRepository`\n   •\t`Integration`\n   •\t`Project`\n   •\t`Site`\n   •\t`Table`\n   •\t`Ticket`\n   •\t`VirtualMachine`\n   •\t`Other`\n\nIf the asset type does not exist use `Other`.\n",
            "default": "Other"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The asset type in the source system.\nThe default is the canonical type (if not mentioned).\n"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "The date (in ISO 8601 format) that the asset was created.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "lastUsedAt": {
            "title": "Lastusedat",
            "type": "string",
            "description": "The date (in ISO 8601 format) of the last time that the asset was in use.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A description of the asset (up to 512 characters).\n"
          },
          "href": {
            "title": "Href",
            "type": "string",
            "description": "A link to the asset in the source system.\n"
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The owner ID"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags associated with the asset.\n"
          }
        },
        "description": "Asset schema"
      },
      "AssetType": {
        "title": "AssetType",
        "enum": [
          "Application",
          "Database",
          "Drive",
          "File",
          "Folder",
          "GitRepository",
          "Integration",
          "Project",
          "Site",
          "Table",
          "Ticket",
          "VirtualMachine",
          "Secret",
          "Other"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AssetTypes": {
        "title": "AssetTypes",
        "enum": [
          "Resource",
          "File",
          "Folder",
          "Drive",
          "Site",
          "Application",
          "Integration",
          "Package",
          "Project",
          "Cluster",
          "Dataset",
          "Subscription",
          "Table",
          "TableRecord",
          "Disk",
          "Image",
          "Instance",
          "Snapshot",
          "Service",
          "Topic",
          "Bucket",
          "BillingAccount",
          "Device",
          "Calendar",
          "Policy",
          "GitRepository",
          "Network",
          "Vpc",
          "NetworkInterface",
          "VirtualMachine",
          "NetworkSecurityGroup",
          "Ticket",
          "NetworkSubnet",
          "NetworkAcl",
          "RouteTable",
          "NetworkAddress",
          "Secret",
          "Storage",
          "Workspace",
          "SharedLink",
          "Collection",
          "Database",
          "ServerlessFunction",
          "ServerlessApplication",
          "Gateway",
          "ImageRepository",
          "Resource_BusinessAccount",
          "LoadBalancer",
          "Listener"
        ],
        "description": "An enumeration."
      },
      "AssetsInheritance": {
        "title": "AssetsInheritance",
        "required": [
          "fromId",
          "toId"
        ],
        "type": "object",
        "properties": {
          "fromId": {
            "title": "Fromid",
            "type": "string"
          },
          "toId": {
            "title": "Toid",
            "type": "string"
          }
        }
      },
      "AvailableConnectorId": {
        "title": "AvailableConnectorId",
        "enum": [
          "restApiImport"
        ],
        "description": "An enumeration."
      },
      "BaseMergeRuleRequest": {
        "title": "BaseMergeRuleRequest",
        "required": [
          "baseIdentityIds",
          "actorId",
          "actorType"
        ],
        "type": "object",
        "properties": {
          "baseIdentityIds": {
            "title": "Baseidentityids",
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "actorId": {
            "title": "Actorid",
            "type": "string"
          },
          "actorType": {
            "$ref": "#/components/schemas/ActorType"
          }
        }
      },
      "BundleTransactionSchema": {
        "title": "BundleTransactionSchema",
        "required": [
          "connectorId",
          "id",
          "state"
        ],
        "type": "object",
        "properties": {
          "connectorId": {
            "title": "Connectorid",
            "type": "string"
          },
          "transactionCreatedAt": {
            "title": "Transactioncreatedat",
            "type": "string",
            "format": "date-time"
          },
          "warnings": {
            "title": "Warnings",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "validations": {
            "title": "Validations",
            "type": "object"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/TransactionStateType"
          }
        },
        "description": "API response schema"
      },
      "ConnectorStatus": {
        "title": "ConnectorStatus",
        "enum": [
          "initializing",
          "validating",
          "failure",
          "enabled",
          "installable",
          "archived",
          "disabled",
          "deleted"
        ],
        "description": "An enumeration."
      },
      "DistinctMergeRuleRequest": {
        "title": "DistinctMergeRuleRequest",
        "required": [
          "distinctIdentityIds",
          "actorId",
          "actorType"
        ],
        "type": "object",
        "properties": {
          "distinctIdentityIds": {
            "title": "Distinctidentityids",
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "actorId": {
            "title": "Actorid",
            "type": "string"
          },
          "actorType": {
            "$ref": "#/components/schemas/ActorType"
          }
        }
      },
      "ExportResponse": {
        "title": "ExportResponse",
        "required": [
          "exportId",
          "exportUrl"
        ],
        "type": "object",
        "properties": {
          "exportId": {
            "title": "Exportid",
            "type": "string"
          },
          "exportUrl": {
            "title": "Exporturl",
            "type": "string"
          }
        }
      },
      "GroupingSchema": {
        "title": "GroupingSchema",
        "required": [
          "uniqueId",
          "name"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "\nGrouping ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The groupping ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The name of the grouping. The default is the ID field. **Mandatory**\n"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The name of the type of grouping in the source system. The default is `Group`. Example: Group/Alias/AWS Role\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupingType"
              }
            ],
            "description": "Allowed values are `Group` and `VirtualGroup`.\n\nThe default is `Group`.\n\n`VirtualGroup` are mapped to the Authomize access explorer graph and are not present in other places in the user interface nor are they counted as a group.\n",
            "default": "Group"
          },
          "isRole": {
            "title": "Isrole",
            "type": "boolean",
            "description": "If `Role`, the grouping represents a role in the source application and the name of the role is the grouping `name`.\n\nThe default is `False`.\n",
            "default": false
          },
          "anyoneCanJoinOrLeave": {
            "title": "Anyonecanjoinorleave",
            "type": "boolean",
            "description": "Must be either `ture` or `false`.\nWhen set to `true` users can give themselves membership in this grouping without the grouping's managers' or owners' permission. \nExamples include public groups (M365), Google Groups with specific flags, ...\nValid only when `groupingType = Group`\n",
            "default": false
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The owner ID"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags on the access grouping.\n"
          }
        },
        "description": "Grouping schema"
      },
      "GroupingType": {
        "title": "GroupingType",
        "enum": [
          "Group",
          "VirtualGroup"
        ],
        "description": "An enumeration."
      },
      "GroupingsAssociationSchema": {
        "title": "GroupingsAssociationSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "Grouping source ID **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "Grouping Target ID  **Mandatory**. The grouping to associate with.\n"
          }
        },
        "description": "Groupings association schema"
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "IdentitiesInheritance": {
        "title": "IdentitiesInheritance",
        "required": [
          "fromId",
          "toId"
        ],
        "type": "object",
        "properties": {
          "fromId": {
            "title": "Fromid",
            "type": "string"
          },
          "toId": {
            "title": "Toid",
            "type": "string"
          }
        }
      },
      "IdentityDescription": {
        "title": "IdentityDescription",
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IdentityTypes"
          },
          "userType": {
            "title": "Usertype",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "manager": {
            "title": "Manager",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "department": {
            "title": "Department",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "href": {
            "title": "Href",
            "type": "string"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "format": "date-time"
          },
          "terminationDate": {
            "title": "Terminationdate",
            "type": "string",
            "format": "date-time"
          },
          "isExternal": {
            "title": "Isexternal",
            "type": "boolean"
          },
          "isAuxiliary": {
            "title": "Isauxiliary",
            "type": "boolean"
          },
          "hasTwoFactorAuthenticationEnabled": {
            "title": "Hastwofactorauthenticationenabled",
            "type": "boolean"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string"
          },
          "userName": {
            "title": "Username",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "service": {
            "title": "Service",
            "type": "string"
          },
          "lastLoginAt": {
            "title": "Lastloginat",
            "type": "string",
            "format": "date-time"
          },
          "anyoneCanJoinOrLeave": {
            "title": "Anyonecanjoinorleave",
            "type": "boolean"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "city": {
            "title": "City",
            "type": "string"
          },
          "country": {
            "title": "Country",
            "type": "string"
          },
          "division": {
            "title": "Division",
            "type": "string"
          },
          "employeeNumber": {
            "title": "Employeenumber",
            "type": "string"
          },
          "personalEmail": {
            "title": "Personalemail",
            "type": "string"
          },
          "hireDate": {
            "title": "Hiredate",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IdentitySchema": {
        "title": "IdentitySchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Identity ID **Mandatory**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The identity ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's work email address.\n"
          },
          "personalEmail": {
            "title": "Personalemail",
            "type": "string",
            "description": "User's personal email address.\n"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "employeeNumber": {
            "title": "Employeenumber",
            "type": "string",
            "description": "Employee number"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "The user status must be one of the following: `Deleted`, `Disabled`, `Enabled`, `Staged` or `Suspended`.\n"
          },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Country"
          },
          "city": {
            "title": "City",
            "type": "string",
            "description": "City"
          },
          "department": {
            "title": "Department",
            "type": "string",
            "description": "The identity's department in the organization.\n"
          },
          "division": {
            "title": "Division",
            "type": "string",
            "description": "The identity's division in their organization.\n"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The user's job title.\n"
          },
          "managerId": {
            "title": "Managerid",
            "type": "string",
            "description": "The manager identity's ID.\n"
          },
          "hireAt": {
            "title": "Hireat",
            "type": "string",
            "description": "The user's first day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "terminationAt": {
            "title": "Terminationat",
            "type": "string",
            "description": "The user's last day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the identity.\n"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "Identity schema"
      },
      "IdentityTypes": {
        "title": "IdentityTypes",
        "enum": [
          "Identity",
          "Person",
          "User",
          "Group",
          "EntitlementProxy",
          "AccessKey",
          "ServiceAccount",
          "Alias",
          "Domain",
          "Organization",
          "TaskPerformer",
          "BusinessAccount"
        ],
        "description": "An enumeration."
      },
      "IdentityUnificationSettingsSchema": {
        "title": "IdentityUnificationSettingsSchema",
        "type": "object",
        "properties": {
          "actorId": {
            "title": "Actorid",
            "type": "string"
          },
          "actorType": {
            "$ref": "#/components/schemas/ActorType"
          },
          "mergeInternalAndExternalAccounts": {
            "title": "Mergeinternalandexternalaccounts",
            "type": "boolean"
          },
          "shouldMergeIdentitiesBySameEmail": {
            "title": "Shouldmergeidentitiesbysameemail",
            "type": "boolean"
          },
          "shouldMergeIdentitiesBySameFirstNameAndLastName": {
            "title": "Shouldmergeidentitiesbysamefirstnameandlastname",
            "type": "boolean"
          },
          "shouldMergeIdentitiesFirstNameInitialAndLastNameToName": {
            "title": "Shouldmergeidentitiesfirstnameinitialandlastnametoname",
            "type": "boolean"
          },
          "shouldMergeIdentitiesInDifferentGitHubOrganizations": {
            "title": "Shouldmergeidentitiesindifferentgithuborganizations",
            "type": "boolean"
          },
          "shouldMergeIdentitiesByGitHubUsernameToName": {
            "title": "Shouldmergeidentitiesbygithubusernametoname",
            "type": "boolean"
          },
          "shouldMergeIdentitiesBySameEmailPrefixToFirstNameAndLastName": {
            "title": "Shouldmergeidentitiesbysameemailprefixtofirstnameandlastname",
            "type": "boolean"
          },
          "shouldMergeIdentitiesBySameEmailPrefixToFirstNameInitialAndLastName": {
            "title": "Shouldmergeidentitiesbysameemailprefixtofirstnameinitialandlastname",
            "type": "boolean"
          },
          "shouldMergeIdentitiesBySameEmailPrefixToUsername": {
            "title": "Shouldmergeidentitiesbysameemailprefixtousername",
            "type": "boolean"
          },
          "mergeIdentitiesBySameEmailWithSubstring": {
            "title": "Mergeidentitiesbysameemailwithsubstring",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplaceRule"
            }
          },
          "mergeIdentitiesBySameEmailWithRegex": {
            "title": "Mergeidentitiesbysameemailwithregex",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegexReplaceRule"
            }
          }
        },
        "description": "Basic identity unification settings model schema"
      },
      "IngestionDataBundleSchema": {
        "title": "IngestionDataBundleSchema",
        "type": "object",
        "properties": {
          "new_users": {
            "title": "New Users",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewUserRequestSchema"
            },
            "description": "The Create Users APIs sets up App users(by App ID)."
          },
          "new_groupings": {
            "title": "New Groupings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewGroupingRequestSchema"
            },
            "description": "The Create Groupings API is used to create groups that have access to a particular app."
          },
          "new_permissions": {
            "title": "New Permissions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPermissionRequestSchema"
            },
            "description": "The Create Permissions API is used to create a set of privileges, assigned to a specific target.\nA permission (also referred to as an “entitlement”) is a set of privileges, assigned to a specific target. \nExamples include: file permissions, file shares, GCP entitlements, the actual policies assigning access to roles in AWS, and inline policies."
          },
          "new_privileges": {
            "title": "New Privileges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPrivilegeRequestSchema"
            },
            "description": "The Create Privileges API is used to define privileges that can be associated with assets.\nFor example, Read privileges on a file.\nHere you can define the type of privileges and associate it to assets in the Permission API.\n"
          },
          "new_privileges_grants": {
            "title": "New Privileges Grants",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPrivilegeGrantsRequestSchema"
            },
            "description": "The Create Privileges Grants API enables you to establish inheritance between privileges, so that a single privilege contains a set of other privileges. \nFor example, an Administrative privilege that contains read and write privileges."
          },
          "new_accounts_association": {
            "title": "New Accounts Association",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAccountsAssociationRequestSchema"
            },
            "description": "The Create Accounts Association API creates account associations between user accounts and groups."
          },
          "new_groupings_association": {
            "title": "New Groupings Association",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewGroupingsAssociationRequestSchema"
            },
            "description": "The Create Groupings Association API creates associations between groups and other groups.\n"
          },
          "new_assets": {
            "title": "New Assets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAssetRequestSchema"
            },
            "description": "The Create Assets API creates assets (including asset data)."
          },
          "new_assets_inheritance": {
            "title": "New Assets Inheritance",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAssetInheritanceRequestSchema"
            },
            "description": "The Create Assets Inheritence API enables you to create a connection between different assets (for example, a folder that contains multiple files).\n"
          },
          "new_identities": {
            "title": "New Identities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewIdentityRequestSchema"
            },
            "description": "The Create Identities API is used to create identities. \nThe data of the identity from this API is considered \"the source of truth\" and overrides the identity data from other systems.\n"
          }
        }
      },
      "InternalSettingListSchema": {
        "title": "InternalSettingListSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/Pagination"
              }
            ],
            "default": {
              "limit": -1,
              "skip": 0,
              "total": -1
            }
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalSettingSchema"
            }
          }
        },
        "description": "Model list schema with pagination"
      },
      "InternalSettingSchema": {
        "title": "InternalSettingSchema",
        "required": [
          "name",
          "family",
          "type",
          "id",
          "createdAt",
          "modifiedAt"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "family": {
            "$ref": "#/components/schemas/SettingsFamilies"
          },
          "type": {
            "$ref": "#/components/schemas/SettingsValueType"
          },
          "value": {
            "title": "Value",
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ]
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "title": "Modifiedat",
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Setting model schema"
      },
      "ItemsBundleSchema": {
        "title": "ItemsBundleSchema",
        "type": "object",
        "properties": {
          "services": {
            "title": "Services",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDescription"
            }
          },
          "identities": {
            "title": "Identities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityDescription"
            }
          },
          "assets": {
            "title": "Assets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDescription"
            }
          },
          "inheritanceIdentities": {
            "title": "Inheritanceidentities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentitiesInheritance"
            }
          },
          "inheritanceAssets": {
            "title": "Inheritanceassets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetsInheritance"
            }
          },
          "access": {
            "title": "Access",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessDescription"
            }
          }
        }
      },
      "NewAccountsAssociationRequestSchema": {
        "title": "NewAccountsAssociationRequestSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "Source account ID **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "Target grouping ID to associate with  **Mandatory**.\n"
          }
        },
        "description": "New accounts associations request schema"
      },
      "NewAccountsAssociationResponseDataSchema": {
        "title": "NewAccountsAssociationResponseDataSchema",
        "required": [
          "validSourceIds",
          "validTargetIds",
          "invalidSourceIds",
          "invalidTargetIds"
        ],
        "type": "object",
        "properties": {
          "validSourceIds": {
            "title": "Validsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** source account ids."
          },
          "validTargetIds": {
            "title": "Validtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** target grouping ids."
          },
          "invalidSourceIds": {
            "title": "Invalidsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** source account ids."
          },
          "invalidTargetIds": {
            "title": "Invalidtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** target grouping ids."
          }
        },
        "description": "New accounts associations response data schema"
      },
      "NewAccountsAssociationResponseSchema": {
        "title": "NewAccountsAssociationResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewAccountsAssociationResponseDataSchema"
              }
            ],
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New accounts associations response schema"
      },
      "NewAccountsAssociationsListRequestSchema": {
        "title": "NewAccountsAssociationsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAccountsAssociationRequestSchema"
            },
            "description": "New Accounts Associations"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewAssetInheritanceRequestSchema": {
        "title": "NewAssetInheritanceRequestSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "ID of the source asset. **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "The ID of the iherited asset (or assets). **Mandatory**\n"
          }
        },
        "description": "New assets inheritance request schema"
      },
      "NewAssetRequestSchema": {
        "title": "NewAssetRequestSchema",
        "required": [
          "uniqueId",
          "name"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Asset ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The asset ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The name of the asset. The default is the Asset ID. **Mandatory**\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetType"
              }
            ],
            "description": "The asset types that are supported by Authomize **Mandatory**\n\nPermitted values:\n\n   •\t`Application` (federation) \n   •\t`Database`\n   •\t`Drive`\n   •\t`File`\n   •\t`Folder`\n   •\t`GitRepository`\n   •\t`Integration`\n   •\t`Project`\n   •\t`Site`\n   •\t`Table`\n   •\t`Ticket`\n   •\t`VirtualMachine`\n   •\t`Other`\n\nIf the asset type does not exist use `Other`.\n",
            "default": "Other"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The asset type in the source system.\nThe default is the canonical type (if not mentioned).\n"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "The date (in ISO 8601 format) that the asset was created.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "lastUsedAt": {
            "title": "Lastusedat",
            "type": "string",
            "description": "The date (in ISO 8601 format) of the last time that the asset was in use.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A description of the asset (up to 512 characters).\n"
          },
          "href": {
            "title": "Href",
            "type": "string",
            "description": "A link to the asset in the source system.\n"
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The owner ID"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags associated with the asset.\n"
          }
        },
        "description": "New asset request schema"
      },
      "NewAssetsInheritanceListRequestSchema": {
        "title": "NewAssetsInheritanceListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAssetInheritanceRequestSchema"
            },
            "description": "New Assets Inheritance"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewAssetsInheritanceResponseDataSchema": {
        "title": "NewAssetsInheritanceResponseDataSchema",
        "required": [
          "validSourceIds",
          "validTargetIds",
          "invalidSourceIds",
          "invalidTargetIds"
        ],
        "type": "object",
        "properties": {
          "validSourceIds": {
            "title": "Validsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** source assets ids."
          },
          "validTargetIds": {
            "title": "Validtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** target assets ids."
          },
          "invalidSourceIds": {
            "title": "Invalidsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** source assets ids."
          },
          "invalidTargetIds": {
            "title": "Invalidtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** target assets ids."
          }
        },
        "description": "New assets inheritance response data schema"
      },
      "NewAssetsInheritanceResponseSchema": {
        "title": "NewAssetsInheritanceResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewAssetsInheritanceResponseDataSchema"
              }
            ],
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New assets inheritance response schema"
      },
      "NewAssetsListRequestSchema": {
        "title": "NewAssetsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAssetRequestSchema"
            },
            "description": "New Assets"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewAssetsResponseSchema": {
        "title": "NewAssetsResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities",
          "validOwnerIds",
          "invalidOwnerIds"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "description": "Response data.",
            "default": {}
          },
          "validOwnerIds": {
            "title": "Validownerids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** owner (user) ids."
          },
          "invalidOwnerIds": {
            "title": "Invalidownerids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** owner (user) ids."
          }
        },
        "description": "New assets response schema"
      },
      "NewGroupingRequestSchema": {
        "title": "NewGroupingRequestSchema",
        "required": [
          "uniqueId",
          "name"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "\nGrouping ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The groupping ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The name of the grouping. The default is the ID field. **Mandatory**\n"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The name of the type of grouping in the source system. The default is `Group`. Example: Group/Alias/AWS Role\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupingType"
              }
            ],
            "description": "Allowed values are `Group` and `VirtualGroup`.\n\nThe default is `Group`.\n\n`VirtualGroup` are mapped to the Authomize access explorer graph and are not present in other places in the user interface nor are they counted as a group.\n",
            "default": "Group"
          },
          "isRole": {
            "title": "Isrole",
            "type": "boolean",
            "description": "If `Role`, the grouping represents a role in the source application and the name of the role is the grouping `name`.\n\nThe default is `False`.\n",
            "default": false
          },
          "anyoneCanJoinOrLeave": {
            "title": "Anyonecanjoinorleave",
            "type": "boolean",
            "description": "Must be either `ture` or `false`.\nWhen set to `true` users can give themselves membership in this grouping without the grouping's managers' or owners' permission. \nExamples include public groups (M365), Google Groups with specific flags, ...\nValid only when `groupingType = Group`\n",
            "default": false
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The owner ID"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags on the access grouping.\n"
          }
        },
        "description": "New group request schema"
      },
      "NewGroupingResponseSchema": {
        "title": "NewGroupingResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities",
          "validOwnerIds",
          "invalidOwnerIds"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "description": "Response data.",
            "default": {}
          },
          "validOwnerIds": {
            "title": "Validownerids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** owner (user) ids."
          },
          "invalidOwnerIds": {
            "title": "Invalidownerids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** owner (user) ids."
          }
        },
        "description": "New group response schema"
      },
      "NewGroupingsAssociationRequestSchema": {
        "title": "NewGroupingsAssociationRequestSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "Grouping source ID **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "Grouping Target ID  **Mandatory**. The grouping to associate with.\n"
          }
        },
        "description": "New groupings associations request schema"
      },
      "NewGroupingsAssociationResponseDataSchema": {
        "title": "NewGroupingsAssociationResponseDataSchema",
        "required": [
          "validSourceIds",
          "validTargetIds",
          "invalidSourceIds",
          "invalidTargetIds"
        ],
        "type": "object",
        "properties": {
          "validSourceIds": {
            "title": "Validsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** source grouping ids."
          },
          "validTargetIds": {
            "title": "Validtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** target grouping ids."
          },
          "invalidSourceIds": {
            "title": "Invalidsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** source grouping ids."
          },
          "invalidTargetIds": {
            "title": "Invalidtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** target grouping ids."
          }
        },
        "description": "New groupings associations response data schema"
      },
      "NewGroupingsAssociationResponseSchema": {
        "title": "NewGroupingsAssociationResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewGroupingsAssociationResponseDataSchema"
              }
            ],
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New groupings associations response schema"
      },
      "NewGroupingsAssociationsListRequestSchema": {
        "title": "NewGroupingsAssociationsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewGroupingsAssociationRequestSchema"
            },
            "description": "New Groupings Associations"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewGroupingsListRequestSchema": {
        "title": "NewGroupingsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewGroupingRequestSchema"
            },
            "description": "New Groupings"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewIdentitiesListRequestSchema": {
        "title": "NewIdentitiesListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewIdentityRequestSchema"
            },
            "description": "New Identities"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewIdentityRequestSchema": {
        "title": "NewIdentityRequestSchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Identity ID **Mandatory**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The identity ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's work email address.\n"
          },
          "personalEmail": {
            "title": "Personalemail",
            "type": "string",
            "description": "User's personal email address.\n"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "employeeNumber": {
            "title": "Employeenumber",
            "type": "string",
            "description": "Employee number"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "The user status must be one of the following: `Deleted`, `Disabled`, `Enabled`, `Staged` or `Suspended`.\n"
          },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Country"
          },
          "city": {
            "title": "City",
            "type": "string",
            "description": "City"
          },
          "department": {
            "title": "Department",
            "type": "string",
            "description": "The identity's department in the organization.\n"
          },
          "division": {
            "title": "Division",
            "type": "string",
            "description": "The identity's division in their organization.\n"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The user's job title.\n"
          },
          "managerId": {
            "title": "Managerid",
            "type": "string",
            "description": "The manager identity's ID.\n"
          },
          "hireAt": {
            "title": "Hireat",
            "type": "string",
            "description": "The user's first day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "terminationAt": {
            "title": "Terminationat",
            "type": "string",
            "description": "The user's last day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the identity.\n"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "New Identity request schema"
      },
      "NewIdentityResponseSchema": {
        "title": "NewIdentityResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New identity response schema"
      },
      "NewIdentityUnificationSettingsSchema": {
        "title": "NewIdentityUnificationSettingsSchema",
        "type": "object",
        "properties": {
          "actorId": {
            "title": "Actorid",
            "type": "string"
          },
          "actorType": {
            "$ref": "#/components/schemas/ActorType"
          },
          "mergeInternalAndExternalAccounts": {
            "title": "Mergeinternalandexternalaccounts",
            "type": "boolean"
          },
          "shouldMergeIdentitiesBySameEmail": {
            "title": "Shouldmergeidentitiesbysameemail",
            "type": "boolean"
          },
          "shouldMergeIdentitiesBySameFirstNameAndLastName": {
            "title": "Shouldmergeidentitiesbysamefirstnameandlastname",
            "type": "boolean"
          },
          "shouldMergeIdentitiesFirstNameInitialAndLastNameToName": {
            "title": "Shouldmergeidentitiesfirstnameinitialandlastnametoname",
            "type": "boolean"
          },
          "shouldMergeIdentitiesInDifferentGitHubOrganizations": {
            "title": "Shouldmergeidentitiesindifferentgithuborganizations",
            "type": "boolean"
          },
          "shouldMergeIdentitiesByGitHubUsernameToName": {
            "title": "Shouldmergeidentitiesbygithubusernametoname",
            "type": "boolean"
          },
          "shouldMergeIdentitiesBySameEmailPrefixToFirstNameAndLastName": {
            "title": "Shouldmergeidentitiesbysameemailprefixtofirstnameandlastname",
            "type": "boolean"
          },
          "shouldMergeIdentitiesBySameEmailPrefixToFirstNameInitialAndLastName": {
            "title": "Shouldmergeidentitiesbysameemailprefixtofirstnameinitialandlastname",
            "type": "boolean"
          },
          "shouldMergeIdentitiesBySameEmailPrefixToUsername": {
            "title": "Shouldmergeidentitiesbysameemailprefixtousername",
            "type": "boolean"
          },
          "mergeIdentitiesBySameEmailWithSubstring": {
            "title": "Mergeidentitiesbysameemailwithsubstring",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplaceRule"
            }
          },
          "mergeIdentitiesBySameEmailWithRegex": {
            "title": "Mergeidentitiesbysameemailwithregex",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegexReplaceRule"
            }
          }
        },
        "description": "IdentityUnification settings model schema"
      },
      "NewPermissionRequestSchema": {
        "title": "NewPermissionRequestSchema",
        "required": [
          "sourceUniqueId",
          "sourceType",
          "privilegeId"
        ],
        "type": "object",
        "properties": {
          "sourceUniqueId": {
            "title": "Sourceuniqueid",
            "minLength": 1,
            "type": "string",
            "description": "The unique ID of the permission's source. Must be either `userId` or `groupingId`. **Mandatory**.\n"
          },
          "sourceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionSourceType"
              }
            ],
            "description": "The type of the permission's source. **Mandatory**.\n\nSet `sourceType` to either:\n\n- User `uniqueId`.\n- Grouping `uniqueId`."
          },
          "privilegeId": {
            "title": "Privilegeid",
            "minLength": 1,
            "type": "string",
            "description": "The ID of the privilege, allows access to assets. **Mandatory**.\n"
          },
          "assetId": {
            "title": "Assetid",
            "type": "string",
            "description": "The ID of the asset.\n\nWhen `null`, this is a global permission on the entire application (not just locally)."
          },
          "isRole": {
            "title": "Isrole",
            "type": "boolean",
            "description": "If `true`, the permissions represent the role in the source application.\nThe default is `false`.\n",
            "default": false
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags on access permissions.\n"
          }
        },
        "description": "New permission request schema"
      },
      "NewPermissionsListRequestSchema": {
        "title": "NewPermissionsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPermissionRequestSchema"
            },
            "description": "New Permissions"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewPermissionsResponseDataSchema": {
        "title": "NewPermissionsResponseDataSchema",
        "required": [
          "validUserIds",
          "validGroupingIds",
          "validAssetIds",
          "validPrivilegeIds",
          "invalidUserIds",
          "invalidGroupingIds",
          "invalidAssetIds",
          "invalidPrivilegeIds"
        ],
        "type": "object",
        "properties": {
          "validUserIds": {
            "title": "Validuserids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** user ids."
          },
          "validGroupingIds": {
            "title": "Validgroupingids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** grouping ids."
          },
          "validAssetIds": {
            "title": "Validassetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** asset ids."
          },
          "validPrivilegeIds": {
            "title": "Validprivilegeids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** privilege ids."
          },
          "invalidUserIds": {
            "title": "Invaliduserids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** user ids."
          },
          "invalidGroupingIds": {
            "title": "Invalidgroupingids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** grouping ids."
          },
          "invalidAssetIds": {
            "title": "Invalidassetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** asset ids."
          },
          "invalidPrivilegeIds": {
            "title": "Invalidprivilegeids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** privilege ids."
          }
        },
        "description": "New permissions response data schema"
      },
      "NewPermissionsResponseSchema": {
        "title": "NewPermissionsResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewPermissionsResponseDataSchema"
              }
            ],
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New permissions response schema"
      },
      "NewPrivilegeGrantsRequestSchema": {
        "title": "NewPrivilegeGrantsRequestSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "ID of the source privilege. **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "ID of the granted privilege. **Mandatory**\n"
          }
        },
        "description": "New privilege grants request schema"
      },
      "NewPrivilegeGrantsResponseDataSchema": {
        "title": "NewPrivilegeGrantsResponseDataSchema",
        "required": [
          "validSourceIds",
          "validTargetIds",
          "invalidSourceIds",
          "invalidTargetIds"
        ],
        "type": "object",
        "properties": {
          "validSourceIds": {
            "title": "Validsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** source privilege ids."
          },
          "validTargetIds": {
            "title": "Validtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **valid** target privilege ids."
          },
          "invalidSourceIds": {
            "title": "Invalidsourceids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** source privilege ids."
          },
          "invalidTargetIds": {
            "title": "Invalidtargetids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of **invalid** target privilege ids."
          }
        },
        "description": "New privilege grants response data schema"
      },
      "NewPrivilegeGrantsResponseSchema": {
        "title": "NewPrivilegeGrantsResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewPrivilegeGrantsResponseDataSchema"
              }
            ],
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New privilege grants response schema"
      },
      "NewPrivilegeRequestSchema": {
        "title": "NewPrivilegeRequestSchema",
        "required": [
          "uniqueId",
          "type"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Privilege ID.\n\nIf not defined, set as originName. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The privilege ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PrivilegeType"
              }
            ],
            "description": "The \"canonical\" privilege types that are supported by Authomize off-the-shelf: **Mandatory**\n\nPermitted values: \n   •\t`Administrative`\n   •\t`Unknown`\n   •\t`Read`\n   •\t`ReadMetadata`\n   •\t`Write`\n   •\t`Create`\n   •\t`Delete`\n   •\t`Execute`\n   •\t`Enable`\n   •\t`Assign`\n   •\t`Restore`\n   •\t`Import`\n   •\t`Export`\n   •\t`Update`\n   •\t`Cancel`\n   •\t`Use`\n   •\t`Delegate`\n   •\t`Join`\n   •\t`Invite`\n   •\t`Share`\n\nIf the privilege type does not exist use `Unknown` or `Use`.\n"
          },
          "originName": {
            "title": "Originname",
            "type": "string",
            "description": "The privilege name in the source system."
          }
        },
        "description": "New privilege request schema"
      },
      "NewPrivilegesGrantsListRequestSchema": {
        "title": "NewPrivilegesGrantsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPrivilegeGrantsRequestSchema"
            },
            "description": "New Privileges Grants"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewPrivilegesListRequestSchema": {
        "title": "NewPrivilegesListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPrivilegeRequestSchema"
            },
            "description": "New Privileges"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "NewPrivilegesResponseSchema": {
        "title": "NewPrivilegesResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New privileges response schema"
      },
      "NewRestApiConnectorSchema": {
        "title": "NewRestApiConnectorSchema",
        "required": [
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "config": {
            "title": "Config",
            "type": "object"
          },
          "serviceId": {
            "title": "Serviceid",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "NewUserRequestSchema": {
        "title": "NewUserRequestSchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "User's Account ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The user ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username\n"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's email address."
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "User status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the user.\n"
          },
          "isExternal": {
            "title": "Isexternal",
            "type": "boolean",
            "description": "Account is external to Authomize.\nMust be either `true` or `false`.\n",
            "default": false
          },
          "hasMFA": {
            "title": "Hasmfa",
            "type": "boolean",
            "description": "Has Multi-Factor Authentication enabled.\nMust be either `true` or `false`.\n"
          },
          "lastLoginAt": {
            "title": "Lastloginat",
            "type": "string",
            "description": "The last login date in ISO 8601 format.\n",
            "format": "date-time"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "New user request schema"
      },
      "NewUserResponseSchema": {
        "title": "NewUserResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "New users response schema"
      },
      "NewUsersListRequestSchema": {
        "title": "NewUsersListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewUserRequestSchema"
            },
            "description": "New Users"
          },
          "validateOnly": {
            "title": "Validateonly",
            "type": "boolean",
            "description": "Validate the request without uploading the data into the system.",
            "default": false
          }
        },
        "description": "List request schema"
      },
      "Pagination": {
        "title": "Pagination",
        "type": "object",
        "properties": {
          "limit": {
            "title": "Limit",
            "type": "integer",
            "default": -1
          },
          "skip": {
            "title": "Skip",
            "type": "integer",
            "default": 0
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "default": -1
          },
          "hasMore": {
            "title": "Hasmore",
            "type": "boolean"
          },
          "search_after": {
            "title": "Search After",
            "type": "array",
            "items": {}
          }
        },
        "description": "Base schema for pagination"
      },
      "PermissionSchema": {
        "title": "PermissionSchema",
        "required": [
          "sourceUniqueId",
          "sourceType",
          "privilegeId"
        ],
        "type": "object",
        "properties": {
          "sourceUniqueId": {
            "title": "Sourceuniqueid",
            "minLength": 1,
            "type": "string",
            "description": "The unique ID of the permission's source. Must be either `userId` or `groupingId`. **Mandatory**.\n"
          },
          "sourceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PermissionSourceType"
              }
            ],
            "description": "The type of the permission's source. **Mandatory**.\n\nSet `sourceType` to either:\n\n- User `uniqueId`.\n- Grouping `uniqueId`."
          },
          "privilegeId": {
            "title": "Privilegeid",
            "minLength": 1,
            "type": "string",
            "description": "The ID of the privilege, allows access to assets. **Mandatory**.\n"
          },
          "assetId": {
            "title": "Assetid",
            "type": "string",
            "description": "The ID of the asset.\n\nWhen `null`, this is a global permission on the entire application (not just locally)."
          },
          "isRole": {
            "title": "Isrole",
            "type": "boolean",
            "description": "If `true`, the permissions represent the role in the source application.\nThe default is `false`.\n",
            "default": false
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags on access permissions.\n"
          }
        },
        "description": "Permission schema"
      },
      "PermissionSourceType": {
        "title": "PermissionSourceType",
        "enum": [
          "User",
          "Grouping"
        ],
        "description": "An enumeration."
      },
      "PrivilegeGrantSchema": {
        "title": "PrivilegeGrantSchema",
        "required": [
          "sourceId",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "title": "Sourceid",
            "minLength": 1,
            "type": "string",
            "description": "ID of the source privilege. **Mandatory**\n"
          },
          "targetId": {
            "title": "Targetid",
            "minLength": 1,
            "type": "string",
            "description": "ID of the granted privilege. **Mandatory**\n"
          }
        },
        "description": "Privilege grant schema"
      },
      "PrivilegeSchema": {
        "title": "PrivilegeSchema",
        "required": [
          "uniqueId",
          "type"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Privilege ID.\n\nIf not defined, set as originName. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The privilege ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PrivilegeType"
              }
            ],
            "description": "The \"canonical\" privilege types that are supported by Authomize off-the-shelf: **Mandatory**\n\nPermitted values: \n   •\t`Administrative`\n   •\t`Unknown`\n   •\t`Read`\n   •\t`ReadMetadata`\n   •\t`Write`\n   •\t`Create`\n   •\t`Delete`\n   •\t`Execute`\n   •\t`Enable`\n   •\t`Assign`\n   •\t`Restore`\n   •\t`Import`\n   •\t`Export`\n   •\t`Update`\n   •\t`Cancel`\n   •\t`Use`\n   •\t`Delegate`\n   •\t`Join`\n   •\t`Invite`\n   •\t`Share`\n\nIf the privilege type does not exist use `Unknown` or `Use`.\n"
          },
          "originName": {
            "title": "Originname",
            "type": "string",
            "description": "The privilege name in the source system."
          }
        },
        "description": "Privilege schema"
      },
      "PrivilegeType": {
        "title": "PrivilegeType",
        "enum": [
          "Administrative",
          "Unknown",
          "Read",
          "ReadMetadata",
          "Write",
          "Create",
          "Delete",
          "Execute",
          "Enable",
          "Assign",
          "Restore",
          "Import",
          "Export",
          "Update",
          "Cancel",
          "Use",
          "Delegate",
          "Join",
          "Invite",
          "Share"
        ],
        "description": "An enumeration."
      },
      "RegexReplaceRule": {
        "title": "RegexReplaceRule",
        "required": [
          "enabled",
          "pattern",
          "replacement"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "title": "Enabled",
            "type": "boolean"
          },
          "pattern": {
            "title": "Pattern",
            "type": "string"
          },
          "replacement": {
            "title": "Replacement",
            "type": "string"
          }
        }
      },
      "ReplaceRule": {
        "title": "ReplaceRule",
        "required": [
          "enabled",
          "fromString",
          "toString"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "title": "Enabled",
            "type": "boolean"
          },
          "fromString": {
            "title": "Fromstring",
            "type": "string"
          },
          "toString": {
            "title": "Tostring",
            "type": "string"
          }
        }
      },
      "RequestSubmitResponse": {
        "title": "RequestSubmitResponse",
        "required": [
          "requestId"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          }
        }
      },
      "RequestsBundleSchema": {
        "title": "RequestsBundleSchema",
        "type": "object",
        "properties": {
          "delete_app_data": {
            "title": "Delete App Data",
            "type": "boolean",
            "description": "The Delete Application Data API is used to delete app data by `{appId}`.",
            "default": false
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "format": "date-time"
          },
          "new_users": {
            "title": "New Users",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewUserRequestSchema"
            },
            "description": "The Create Users APIs sets up App users(by App ID)."
          },
          "new_groupings": {
            "title": "New Groupings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewGroupingRequestSchema"
            },
            "description": "The Create Groupings API is used to create groups that have access to a particular app."
          },
          "new_permissions": {
            "title": "New Permissions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPermissionRequestSchema"
            },
            "description": "The Create Permissions API is used to create a set of privileges, assigned to a specific target.\nA permission (also referred to as an “entitlement”) is a set of privileges, assigned to a specific target. \nExamples include: file permissions, file shares, GCP entitlements, the actual policies assigning access to roles in AWS, and inline policies."
          },
          "new_privileges": {
            "title": "New Privileges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPrivilegeRequestSchema"
            },
            "description": "The Create Privileges API is used to define privileges that can be associated with assets.\nFor example, Read privileges on a file.\nHere you can define the type of privileges and associate it to assets in the Permission API.\n"
          },
          "new_privileges_grants": {
            "title": "New Privileges Grants",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewPrivilegeGrantsRequestSchema"
            },
            "description": "The Create Privileges Grants API enables you to establish inheritance between privileges, so that a single privilege contains a set of other privileges. \nFor example, an Administrative privilege that contains read and write privileges."
          },
          "new_accounts_association": {
            "title": "New Accounts Association",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAccountsAssociationRequestSchema"
            },
            "description": "The Create Accounts Association API creates account associations between user accounts and groups."
          },
          "new_groupings_association": {
            "title": "New Groupings Association",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewGroupingsAssociationRequestSchema"
            },
            "description": "The Create Groupings Association API creates associations between groups and other groups.\n"
          },
          "new_assets": {
            "title": "New Assets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAssetRequestSchema"
            },
            "description": "The Create Assets API creates assets (including asset data)."
          },
          "new_assets_inheritance": {
            "title": "New Assets Inheritance",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewAssetInheritanceRequestSchema"
            },
            "description": "The Create Assets Inheritence API enables you to create a connection between different assets (for example, a folder that contains multiple files).\n"
          },
          "new_identities": {
            "title": "New Identities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewIdentityRequestSchema"
            },
            "description": "The Create Identities API is used to create identities. \nThe data of the identity from this API is considered \"the source of truth\" and overrides the identity data from other systems.\n"
          }
        }
      },
      "RestApiConnectorListSchema": {
        "title": "RestApiConnectorListSchema",
        "required": [
          "pagination",
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestApiConnectorSchema"
            }
          }
        }
      },
      "RestApiConnectorSchema": {
        "title": "RestApiConnectorSchema",
        "required": [
          "id",
          "serviceType"
        ],
        "type": "object",
        "properties": {
          "config": {
            "title": "Config",
            "type": "object"
          },
          "serviceId": {
            "title": "Serviceid",
            "type": "string",
            "default": ""
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "format": "date-time"
          },
          "lastSyncedAt": {
            "title": "Lastsyncedat",
            "type": "string"
          },
          "lastError": {
            "title": "Lasterror",
            "type": "string"
          },
          "modifiedAt": {
            "title": "Modifiedat",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorStatus"
              }
            ],
            "default": "disabled"
          },
          "serviceType": {
            "title": "Servicetype",
            "type": "string"
          },
          "availableConnectorId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailableConnectorId"
              }
            ],
            "default": "restApiImport"
          },
          "actorType": {
            "title": "Actortype",
            "type": "string"
          },
          "actorId": {
            "title": "Actorid",
            "type": "string"
          }
        }
      },
      "SearchAccountsAssociationsListResponseSchema": {
        "title": "SearchAccountsAssociationsListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountsAssociationSchema"
            },
            "description": "Accounts Associations"
          }
        },
        "description": "Search accounts association response schema"
      },
      "SearchAssetsInheritanceListResponseSchema": {
        "title": "SearchAssetsInheritanceListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetInheritanceSchema"
            },
            "description": "Assets Inheritance"
          }
        },
        "description": "Search asset inheritance response schema"
      },
      "SearchAssetsListResponseSchema": {
        "title": "SearchAssetsListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authomize__connectors_rest_api__app__routes_schema__assets_schema__AssetSchema"
            },
            "description": "Assets"
          }
        },
        "description": "Search asset response schema"
      },
      "SearchGroupingResponseSchema": {
        "title": "SearchGroupingResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupingSchema"
            },
            "description": "Groupings"
          }
        },
        "description": "Search grouping response schema"
      },
      "SearchGroupingsAssociationsListResponseSchema": {
        "title": "SearchGroupingsAssociationsListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupingsAssociationSchema"
            },
            "description": "Groupings Associations"
          }
        },
        "description": "Search groupings association response schema"
      },
      "SearchIdentitiesListResponseSchema": {
        "title": "SearchIdentitiesListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authomize__connectors_rest_api__app__routes_schema__identity_schema__IdentitySchema"
            },
            "description": "Identities"
          }
        },
        "description": "Search identity response schema"
      },
      "SearchPermissionResponseSchema": {
        "title": "SearchPermissionResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionSchema"
            },
            "description": "Permissions"
          }
        },
        "description": "Search permission response schema"
      },
      "SearchPrivilegeGrantsListResponseSchema": {
        "title": "SearchPrivilegeGrantsListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivilegeGrantSchema"
            },
            "description": "Privilege Grants"
          }
        },
        "description": "Search privilege grant response schema"
      },
      "SearchPrivilegesListResponseSchema": {
        "title": "SearchPrivilegesListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivilegeSchema"
            },
            "description": "Privileges"
          }
        },
        "description": "Search privilege response schema"
      },
      "SearchUsersListResponseSchema": {
        "title": "SearchUsersListResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authomize__connectors_rest_api__app__routes_schema__account_schema__UserSchema"
            },
            "description": "Users"
          }
        },
        "description": "Search user response schema"
      },
      "ServiceDescription": {
        "title": "ServiceDescription",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "icon": {
            "title": "Icon",
            "type": "string"
          }
        }
      },
      "SettingsFamilies": {
        "title": "SettingsFamilies",
        "enum": [
          "IdentityUnification"
        ],
        "description": "An enumeration."
      },
      "SettingsValueType": {
        "title": "SettingsValueType",
        "enum": [
          "identityId",
          "identityIdList",
          "DistinctIdentityId",
          "DistinctIdentityIdList",
          "str",
          "strList",
          "dictList",
          "int",
          "bool"
        ],
        "description": "Value types"
      },
      "SplitRuleRequest": {
        "title": "SplitRuleRequest",
        "required": [
          "baseIdentityId",
          "actorId",
          "actorType"
        ],
        "type": "object",
        "properties": {
          "baseIdentityId": {
            "title": "Baseidentityid",
            "type": "string"
          },
          "actorId": {
            "title": "Actorid",
            "type": "string"
          },
          "actorType": {
            "$ref": "#/components/schemas/ActorType"
          }
        }
      },
      "SubmitResponse": {
        "title": "SubmitResponse",
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          }
        }
      },
      "TransactionPaginatedSearchSchema": {
        "title": "TransactionPaginatedSearchSchema",
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BundleTransactionSchema"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "TransactionStateType": {
        "title": "TransactionStateType",
        "enum": [
          "Applying",
          "Complete",
          "Failed",
          "Ingest",
          "IngestChunk",
          "PostProcess",
          "Queue"
        ],
        "description": "An enumeration."
      },
      "UpdateAssetRequestSchema": {
        "title": "UpdateAssetRequestSchema",
        "required": [
          "uniqueId",
          "name"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Asset ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The asset ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The name of the asset. The default is the Asset ID. **Mandatory**\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetType"
              }
            ],
            "description": "The asset types that are supported by Authomize **Mandatory**\n\nPermitted values:\n\n   •\t`Application` (federation) \n   •\t`Database`\n   •\t`Drive`\n   •\t`File`\n   •\t`Folder`\n   •\t`GitRepository`\n   •\t`Integration`\n   •\t`Project`\n   •\t`Site`\n   •\t`Table`\n   •\t`Ticket`\n   •\t`VirtualMachine`\n   •\t`Other`\n\nIf the asset type does not exist use `Other`.\n",
            "default": "Other"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The asset type in the source system.\nThe default is the canonical type (if not mentioned).\n"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "The date (in ISO 8601 format) that the asset was created.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "lastUsedAt": {
            "title": "Lastusedat",
            "type": "string",
            "description": "The date (in ISO 8601 format) of the last time that the asset was in use.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A description of the asset (up to 512 characters).\n"
          },
          "href": {
            "title": "Href",
            "type": "string",
            "description": "A link to the asset in the source system.\n"
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The owner ID"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags associated with the asset.\n"
          }
        },
        "description": "Update asset request schema"
      },
      "UpdateAssetsListRequestSchema": {
        "title": "UpdateAssetsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateAssetRequestSchema"
            },
            "description": "Update Assets"
          }
        },
        "description": "List request schema"
      },
      "UpdateGroupingsListRequestSchema": {
        "title": "UpdateGroupingsListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateGroupingsRequestSchema"
            },
            "description": "List of update user requests.\n"
          }
        },
        "description": "List of update requests request schema"
      },
      "UpdateGroupingsRequestSchema": {
        "title": "UpdateGroupingsRequestSchema",
        "required": [
          "uniqueId",
          "name"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "\nGrouping ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The groupping ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The name of the grouping. The default is the ID field. **Mandatory**\n"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The name of the type of grouping in the source system. The default is `Group`. Example: Group/Alias/AWS Role\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupingType"
              }
            ],
            "description": "Allowed values are `Group` and `VirtualGroup`.\n\nThe default is `Group`.\n\n`VirtualGroup` are mapped to the Authomize access explorer graph and are not present in other places in the user interface nor are they counted as a group.\n",
            "default": "Group"
          },
          "isRole": {
            "title": "Isrole",
            "type": "boolean",
            "description": "If `Role`, the grouping represents a role in the source application and the name of the role is the grouping `name`.\n\nThe default is `False`.\n",
            "default": false
          },
          "anyoneCanJoinOrLeave": {
            "title": "Anyonecanjoinorleave",
            "type": "boolean",
            "description": "Must be either `ture` or `false`.\nWhen set to `true` users can give themselves membership in this grouping without the grouping's managers' or owners' permission. \nExamples include public groups (M365), Google Groups with specific flags, ...\nValid only when `groupingType = Group`\n",
            "default": false
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The owner ID"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags on the access grouping.\n"
          }
        },
        "description": "New group request schema"
      },
      "UpdateGroupingsResponseSchema": {
        "title": "UpdateGroupingsResponseSchema",
        "required": [
          "requestId",
          "numberOfAcceptedEntities"
        ],
        "type": "object",
        "properties": {
          "acceptedTimestamp": {
            "title": "Acceptedtimestamp",
            "type": "string",
            "description": "**The accepted time of the request**",
            "format": "date-time"
          },
          "requestId": {
            "title": "Requestid",
            "type": "string",
            "description": "**Request id**"
          },
          "numberOfAcceptedEntities": {
            "title": "Numberofacceptedentities",
            "type": "integer",
            "description": "**The number of entities that pass validation and uploaded**"
          },
          "data": {
            "title": "Data",
            "description": "Response data.",
            "default": {}
          }
        },
        "description": "Update user response schema"
      },
      "UpdateIdentitiesListRequestSchema": {
        "title": "UpdateIdentitiesListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateIdentityRequestSchema"
            },
            "description": "List of update identity requests.\n"
          }
        },
        "description": "List of update requests request schema"
      },
      "UpdateIdentityRequestSchema": {
        "title": "UpdateIdentityRequestSchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Identity ID **Mandatory**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The identity ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's work email address.\n"
          },
          "personalEmail": {
            "title": "Personalemail",
            "type": "string",
            "description": "User's personal email address.\n"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "employeeNumber": {
            "title": "Employeenumber",
            "type": "string",
            "description": "Employee number"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "The user status must be one of the following: `Deleted`, `Disabled`, `Enabled`, `Staged` or `Suspended`.\n"
          },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Country"
          },
          "city": {
            "title": "City",
            "type": "string",
            "description": "City"
          },
          "department": {
            "title": "Department",
            "type": "string",
            "description": "The identity's department in the organization.\n"
          },
          "division": {
            "title": "Division",
            "type": "string",
            "description": "The identity's division in their organization.\n"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The user's job title.\n"
          },
          "managerId": {
            "title": "Managerid",
            "type": "string",
            "description": "The manager identity's ID.\n"
          },
          "hireAt": {
            "title": "Hireat",
            "type": "string",
            "description": "The user's first day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "terminationAt": {
            "title": "Terminationat",
            "type": "string",
            "description": "The user's last day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the identity.\n"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "New Identity request schema"
      },
      "UpdatePrivilegeRequestSchema": {
        "title": "UpdatePrivilegeRequestSchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Privilege ID.\n\nIf not defined, set as originName. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The privilege ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PrivilegeType"
              }
            ],
            "description": "The \"canonical\" privilege types that are supported by Authomize off-the-shelf: **Mandatory**\n\nPermitted values: \n   •\t`Administrative`\n   •\t`Unknown`\n   •\t`Read`\n   •\t`ReadMetadata`\n   •\t`Write`\n   •\t`Create`\n   •\t`Delete`\n   •\t`Execute`\n   •\t`Enable`\n   •\t`Assign`\n   •\t`Restore`\n   •\t`Import`\n   •\t`Export`\n   •\t`Update`\n   •\t`Cancel`\n   •\t`Use`\n   •\t`Delegate`\n   •\t`Join`\n   •\t`Invite`\n   •\t`Share`\n\nIf the privilege type does not exist use `Unknown` or `Use`.\n"
          },
          "originName": {
            "title": "Originname",
            "type": "string",
            "description": "The privilege name in the source system."
          }
        },
        "description": "New privilege request schema"
      },
      "UpdatePrivilegesListRequestSchema": {
        "title": "UpdatePrivilegesListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdatePrivilegeRequestSchema"
            },
            "description": "Update Privileges"
          }
        },
        "description": "List request schema"
      },
      "UpdateUserListRequestSchema": {
        "title": "UpdateUserListRequestSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "maxItems": 10000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateUserRequestSchema"
            },
            "description": "List of update user requests.\n"
          }
        },
        "description": "List of update requests request schema"
      },
      "UpdateUserRequestSchema": {
        "title": "UpdateUserRequestSchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "User's Account ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The user ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username\n"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's email address."
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "User status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the user.\n"
          },
          "isExternal": {
            "title": "Isexternal",
            "type": "boolean",
            "description": "Account is external to Authomize.\nMust be either `true` or `false`.\n",
            "default": false
          },
          "hasMFA": {
            "title": "Hasmfa",
            "type": "boolean",
            "description": "Has Multi-Factor Authentication enabled.\nMust be either `true` or `false`.\n"
          },
          "lastLoginAt": {
            "title": "Lastloginat",
            "type": "string",
            "description": "The last login date in ISO 8601 format.\n",
            "format": "date-time"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "New user request schema"
      },
      "UserSchema": {
        "title": "UserSchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "User's Account ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The user ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username\n"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's email address."
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "User status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the user.\n"
          },
          "isExternal": {
            "title": "Isexternal",
            "type": "boolean",
            "description": "Account is external to Authomize.\nMust be either `true` or `false`.\n",
            "default": false
          },
          "hasMFA": {
            "title": "Hasmfa",
            "type": "boolean",
            "description": "Has Multi-Factor Authentication enabled.\nMust be either `true` or `false`.\n"
          },
          "lastLoginAt": {
            "title": "Lastloginat",
            "type": "string",
            "description": "The last login date in ISO 8601 format.\n",
            "format": "date-time"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "User schema"
      },
      "UserStatus": {
        "title": "UserStatus",
        "enum": [
          "Staged",
          "Enabled",
          "Disabled",
          "Suspended",
          "Deleted",
          "Unknown"
        ],
        "description": "An enumeration."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "AccessByType": {
        "title": "AccessByType",
        "enum": [
          "account",
          "grouping"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AccessToType": {
        "title": "AccessToType",
        "enum": [
          "asset",
          "grouping"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AccountExpansion": {
        "title": "AccountExpansion",
        "enum": [
          "identity",
          "sourceApp"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AccountSchema": {
        "title": "AccountSchema",
        "required": [
          "id",
          "object",
          "name",
          "type",
          "isExternal",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique ID"
          },
          "object": {
            "title": "Object",
            "enum": [
              "account"
            ],
            "description": "type of object (here `account`)"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name"
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Type"
          },
          "isExternal": {
            "title": "Isexternal",
            "type": "boolean",
            "description": "Is External"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email"
          },
          "tagIds": {
            "title": "Tagids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tag IDs",
            "default": []
          },
          "identityId": {
            "title": "Identityid",
            "type": "string",
            "description": "Associated Identity ID "
          },
          "identity": {
            "title": "Identity",
            "allOf": [
              {
                "$ref": "#/components/schemas/RawIdentitySchema"
              }
            ],
            "description": "Associated Identity"
          },
          "sourceAppId": {
            "title": "Sourceappid",
            "type": "string",
            "description": "Source App ID"
          },
          "sourceApp": {
            "title": "Sourceapp",
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceAppSchema"
              }
            ],
            "description": "Source App"
          },
          "isAdmin": {
            "title": "Isadmin",
            "type": "boolean",
            "description": "Is Admin"
          },
          "isDeleted": {
            "title": "Isdeleted",
            "type": "boolean",
            "description": "Is Deleted"
          }
        }
      },
      "AddIncidentCommentRequestSchema": {
        "title": "AddIncidentCommentRequestSchema",
        "required": [
          "content"
        ],
        "type": "object",
        "properties": {
          "content": {
            "title": "Content",
            "maxLength": 1025,
            "type": "string",
            "description": "Content of comment."
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "AicpaTsc2017": {
        "title": "AicpaTsc2017",
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AicpaTsc2017Standard"
            },
            "description": "Values"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "UniqueID",
            "default": "aicpaTsc2017"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name",
            "default": "SOC 2 (TSC 2017)"
          }
        }
      },
      "AicpaTsc2017Standard": {
        "title": "AicpaTsc2017Standard",
        "enum": [
          "CC1.1",
          "CC6.3",
          "CC5.1",
          "CC5.3",
          "CC6.1",
          "CC6.2",
          "CC6.7",
          "CC6.6",
          "CC3.2",
          "CC3.3",
          "CC3.4"
        ],
        "description": "An enumeration."
      },
      "AlertCategoryType": {
        "title": "AlertCategoryType",
        "enum": [
          "Change Management",
          "Misconfiguration",
          "Exposure",
          "Privileged Access",
          "Suspicious Behavior",
          "Least Privilege",
          "Custom",
          "IAM Infrastructure Security",
          "Detection",
          "Stale Access",
          "Over-privileges",
          "Privilege Escalation",
          "Account Takeover",
          "Account Impersonation (PE, LM)"
        ],
        "description": "An enumeration."
      },
      "AssetExpansion": {
        "title": "AssetExpansion",
        "enum": [
          "sourceApp"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AttackTacticType": {
        "title": "AttackTacticType",
        "enum": [
          "Collection",
          "Credential Access",
          "Defense Evasion",
          "Discovery",
          "Exfiltration",
          "Impact",
          "Initial Access",
          "Lateral Movement",
          "Persistence",
          "Privilege Escalation"
        ],
        "description": "An enumeration."
      },
      "BaseBooleanFilter": {
        "title": "BaseBooleanFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "title": "$Eq",
            "type": "boolean",
            "description": "Equals To"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "BaseDateFilter": {
        "title": "BaseDateFilter",
        "type": "object",
        "properties": {
          "$gt": {
            "title": "$Gt",
            "type": "string",
            "description": "Greater Than",
            "format": "date-time"
          },
          "$gte": {
            "title": "$Gte",
            "type": "string",
            "description": "Greater Than Or Equals To",
            "format": "date-time"
          },
          "$lt": {
            "title": "$Lt",
            "type": "string",
            "description": "Less Than",
            "format": "date-time"
          },
          "$lte": {
            "title": "$Lte",
            "type": "string",
            "description": "Less Than Or Equals To",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "BaseSingleValuedStringFilter": {
        "title": "BaseSingleValuedStringFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "title": "$Eq",
            "type": "string",
            "description": "Equals To"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "BaseStringFilter": {
        "title": "BaseStringFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "title": "$Eq",
            "type": "string",
            "description": "Equals To"
          },
          "$ne": {
            "title": "$Ne",
            "type": "string",
            "description": "Not Equals"
          },
          "$in": {
            "title": "$In",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "In"
          },
          "$nin": {
            "title": "$Nin",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Not In"
          },
          "$ends": {
            "title": "$Ends",
            "type": "string",
            "description": "Ends With"
          },
          "$begins": {
            "title": "$Begins",
            "type": "string",
            "description": "Begins With"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "BasicEnumFilter_CampaignStatus_": {
        "title": "BasicEnumFilter[CampaignStatus]",
        "type": "object",
        "properties": {
          "$in": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignStatus"
            },
            "description": "In"
          }
        },
        "additionalProperties": false
      },
      "BasicEnumFilter_IncidentSeverity_": {
        "title": "BasicEnumFilter[IncidentSeverity]",
        "type": "object",
        "properties": {
          "$in": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentSeverity"
            },
            "description": "In"
          }
        },
        "additionalProperties": false
      },
      "BasicEnumFilter_IncidentStatus_": {
        "title": "BasicEnumFilter[IncidentStatus]",
        "type": "object",
        "properties": {
          "$in": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentStatus"
            },
            "description": "In"
          }
        },
        "additionalProperties": false
      },
      "BasicEnumFilter_Selection_": {
        "title": "BasicEnumFilter[Selection]",
        "type": "object",
        "properties": {
          "$in": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Selection"
            },
            "description": "In"
          }
        },
        "additionalProperties": false
      },
      "CampaignExpansion": {
        "title": "CampaignExpansion",
        "enum": [
          "owner"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "CampaignPermissionsSearchFilterBody": {
        "title": "CampaignPermissionsSearchFilterBody",
        "type": "object",
        "properties": {
          "decision": {
            "title": "Decision",
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicEnumFilter_Selection_"
              }
            ],
            "description": "Reviewer decisions (keep, revoke or null).\n"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "CampaignSchema": {
        "title": "CampaignSchema",
        "required": [
          "id",
          "name",
          "status",
          "startDate",
          "endDate",
          "createdAt",
          "ownerUserId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique ID of campaign"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the campaign"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignStatus"
              }
            ],
            "description": "The campaign status"
          },
          "startDate": {
            "title": "Startdate",
            "type": "string",
            "description": "Date when the campaign starts",
            "format": "date-time"
          },
          "endDate": {
            "title": "Enddate",
            "type": "string",
            "description": "Date when campaign ends",
            "format": "date-time"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "Time of creation of campaign",
            "format": "date-time"
          },
          "ownerUserId": {
            "title": "Owneruserid",
            "type": "string",
            "description": "User ID of the campaign owner"
          },
          "owner": {
            "title": "Owner",
            "allOf": [
              {
                "$ref": "#/components/schemas/authomize__external_rest_api__app__routes_schema__users__UserSchema"
              }
            ],
            "description": "User Schema of the campaign owner"
          }
        },
        "description": "Schema for single campaign response data"
      },
      "CampaignSearchFilterBody": {
        "title": "CampaignSearchFilterBody",
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicEnumFilter_CampaignStatus_"
              }
            ],
            "description": "Enum: \"draft\" \"initializing\" \"running\" \"completed\" \"failed\" \"empty\" \"overdue\"\n"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "CampaignStatus": {
        "title": "CampaignStatus",
        "enum": [
          "draft",
          "initializing",
          "running",
          "completed",
          "failed",
          "empty",
          "overdue"
        ],
        "description": "An enumeration."
      },
      "CampaignsPermissionSchema": {
        "title": "CampaignsPermissionSchema",
        "required": [
          "id",
          "campaignId",
          "reviewerId",
          "accessById",
          "accessByType",
          "accessToId",
          "accessToType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Campaign ID (unique). \n"
          },
          "campaignId": {
            "title": "Campaignid",
            "type": "string",
            "description": "ID of the Campaign.\n"
          },
          "reviewerId": {
            "title": "Reviewerid",
            "type": "string",
            "description": "Reviewer ID"
          },
          "reviewer": {
            "title": "Reviewer",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReviewerSchema"
              }
            ],
            "description": "Details of the reviewer.\n"
          },
          "accessById": {
            "title": "Accessbyid",
            "type": "string",
            "description": "Access by ID (Account or Grouping ID) that their access was reviewed. \n"
          },
          "accessByType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessByType"
              }
            ],
            "description": "Type of entity that was reviewed, can be Account or Grouping.\n"
          },
          "accessToId": {
            "title": "Accesstoid",
            "type": "string",
            "description": "Access to ID (Asset or Grouping ID) that the access to was reviewed, for example a database the access to was reviewed.  \n"
          },
          "accessToType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessToType"
              }
            ],
            "description": "Assets or grouping that the access to was reviewed.  \n"
          },
          "privilegeId": {
            "title": "Privilegeid",
            "type": "string",
            "description": "ID of the privileges that was reviewed. \n"
          },
          "decision": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Selection"
              }
            ],
            "description": "Reviewer decisions (keep, revoke or null).\n"
          },
          "decisionReason": {
            "title": "Decisionreason",
            "type": "string",
            "description": "Reviewer decision for keeping or revoking the reviewed access.  \n"
          }
        }
      },
      "Ccm301": {
        "title": "Ccm301",
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ccm301Standard"
            },
            "description": "Values"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "UniqueID",
            "default": "ccm301"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name",
            "default": "CSA STAR (CCM 3.0.1)"
          }
        }
      },
      "Ccm301Standard": {
        "title": "Ccm301Standard",
        "enum": [
          "AIS-04",
          "IAM-01",
          "IAM-02",
          "IAM-03",
          "IAM-04",
          "IAM-05",
          "IAM-06",
          "IAM-07",
          "IAM-08",
          "IAM-09",
          "IAM-10",
          "IAM-11",
          "IAM-12",
          "IAM-13",
          "GRM-06",
          "IVS-06",
          "IVS-08",
          "DSI-04"
        ],
        "description": "An enumeration."
      },
      "Ccm402": {
        "title": "Ccm402",
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ccm402Standard"
            },
            "description": "Values"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "UniqueID",
            "default": "ccm402"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name",
            "default": "CSA STAR (CCM 4.0.2)"
          }
        }
      },
      "Ccm402Standard": {
        "title": "Ccm402Standard",
        "enum": [
          "IAM-01",
          "IAM-02",
          "IAM-03",
          "IAM-04",
          "IAM-05",
          "IAM-06",
          "IAM-07",
          "IAM-08",
          "IAM-09",
          "IAM-10",
          "IAM-11",
          "IAM-12",
          "IAM-13",
          "IAM-14",
          "IAM-15",
          "IAM-16",
          "IVS-03",
          "IVS-04",
          "DSP-07",
          "DSP-08",
          "DSP-10",
          "AIS-03",
          "DSP-17",
          "DSP-01",
          "HRS-05"
        ],
        "description": "An enumeration."
      },
      "CisV8Standard": {
        "title": "CisV8Standard",
        "enum": [
          "3.1",
          "3.3",
          "6.8",
          "5.4",
          "12.7",
          "6.5",
          "6.2",
          "5.3",
          "12.2",
          "6.1",
          "5.1",
          "4.11",
          "13.4",
          "13.9",
          "13.10"
        ],
        "description": "An enumeration."
      },
      "Cisv8": {
        "title": "Cisv8",
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CisV8Standard"
            },
            "description": "Values"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "UniqueID",
            "default": "cisv8"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name",
            "default": "CIS v.8"
          }
        }
      },
      "CommentSchema": {
        "title": "CommentSchema",
        "required": [
          "id",
          "content"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique ID of comment."
          },
          "content": {
            "title": "Content",
            "maxLength": 1025,
            "type": "string",
            "description": "Content of comment."
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "FieldName": {
        "title": "FieldName",
        "enum": [
          "name",
          "status",
          "startDate",
          "endDate",
          "createdAt",
          "reviewerType",
          "templateName"
        ],
        "description": "An enumeration."
      },
      "IdentityExpansion": {
        "title": "IdentityExpansion",
        "enum": [
          "account"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "IncidentEntitiesSchema": {
        "title": "IncidentEntitiesSchema",
        "required": [
          "id",
          "object"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique id of entity."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of entity."
          },
          "object": {
            "title": "Object",
            "anyOf": [
              {
                "$ref": "#/components/schemas/InventoryObjects"
              },
              {
                "type": "string"
              }
            ],
            "description": "Identity | Account | Asset"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email"
          },
          "originId": {
            "title": "Originid",
            "type": "string",
            "description": "Origin ID"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "Origin Type"
          }
        }
      },
      "IncidentExpansion": {
        "title": "IncidentExpansion",
        "enum": [
          "policy",
          "assignee"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "IncidentSchema": {
        "title": "IncidentSchema",
        "required": [
          "id",
          "severity",
          "policyId",
          "isResolved",
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique id"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "The date the incident was first reported.",
            "format": "date-time"
          },
          "updatedAt": {
            "title": "Updatedat",
            "type": "string",
            "description": "The date the incident was last updated.",
            "format": "date-time"
          },
          "entities": {
            "title": "Entities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentEntitiesSchema"
            },
            "description": "Entity",
            "default": []
          },
          "apps": {
            "title": "Apps",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceAppSchema"
            },
            "description": "Applications",
            "default": []
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlertCategoryType"
              }
            ],
            "description": "Category"
          },
          "tactics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttackTacticType"
            },
            "description": "Tactics",
            "default": []
          },
          "compliance": {
            "title": "Compliance",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/IsoIec27001"
                },
                {
                  "$ref": "#/components/schemas/AicpaTsc2017"
                },
                {
                  "$ref": "#/components/schemas/Ccm402"
                },
                {
                  "$ref": "#/components/schemas/Ccm301"
                },
                {
                  "$ref": "#/components/schemas/Cisv8"
                }
              ]
            },
            "description": "Compliance",
            "default": []
          },
          "techniques": {
            "title": "Techniques",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Techniques",
            "default": []
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IncidentStatus"
              }
            ],
            "description": "The status of the incident (Open, In Progress, Waiting for Input, or Closed)"
          },
          "severity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IncidentSeverity"
              }
            ],
            "description": "The severity of the incident (Low, Medium, High or Critical)."
          },
          "policyId": {
            "title": "Policyid",
            "type": "string",
            "description": "Unique id of policy."
          },
          "policy": {
            "title": "Policy",
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicySchema"
              }
            ],
            "description": "Policy"
          },
          "assigneeId": {
            "title": "Assigneeid",
            "type": "string",
            "description": "Unique id of assignee."
          },
          "assignee": {
            "title": "Assignee",
            "allOf": [
              {
                "$ref": "#/components/schemas/authomize__external_rest_api__app__routes_schema__users__UserSchema"
              }
            ],
            "description": "Assignee"
          },
          "recommendation": {
            "title": "Recommendation",
            "type": "string",
            "description": "Recommendation"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description"
          },
          "isResolved": {
            "title": "Isresolved",
            "type": "boolean",
            "description": "Is Resolved?"
          },
          "url": {
            "title": "Url",
            "type": "string",
            "description": "URL"
          }
        }
      },
      "IncidentSeverity": {
        "title": "IncidentSeverity",
        "enum": [
          "Low",
          "Medium",
          "High",
          "Critical"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "IncidentStatus": {
        "title": "IncidentStatus",
        "enum": [
          "Open",
          "InProgress",
          "WaitingForInput",
          "Closed"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "InventoryObjects": {
        "title": "InventoryObjects",
        "enum": [
          "identity",
          "account",
          "asset",
          "privilege",
          "other"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "IsoIec27001": {
        "title": "IsoIec27001",
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IsoIec27001Standard"
            },
            "description": "Values"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "UniqueID",
            "default": "isoIec27001"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name",
            "default": "ISO/IEC 27001"
          }
        }
      },
      "IsoIec27001Standard": {
        "title": "IsoIec27001Standard",
        "enum": [
          "A.6.1.2",
          "A.8.1.1",
          "A.8.1.3",
          "A.8.3.3",
          "A.9.1.1",
          "A.9.2.1",
          "A.9.2.3",
          "A.9.2.6",
          "A.9.4.1",
          "A.9.1.2",
          "A.9.4.2",
          "A.9.2.2",
          "A.13.2.1",
          "A.9.4.3",
          "A.7.2.2",
          "A.9.4.5",
          "A.8.2.3",
          "A.7.3.1",
          "A.8.1.4"
        ],
        "description": "An enumeration."
      },
      "NonPaginatedResponseSchema_CampaignSchema_": {
        "title": "NonPaginatedResponseSchema[CampaignSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignSchema"
              }
            ],
            "description": "Actual Data"
          }
        },
        "additionalProperties": false
      },
      "NonPaginatedResponseSchema_CommentSchema_": {
        "title": "NonPaginatedResponseSchema[CommentSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/CommentSchema"
              }
            ],
            "description": "Actual Data"
          }
        },
        "additionalProperties": false
      },
      "NonPaginatedResponseSchema_IncidentSchema_": {
        "title": "NonPaginatedResponseSchema[IncidentSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/IncidentSchema"
              }
            ],
            "description": "Actual Data"
          }
        },
        "additionalProperties": false
      },
      "NonPaginatedResponseSchema_ReviewerSchema_": {
        "title": "NonPaginatedResponseSchema[ReviewerSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReviewerSchema"
              }
            ],
            "description": "Actual Data"
          }
        },
        "additionalProperties": false
      },
      "PaginatedResponseSchema_AccountSchema_": {
        "title": "PaginatedResponseSchema[AccountSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResponseSchema"
              }
            ],
            "description": "Pagination Metadata"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountSchema"
            },
            "description": "List of Actual Data"
          }
        },
        "additionalProperties": false
      },
      "PaginatedResponseSchema_AssetSchema_": {
        "title": "PaginatedResponseSchema[AssetSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResponseSchema"
              }
            ],
            "description": "Pagination Metadata"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authomize__external_rest_api__app__routes_schema__inventory__AssetSchema"
            },
            "description": "List of Actual Data"
          }
        },
        "additionalProperties": false
      },
      "PaginatedResponseSchema_CampaignSchema_": {
        "title": "PaginatedResponseSchema[CampaignSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResponseSchema"
              }
            ],
            "description": "Pagination Metadata"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignSchema"
            },
            "description": "List of Actual Data"
          }
        },
        "additionalProperties": false
      },
      "PaginatedResponseSchema_CampaignsPermissionSchema_": {
        "title": "PaginatedResponseSchema[CampaignsPermissionSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResponseSchema"
              }
            ],
            "description": "Pagination Metadata"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignsPermissionSchema"
            },
            "description": "List of Actual Data"
          }
        },
        "additionalProperties": false
      },
      "PaginatedResponseSchema_IdentitySchema_": {
        "title": "PaginatedResponseSchema[IdentitySchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResponseSchema"
              }
            ],
            "description": "Pagination Metadata"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authomize__external_rest_api__app__routes_schema__inventory__IdentitySchema"
            },
            "description": "List of Actual Data"
          }
        },
        "additionalProperties": false
      },
      "PaginatedResponseSchema_IncidentSchema_": {
        "title": "PaginatedResponseSchema[IncidentSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResponseSchema"
              }
            ],
            "description": "Pagination Metadata"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentSchema"
            },
            "description": "List of Actual Data"
          }
        },
        "additionalProperties": false
      },
      "PaginationRequestSchema": {
        "title": "PaginationRequestSchema",
        "type": "object",
        "properties": {
          "limit": {
            "title": "Limit",
            "type": "integer",
            "description": "Limit"
          },
          "nextPage": {
            "title": "NextPage",
            "type": "string",
            "description": "Starting after"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "PaginationResponseSchema": {
        "title": "PaginationResponseSchema",
        "type": "object",
        "properties": {
          "limit": {
            "title": "Limit",
            "type": "integer",
            "description": "Limit",
            "default": 20
          },
          "hasMore": {
            "title": "HasMore",
            "type": "boolean",
            "description": "Has more? `true` or `false`."
          },
          "nextPage": {
            "title": "NextPage",
            "type": "string",
            "description": "Starting after"
          }
        },
        "description": "Common pagination model that has been used across services."
      },
      "PermissionsExpansion": {
        "title": "PermissionsExpansion",
        "enum": [
          "reviewer.user"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "PolicySchema": {
        "title": "PolicySchema",
        "required": [
          "id",
          "name",
          "templateId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique id of policy."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of policy."
          },
          "templateId": {
            "title": "Templateid",
            "type": "string",
            "description": "Template ID"
          }
        }
      },
      "RawIdentitySchema": {
        "title": "RawIdentitySchema",
        "required": [
          "id",
          "object",
          "name",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique ID"
          },
          "object": {
            "title": "Object",
            "enum": [
              "identity"
            ],
            "description": "Type of entity (here `identity`)"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of Identity"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "Title"
          },
          "department": {
            "title": "Department",
            "type": "string",
            "description": "Department"
          },
          "tagIds": {
            "title": "Tagids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags",
            "default": []
          },
          "accountIds": {
            "title": "Accountids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of associated account IDs",
            "default": []
          },
          "isDeleted": {
            "title": "Isdeleted",
            "type": "boolean",
            "description": "Is Deleted"
          }
        }
      },
      "ReviewStatus": {
        "title": "ReviewStatus",
        "enum": [
          "pending",
          "completed",
          "reviewing",
          "notified",
          "inactive"
        ],
        "description": "An enumeration."
      },
      "ReviewerExpansion": {
        "title": "ReviewerExpansion",
        "enum": [
          "user"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ReviewerSchema": {
        "title": "ReviewerSchema",
        "required": [
          "userId",
          "campaignId",
          "lastNotifiedAt",
          "lastActiveAt",
          "reviewStatus",
          "id"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "title": "Userid",
            "type": "string",
            "description": "User ID of the Reviewer"
          },
          "campaignId": {
            "title": "Campaignid",
            "type": "string",
            "description": "Campaign ID"
          },
          "lastNotifiedAt": {
            "title": "Lastnotifiedat",
            "type": "string",
            "description": "Time of last notified",
            "format": "date-time"
          },
          "lastActiveAt": {
            "title": "Lastactiveat",
            "type": "string",
            "description": "Time of last activity",
            "format": "date-time"
          },
          "reviewStatus": {
            "title": "Reviewstatus",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReviewStatus"
              },
              {
                "type": "string"
              }
            ],
            "description": "Review Status"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique ID"
          },
          "user": {
            "title": "User",
            "allOf": [
              {
                "$ref": "#/components/schemas/authomize__external_rest_api__app__routes_schema__users__UserSchema"
              }
            ],
            "description": "User Schema of the reviewer"
          }
        }
      },
      "SearchAccountsFilterBody": {
        "title": "SearchAccountsFilterBody",
        "type": "object",
        "properties": {
          "account.id": {
            "title": "Account.Id",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseStringFilter"
              }
            ],
            "description": "Filter By Account ID"
          },
          "account.sourceAppId": {
            "title": "Account.Sourceappid",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseStringFilter"
              }
            ],
            "description": "Filter By Source App ID"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchAccountsRequestSchema": {
        "title": "SearchAccountsRequestSchema",
        "type": "object",
        "properties": {
          "sort": {
            "title": "Sort",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSchema_SearchAccountsSortFields_"
            },
            "description": "Sort"
          },
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationRequestSchema"
              }
            ],
            "description": "Pagination"
          },
          "expand": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountExpansion"
            },
            "description": "Expand Fields"
          },
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchAccountsFilterBody"
              }
            ],
            "description": "Search Accounts Filter"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchAccountsSortFields": {
        "title": "SearchAccountsSortFields",
        "enum": [
          "name"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SearchAssetsFilterBody": {
        "title": "SearchAssetsFilterBody",
        "type": "object",
        "properties": {
          "asset.id": {
            "title": "Asset.Id",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseStringFilter"
              }
            ],
            "description": "Filter By Asset ID"
          },
          "asset.sourceAppId": {
            "title": "Asset.Sourceappid",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseStringFilter"
              }
            ],
            "description": "Filter By Source App"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchAssetsRequestSchema": {
        "title": "SearchAssetsRequestSchema",
        "type": "object",
        "properties": {
          "sort": {
            "title": "Sort",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSchema_SearchAssetsSortFields_"
            },
            "description": "Sort"
          },
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationRequestSchema"
              }
            ],
            "description": "Pagination"
          },
          "expand": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetExpansion"
            },
            "description": "Expand Fields"
          },
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchAssetsFilterBody"
              }
            ],
            "description": "Search Assets Filter"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchAssetsSortFields": {
        "title": "SearchAssetsSortFields",
        "enum": [
          "name"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SearchCampaignPermissionsRequestSchema": {
        "title": "SearchCampaignPermissionsRequestSchema",
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationRequestSchema"
              }
            ],
            "description": "Pagination"
          },
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignPermissionsSearchFilterBody"
              }
            ],
            "description": "Filter by the reviewer decisions. \n"
          },
          "expand": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsExpansion"
            },
            "description": "Fields to expand.\n"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchCampaignsRequestSchema": {
        "title": "SearchCampaignsRequestSchema",
        "type": "object",
        "properties": {
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignSearchFilterBody"
              }
            ],
            "description": "Status filter"
          },
          "expand": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignExpansion"
            },
            "description": "Expand Fields"
          },
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationRequestSchema"
              }
            ],
            "description": "Pagination"
          },
          "sort": {
            "title": "Sort",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSchema_FieldName_"
            },
            "description": "Sort"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchIdentitiesFilterBody": {
        "title": "SearchIdentitiesFilterBody",
        "type": "object",
        "properties": {
          "account.email": {
            "title": "Account.Email",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              }
            ],
            "description": "Email associated with Account"
          },
          "identity.sourceApps": {
            "title": "Identity.Sourceapps",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseStringFilter"
              }
            ],
            "description": "Source App of the Identity"
          },
          "identity.id": {
            "title": "Identity.Id",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseStringFilter"
              }
            ],
            "description": "Filter By Unique ID"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchIdentitiesRequestSchema": {
        "title": "SearchIdentitiesRequestSchema",
        "type": "object",
        "properties": {
          "sort": {
            "title": "Sort",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSchema_SearchIdentitiesSortFields_"
            },
            "description": "Sort"
          },
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationRequestSchema"
              }
            ],
            "description": "Pagination"
          },
          "expand": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityExpansion"
            },
            "description": "Expand Fields"
          },
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchIdentitiesFilterBody"
              }
            ],
            "description": "Search Identities Filter"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchIdentitiesSortFields": {
        "title": "SearchIdentitiesSortFields",
        "enum": [
          "name"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SearchIncidentsFilter": {
        "title": "SearchIncidentsFilter",
        "type": "object",
        "properties": {
          "createdAt": {
            "title": "Createdat",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseDateFilter"
              }
            ],
            "description": "Created At date"
          },
          "updatedAt": {
            "title": "Updatedat",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseDateFilter"
              }
            ],
            "description": "Updated At date"
          },
          "severity": {
            "title": "Severity",
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicEnumFilter_IncidentSeverity_"
              }
            ],
            "description": "Severity"
          },
          "status": {
            "title": "Status",
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicEnumFilter_IncidentStatus_"
              }
            ],
            "description": "Status"
          },
          "policyId": {
            "title": "Policyid",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseSingleValuedStringFilter"
              }
            ],
            "description": "Policy Id "
          },
          "policyTemplateId": {
            "title": "Policytemplateid",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseSingleValuedStringFilter"
              }
            ],
            "description": "Policy Template ID"
          },
          "isResolved": {
            "title": "Isresolved",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseBooleanFilter"
              }
            ],
            "description": "Is resolved?"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchIncidentsRequestSchema": {
        "title": "SearchIncidentsRequestSchema",
        "type": "object",
        "properties": {
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchIncidentsFilter"
              }
            ],
            "description": "Filter"
          },
          "expand": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentExpansion"
            },
            "description": "Expend"
          },
          "sort": {
            "title": "Sort",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSchema_SearchIncidentsSortFields_"
            },
            "description": "Sort"
          },
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationRequestSchema"
              }
            ],
            "description": "Pagination"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchIncidentsSortFields": {
        "title": "SearchIncidentsSortFields",
        "enum": [
          "createdAt",
          "updatedAt",
          "severity",
          "status",
          "isResolved"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "Selection": {
        "title": "Selection",
        "enum": [
          "keep",
          "revoke",
          "null"
        ],
        "description": "An enumeration."
      },
      "SortOrder": {
        "title": "SortOrder",
        "enum": [
          "ASC",
          "DESC"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SortSchema_FieldName_": {
        "title": "SortSchema[FieldName]",
        "required": [
          "fieldName"
        ],
        "type": "object",
        "properties": {
          "fieldName": {
            "title": "FieldName",
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldName"
              }
            ],
            "description": "Sort By Field Name"
          },
          "order": {
            "title": "Order",
            "allOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              }
            ],
            "description": "Sort Order",
            "default": "ASC"
          }
        },
        "additionalProperties": false
      },
      "SortSchema_SearchAccountsSortFields_": {
        "title": "SortSchema[SearchAccountsSortFields]",
        "required": [
          "fieldName"
        ],
        "type": "object",
        "properties": {
          "fieldName": {
            "title": "FieldName",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchAccountsSortFields"
              }
            ],
            "description": "Sort By Field Name"
          },
          "order": {
            "title": "Order",
            "allOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              }
            ],
            "description": "Sort Order",
            "default": "ASC"
          }
        },
        "additionalProperties": false
      },
      "SortSchema_SearchAssetsSortFields_": {
        "title": "SortSchema[SearchAssetsSortFields]",
        "required": [
          "fieldName"
        ],
        "type": "object",
        "properties": {
          "fieldName": {
            "title": "FieldName",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchAssetsSortFields"
              }
            ],
            "description": "Sort By Field Name"
          },
          "order": {
            "title": "Order",
            "allOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              }
            ],
            "description": "Sort Order",
            "default": "ASC"
          }
        },
        "additionalProperties": false
      },
      "SortSchema_SearchIdentitiesSortFields_": {
        "title": "SortSchema[SearchIdentitiesSortFields]",
        "required": [
          "fieldName"
        ],
        "type": "object",
        "properties": {
          "fieldName": {
            "title": "FieldName",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchIdentitiesSortFields"
              }
            ],
            "description": "Sort By Field Name"
          },
          "order": {
            "title": "Order",
            "allOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              }
            ],
            "description": "Sort Order",
            "default": "ASC"
          }
        },
        "additionalProperties": false
      },
      "SortSchema_SearchIncidentsSortFields_": {
        "title": "SortSchema[SearchIncidentsSortFields]",
        "required": [
          "fieldName"
        ],
        "type": "object",
        "properties": {
          "fieldName": {
            "title": "FieldName",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchIncidentsSortFields"
              }
            ],
            "description": "Sort By Field Name"
          },
          "order": {
            "title": "Order",
            "allOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              }
            ],
            "description": "Sort Order",
            "default": "ASC"
          }
        },
        "additionalProperties": false
      },
      "SourceAppSchema": {
        "title": "SourceAppSchema",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique ID"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name"
          }
        }
      },
      "StringFilter": {
        "title": "StringFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "title": "$Eq",
            "type": "string",
            "description": "Equals To"
          },
          "$ne": {
            "title": "$Ne",
            "type": "string",
            "description": "Not Equals"
          },
          "$in": {
            "title": "$In",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "In"
          },
          "$nin": {
            "title": "$Nin",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Not In"
          },
          "$ends": {
            "title": "$Ends",
            "type": "string",
            "description": "Ends With"
          },
          "$begins": {
            "title": "$Begins",
            "type": "string",
            "description": "Begins With"
          },
          "$contains": {
            "title": "$Contains",
            "type": "string",
            "description": "Text Contains"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "UpdateIncidentRequestSchema": {
        "title": "UpdateIncidentRequestSchema",
        "type": "object",
        "properties": {
          "assigneeId": {
            "title": "Assigneeid",
            "type": "string",
            "description": "ID of the entity assigned to this incident."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IncidentStatus"
              }
            ],
            "description": "The status of the incident (Open, InProgress, WaitingForInput, or Closed)."
          },
          "severity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IncidentSeverity"
              }
            ],
            "description": "The severity of the incident (Low, Medium, High or Critical)."
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "authomize__connectors_rest_api__app__routes_schema__account_schema__UserSchema": {
        "title": "UserSchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "User's Account ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The user ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username\n"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's email address."
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "User status must be: `Deleted`, `Disabled`, `Enabled`, `Staged`, `Suspended`, or `Unknown`.\n"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the user.\n"
          },
          "isExternal": {
            "title": "Isexternal",
            "type": "boolean",
            "description": "Account is external to Authomize.\nMust be either `true` or `false`.\n",
            "default": false
          },
          "hasMFA": {
            "title": "Hasmfa",
            "type": "boolean",
            "description": "Has Multi-Factor Authentication enabled.\nMust be either `true` or `false`.\n"
          },
          "lastLoginAt": {
            "title": "Lastloginat",
            "type": "string",
            "description": "The last login date in ISO 8601 format.\n",
            "format": "date-time"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "User schema"
      },
      "authomize__connectors_rest_api__app__routes_schema__assets_schema__AssetSchema": {
        "title": "AssetSchema",
        "required": [
          "uniqueId",
          "name"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Asset ID. **Mandatory, must be unique.**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The asset ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The name of the asset. The default is the Asset ID. **Mandatory**\n"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetType"
              }
            ],
            "description": "The asset types that are supported by Authomize **Mandatory**\n\nPermitted values:\n\n   •\t`Application` (federation) \n   •\t`Database`\n   •\t`Drive`\n   •\t`File`\n   •\t`Folder`\n   •\t`GitRepository`\n   •\t`Integration`\n   •\t`Project`\n   •\t`Site`\n   •\t`Table`\n   •\t`Ticket`\n   •\t`VirtualMachine`\n   •\t`Other`\n\nIf the asset type does not exist use `Other`.\n",
            "default": "Other"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The asset type in the source system.\nThe default is the canonical type (if not mentioned).\n"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "The date (in ISO 8601 format) that the asset was created.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "lastUsedAt": {
            "title": "Lastusedat",
            "type": "string",
            "description": "The date (in ISO 8601 format) of the last time that the asset was in use.\nThe default is `null`.\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A description of the asset (up to 512 characters).\n"
          },
          "href": {
            "title": "Href",
            "type": "string",
            "description": "A link to the asset in the source system.\n"
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The owner ID"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Tags associated with the asset.\n"
          }
        },
        "description": "Asset schema"
      },
      "authomize__connectors_rest_api__app__routes_schema__identity_schema__IdentitySchema": {
        "title": "IdentitySchema",
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "minLength": 1,
            "type": "string",
            "description": "Identity ID **Mandatory**\n"
          },
          "originId": {
            "title": "Originid",
            "minLength": 1,
            "type": "string",
            "description": "The identity ID in the source system.\nAs opposed to `uniqueId`, it's not mandatory and can be non-unique\n"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Username"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User's work email address.\n"
          },
          "personalEmail": {
            "title": "Personalemail",
            "type": "string",
            "description": "User's personal email address.\n"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "User's first name\n"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name.\n"
          },
          "employeeNumber": {
            "title": "Employeenumber",
            "type": "string",
            "description": "Employee number"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "The user status must be one of the following: `Deleted`, `Disabled`, `Enabled`, `Staged` or `Suspended`.\n"
          },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Country"
          },
          "city": {
            "title": "City",
            "type": "string",
            "description": "City"
          },
          "department": {
            "title": "Department",
            "type": "string",
            "description": "The identity's department in the organization.\n"
          },
          "division": {
            "title": "Division",
            "type": "string",
            "description": "The identity's division in their organization.\n"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The user's job title.\n"
          },
          "managerId": {
            "title": "Managerid",
            "type": "string",
            "description": "The manager identity's ID.\n"
          },
          "hireAt": {
            "title": "Hireat",
            "type": "string",
            "description": "The user's first day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "terminationAt": {
            "title": "Terminationat",
            "type": "string",
            "description": "The user's last day of work (in ISO 8601 format).\n",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Additional description of the identity.\n"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "One or more tags on the user account.\n"
          }
        },
        "description": "Identity schema"
      },
      "authomize__connectors_rest_api__app__routes_schema__status_schema__IsAliveResponse": {
        "title": "IsAliveResponse",
        "required": [
          "isAlive"
        ],
        "type": "object",
        "properties": {
          "isAlive": {
            "title": "Isalive",
            "type": "boolean",
            "description": "**isAlive**"
          }
        }
      },
      "authomize__connectors_rest_api__app__routes_schema__status_schema__MeResponse": {
        "title": "MeResponse",
        "required": [
          "version",
          "id",
          "tenant"
        ],
        "type": "object",
        "properties": {
          "version": {
            "title": "Version",
            "type": "string",
            "description": "**version**"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "**id**"
          },
          "tenant": {
            "title": "Tenant",
            "type": "string",
            "description": "**tenant**"
          }
        }
      },
      "authomize__external_rest_api__app__routes_schema__inventory__AssetSchema": {
        "title": "AssetSchema",
        "required": [
          "id",
          "object",
          "name",
          "type",
          "sourceAppId",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique ID"
          },
          "object": {
            "title": "Object",
            "enum": [
              "asset"
            ],
            "description": "Type of entity (here `asset`)"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name"
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Type"
          },
          "sourceAppId": {
            "title": "Sourceappid",
            "type": "string",
            "description": "Source App ID"
          },
          "sourceApp": {
            "title": "Sourceapp",
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceAppSchema"
              }
            ],
            "description": "Source App"
          },
          "tagIds": {
            "title": "Tagids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tag IDs",
            "default": []
          },
          "href": {
            "title": "Href",
            "type": "string",
            "description": "HREF"
          },
          "isDeleted": {
            "title": "Isdeleted",
            "type": "boolean",
            "description": "HREF"
          }
        }
      },
      "authomize__external_rest_api__app__routes_schema__inventory__IdentitySchema": {
        "title": "IdentitySchema",
        "required": [
          "id",
          "object",
          "name",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique ID"
          },
          "object": {
            "title": "Object",
            "enum": [
              "identity"
            ],
            "description": "Type of entity (here `identity`)"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of Identity"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "Title"
          },
          "department": {
            "title": "Department",
            "type": "string",
            "description": "Department"
          },
          "tagIds": {
            "title": "Tagids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags",
            "default": []
          },
          "accountIds": {
            "title": "Accountids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of associated account IDs",
            "default": []
          },
          "isDeleted": {
            "title": "Isdeleted",
            "type": "boolean",
            "description": "Is Deleted"
          },
          "accounts": {
            "title": "Accounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountSchema"
            },
            "description": "List of associated accounts",
            "default": []
          }
        }
      },
      "authomize__external_rest_api__app__routes_schema__status__IsAliveResponse": {
        "title": "IsAliveResponse",
        "required": [
          "isAlive"
        ],
        "type": "object",
        "properties": {
          "isAlive": {
            "title": "Isalive",
            "type": "boolean",
            "description": "**isAlive**"
          }
        }
      },
      "authomize__external_rest_api__app__routes_schema__status__MeResponse": {
        "title": "MeResponse",
        "required": [
          "id",
          "tenant"
        ],
        "type": "object",
        "properties": {
          "version": {
            "title": "Version",
            "type": "string",
            "description": "**version**",
            "default": "3.1.5"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "**id**"
          },
          "tenant": {
            "title": "Tenant",
            "type": "string",
            "description": "**tenant**"
          }
        }
      },
      "authomize__external_rest_api__app__routes_schema__users__UserSchema": {
        "title": "UserSchema",
        "required": [
          "userId",
          "userFirstName",
          "userLastName",
          "userEmail"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "title": "Userid",
            "type": "string",
            "description": "Unique ID"
          },
          "userFirstName": {
            "title": "Userfirstname",
            "type": "string",
            "description": "First Name"
          },
          "userLastName": {
            "title": "Userlastname",
            "type": "string",
            "description": "Last Name"
          },
          "userEmail": {
            "title": "Useremail",
            "type": "string",
            "description": "Email"
          }
        }
      }
    },
    "securitySchemes": {
      "RestAPIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  },
  "tags": [
    {
      "name": "Status",
      "description": "The status of the API.\n"
    },
    {
      "name": "Incident",
      "description": "The Incidents APIs enable you to pull Authomize-generated incidents from Authomize into your automated Incident Response system. Once you have responded to the incident you can use Authomize Incident APIs to update (and synchronize) the incident on Authomize."
    },
    {
      "name": "Campaign",
      "description": "Campaign APIs enable you to pull all the decisions from the campaign (keep or revoke) and to automate the revocation process to remove unnecessary permissions.\nCampaign APIs also enable you to pull basic details on the campaigns and to pull a list of all campaigns.\n"
    },
    {
      "name": "Apps",
      "description": "The Apps APIs are used for application level actions such as geting file templates and deleting application data.\n"
    },
    {
      "name": "Accounts",
      "description": "Each account is associated with a specific application.\nAccount APIs are used to find, create and edit account data.\n"
    },
    {
      "name": "Access",
      "description": "Access is a way to relate between accounts, roles and assets.\nAccess APIs can be used to get a list of groups (including the users in each group), to create groups and to edit groups."
    },
    {
      "name": "Privileges",
      "description": "The Privileges APIs are used to get, create and edit privileges that enable access to assets."
    },
    {
      "name": "Association",
      "description": "Association APIs can be used to search and create account associations and group associations. "
    },
    {
      "name": "Assets",
      "description": "The Assets API is used to get, create and edit assets (files, folders, drives, applications ...)."
    },
    {
      "name": "Identities",
      "description": "The Identities APIs are used for getting, creating and editing Identities."
    }
  ]
}
