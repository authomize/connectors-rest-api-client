{
  "openapi": "3.0.2",
  "info": {
    "title": "Authomize API Reference",
    "description": "Authomize enables users to integrate your applications with Authomize via custom connectors.\n\nYou can use the APIs described in this document to create your connector.\n\nOnce data is uploaded and processed successfully, your custom connector will function in the same way as the connectors created by Authomize.\n\n## How does Authomize work?\nAuthomize works by gathering information about:\n\n· individuals, teams and functions.\n\n· apps, assets and accounts.\n\n· all the relationships between them.\n\n![img.png](https://storagetry1.blob.core.windows.net/public/78d82650-71b0-4909-8444-022aab79add5.png)\n\n## Connector APIs\n\nAuthomize connector APIs enable pushing data into Authomize from external sources.\n\nThese APIs enable data extracted from outside applications (via application APIs) to be delivered to Authomize.\n\nA connector processes extracted application data to transform it into a format compatible with Authomize.\n\n![img_1.png](https://storagetry1.blob.core.windows.net/public/341bf6ef-2e5b-4284-b715-45105ffbf0f8.png)\n\n## Authentication\nTo Authenticate use the API Token, with the format: `Authorization: API_Token`.\n\nAn API Token is a token you provide when making API calls. \n\n\nThe API Token should be included in every request to the API in an `Authorization` header.\n```\ncurl -v -X POST \\n\n     -H \"Authorization: {API_Token}\" \\n\n     ...\n```\n\n## Limits\nRequests cannot exceed a size of 1MB.\n",
    "version": "4.5.0",
    "x-logo": {
      "url": "https://static.authomize.com/public/icons/authomize-green.svg"
    }
  },
  "paths": {
    "/is_alive": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Is Alive",
        "description": "Service status.\n",
        "operationId": "is_alive_is_alive_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsAliveResponse"
                }
              }
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Me",
        "description": "Returns the user_id and tenant related to the API key and the current API version.\n",
        "operationId": "me_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/incidents/{incident_id}": {
      "get": {
        "tags": [
          "Incident"
        ],
        "summary": "Retrieve Incident",
        "description": "The Retrieve Incident API fetches a particular incident and all its details.",
        "operationId": "retrieve_incident_v2_incidents__incident_id__get",
        "parameters": [
          {
            "description": "Unique id",
            "required": true,
            "schema": {
              "title": "Incident Id",
              "type": "string",
              "description": "Unique id"
            },
            "name": "incident_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IncidentExpansion"
              }
            },
            "name": "expand",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonPaginatedResponseSchema_IncidentSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Incident"
        ],
        "summary": "Patch Incident",
        "description": "The Patch Incident API updates an existing incident (based on incident ID).",
        "operationId": "patch_incident_v2_incidents__incident_id__patch",
        "parameters": [
          {
            "description": "Unique id of the incident.",
            "required": true,
            "schema": {
              "title": "Incident Id",
              "type": "string",
              "description": "Unique id of the incident."
            },
            "name": "incident_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIncidentRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonPaginatedResponseSchema_IncidentSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/incidents/search": {
      "post": {
        "tags": [
          "Incident"
        ],
        "summary": "Search Incidents",
        "description": "The Search Incidents API lists incidents and related data.",
        "operationId": "search_incidents_v2_incidents_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchIncidentsRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseSchema_IncidentSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/incidents/{incident_id}/comments": {
      "post": {
        "tags": [
          "Incident"
        ],
        "summary": "Post Incident Comment",
        "description": "The Post Incident Comment API adds a comment to a particular incident (based on incident ID).",
        "operationId": "post_incident_comment_v2_incidents__incident_id__comments_post",
        "parameters": [
          {
            "description": "Unique id of comment.",
            "required": true,
            "schema": {
              "title": "Incident Id",
              "type": "string",
              "description": "Unique id of comment."
            },
            "name": "incident_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddIncidentCommentRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonPaginatedResponseSchema_CommentSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/incidents/{incident_id}/extended": {
      "get": {
        "tags": [
          "Incident"
        ],
        "summary": "Retrieve Incidents Extended",
        "operationId": "retrieve_incidents_extended_v2_incidents__incident_id__extended_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Incident Id",
              "type": "string"
            },
            "name": "incident_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/campaigns/{campaign_id}": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Retrieve Campaign",
        "description": "After a campaign is created it can go through several stages:\n\"draft\", \"initialization\", \"running\", \"completed\", \"failed\", \"empty\" and \"overdue\"\n\nUsing the Retrieve Campaign API you can get details about the campaign (such as its status, the date the campaign was launched, the campaign owner and more) based on the unique campaign id.",
        "operationId": "retrieve_campaign_v2_campaigns__campaign_id__get",
        "parameters": [
          {
            "description": "Unique ID",
            "required": true,
            "schema": {
              "title": "Campaign Id",
              "type": "string",
              "description": "Unique ID"
            },
            "name": "campaign_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CampaignExpansion"
              }
            },
            "name": "expand",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonPaginatedResponseSchema_CampaignSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/campaigns/search": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Search Campaigns",
        "description": "The Search Campaigns API is used to retrieve a list of all campaigns. \nYou can filter the campaign list by status.\n",
        "operationId": "search_campaigns_v2_campaigns_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCampaignsRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseSchema_CampaignSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/campaigns": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Create Campaign",
        "description": "Create campaign",
        "operationId": "create_campaign_v2_campaigns_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCampaignRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCampaignResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/campaigns/{campaign_id}/reviewers/{reviewer_id}": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Retrieve Campaign Reviewer",
        "description": "The Retrieve Campaign Reviewer API is used to retrieve campaign data about a specific campaign and reviewer.",
        "operationId": "retrieve_campaign_reviewer_v2_campaigns__campaign_id__reviewers__reviewer_id__get",
        "parameters": [
          {
            "description": "Unique ID of the Campaign",
            "required": true,
            "schema": {
              "title": "Campaign Id",
              "type": "string",
              "description": "Unique ID of the Campaign"
            },
            "name": "campaign_id",
            "in": "path"
          },
          {
            "description": "Unique ID of the Reviewer",
            "required": true,
            "schema": {
              "title": "Reviewer Id",
              "type": "string",
              "description": "Unique ID of the Reviewer"
            },
            "name": "reviewer_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReviewerExpansion"
              }
            },
            "name": "expand",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonPaginatedResponseSchema_ReviewerSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/campaigns/{campaign_id}/report/search": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Search Campaign Report",
        "description": "The API is used to list all permissions that were reviewed in an access review campaign with their decisions keep or revoke.\n",
        "operationId": "search_campaign_report_v2_campaigns__campaign_id__report_search_post",
        "parameters": [
          {
            "description": "Unique ID of the Campaign",
            "required": true,
            "schema": {
              "title": "Campaign Id",
              "type": "string",
              "description": "Unique ID of the Campaign"
            },
            "name": "campaign_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCampaignPermissionsRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseSchema_CampaignsPermissionSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/inventory/sourceApps": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Search Source Apps",
        "description": "Get a list of all source app names and their IDs",
        "operationId": "search_source_apps_v2_inventory_sourceApps_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonPaginatedResponseSchema_SearchSourceAppsResponseSchema_"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/inventory/accounts/search": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Search Accounts",
        "description": "Find specific accounts on Authomize and get related data such as ID, status and more",
        "operationId": "search_accounts_v2_inventory_accounts_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchAccountsRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseSchema_AccountSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/inventory/assets/search": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Search Assets",
        "description": "Find specific assets on Authomize and get related data (as found on the asset’s Single Entity page)",
        "operationId": "search_assets_v2_inventory_assets_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchAssetsRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseSchema_AssetSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/inventory/groups/search": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Search Groups",
        "description": "Find specific groups on Authomize and get related data (as found on the group’s Single Entity page)",
        "operationId": "search_groups_v2_inventory_groups_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchGroupsRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseSchema_GroupSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/inventory/identities/search": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Search Identities",
        "description": "Find specific identities on Authomize and get related data (as found on Identity Single Entity page). Search by email address or AuthomizeID.",
        "operationId": "search_identities_v2_inventory_identities_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchIdentitiesRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseSchema_IdentitySchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/inventory/identities/risk": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Add Identity Risks",
        "description": "The API adds custom risk score for the Identity and all of his associated accounts.",
        "operationId": "add_identity_risks_v2_inventory_identities_risk_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddIdentityRisksRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Inventory"
        ],
        "summary": "Remove Identity Risks",
        "description": "The API is used to delete the risk factors that were added via the `Add Identity Risk` API.",
        "operationId": "remove_identity_risks_v2_inventory_identities_risk_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveIdentityRisksRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccountExpansion": {
        "title": "AccountExpansion",
        "enum": [
          "identity",
          "sourceApp",
          "tags",
          "riskScores"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AccountRiskScore": {
        "title": "AccountRiskScore",
        "type": "object",
        "properties": {
          "blastRadiusRiskScore": {
            "title": "Blastradiusriskscore",
            "type": "integer",
            "description": "Blast Radius Risk Score"
          },
          "takeoverRiskScore": {
            "title": "Takeoverriskscore",
            "type": "integer",
            "description": "Takeover Risk Score"
          },
          "overallRiskScore": {
            "title": "Overallriskscore",
            "type": "integer",
            "description": "Overall Risk Score"
          }
        }
      },
      "AccountSchema": {
        "title": "AccountSchema",
        "required": [
          "authomizeId",
          "type",
          "isExternal"
        ],
        "type": "object",
        "properties": {
          "authomizeId": {
            "title": "Authomizeid",
            "type": "string",
            "description": "Authomize ID of the account"
          },
          "originId": {
            "title": "Originid",
            "type": "string",
            "description": "The identifier of the account from the source system."
          },
          "uniqueId": {
            "title": "Uniqueid",
            "type": "string",
            "description": "Unique ID is an identifier coming from the connector that is unique across all accounts coming from that connector"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of account"
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Type of account"
          },
          "isExternal": {
            "title": "Isexternal",
            "type": "boolean",
            "description": "Is account external (Yes or No)"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email address of account"
          },
          "identity": {
            "title": "Identity",
            "allOf": [
              {
                "$ref": "#/components/schemas/RawIdentitySchema"
              }
            ],
            "description": "Associated Identity"
          },
          "sourceApp": {
            "title": "Sourceapp",
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceAppSchema"
              }
            ],
            "description": "Associated source app "
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "First name of account"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "Last name of account"
          },
          "isAdmin": {
            "title": "Isadmin",
            "type": "boolean",
            "description": "Is the account an admin account (Yes or No)"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "The account status"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The account description"
          },
          "hasMfa": {
            "title": "Hasmfa",
            "type": "boolean",
            "description": "Does the account have MFA enabled (Yes or No)"
          },
          "lastLoginAt": {
            "title": "Lastloginat",
            "type": "string",
            "description": "Account Last Logged date"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSchema"
            },
            "description": "Tags associated with the account.",
            "default": []
          },
          "riskScore": {
            "title": "Riskscore",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountRiskScore"
              }
            ],
            "description": "Risk Scores for the Account."
          }
        }
      },
      "AccountSourceAppIdFilter": {
        "title": "AccountSourceAppIdFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "title": "$Eq",
            "type": "string",
            "description": "Equals To"
          }
        },
        "additionalProperties": false
      },
      "AddIdentityRisksRequestSchema": {
        "title": "AddIdentityRisksRequestSchema",
        "required": [
          "risks"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchIdentitiesFilterBody"
              }
            ],
            "description": "Search filter options"
          },
          "risks": {
            "title": "Risks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskFactorIn"
            },
            "description": "List of risks to add to the identity"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "AddIncidentCommentRequestSchema": {
        "title": "AddIncidentCommentRequestSchema",
        "required": [
          "content"
        ],
        "type": "object",
        "properties": {
          "content": {
            "title": "Content",
            "maxLength": 1025,
            "type": "string",
            "description": "Content of comment."
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "AicpaTsc2017": {
        "title": "AicpaTsc2017",
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AicpaTsc2017Standard"
            },
            "description": "Values"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "UniqueID",
            "default": "aicpaTsc2017"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name",
            "default": "SOC 2 (TSC 2017)"
          }
        }
      },
      "AicpaTsc2017Standard": {
        "title": "AicpaTsc2017Standard",
        "enum": [
          "CC1.1",
          "CC6.3",
          "CC5.1",
          "CC5.3",
          "CC6.1",
          "CC6.2",
          "CC6.7",
          "CC6.6",
          "CC3.2",
          "CC3.3",
          "CC3.4"
        ],
        "description": "An enumeration."
      },
      "AlertCategoryType": {
        "title": "AlertCategoryType",
        "enum": [
          "Change Management",
          "Misconfiguration",
          "Exposure",
          "Privileged Access",
          "Suspicious Behavior",
          "Least Privilege",
          "Custom",
          "IAM Infrastructure Security",
          "Account Takeover Protection",
          "Stale Access",
          "Initial Access",
          "Over-privileges",
          "Privilege Escalation",
          "Lateral Movement",
          "Detection",
          "Persistence",
          "Evasion",
          "Account Takeover",
          "Account Impersonation (PE, LM)"
        ],
        "description": "An enumeration."
      },
      "AppIdFilter": {
        "title": "AppIdFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "title": "$Eq",
            "type": "string",
            "description": "Equals To"
          }
        },
        "additionalProperties": false
      },
      "AssetExpansion": {
        "title": "AssetExpansion",
        "enum": [
          "sourceApp",
          "tags"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AssetIdFilter": {
        "title": "AssetIdFilter",
        "type": "object",
        "properties": {
          "$in": {
            "title": "$In",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "AssetSchema": {
        "title": "AssetSchema",
        "required": [
          "authomizeId"
        ],
        "type": "object",
        "properties": {
          "authomizeId": {
            "title": "Authomizeid",
            "type": "string",
            "description": "Authomize ID of source application"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the asset (for example, application, virtual machine, file, etc.)"
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Type of asset"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "The type of asset on the source system"
          },
          "sourceApp": {
            "title": "Sourceapp",
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceAppSchema"
              }
            ],
            "description": "The source application of the asset"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "The date (in ISO 8601 format) that the asset was created\n",
            "format": "date-time"
          },
          "lastUsedAt": {
            "title": "Lastusedat",
            "type": "string",
            "description": "The date (in ISO 8601 format) of the last time that the asset was in use."
          },
          "href": {
            "title": "Href",
            "type": "string",
            "description": "A link to the asset in the source application"
          },
          "uniqueId": {
            "title": "Uniqueid",
            "type": "string",
            "description": "The unique ID of the asset (as provided by the connector)"
          },
          "originId": {
            "title": "Originid",
            "type": "string",
            "description": "The ID of the asset on the source system"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A description of the asset"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSchema"
            },
            "description": "List of tags associated with the asset",
            "default": []
          },
          "incidentsCount": {
            "title": "Incidentscount",
            "type": "integer",
            "description": "Number of associated incidents"
          }
        }
      },
      "AttackTacticType": {
        "title": "AttackTacticType",
        "enum": [
          "Collection",
          "Credential Access",
          "Defense Evasion",
          "Discovery",
          "Exfiltration",
          "Impact",
          "Initial Access",
          "Lateral Movement",
          "Persistence",
          "Privilege Escalation"
        ],
        "description": "An enumeration."
      },
      "BlastRadiusRiskFilter": {
        "title": "BlastRadiusRiskFilter",
        "type": "object",
        "properties": {
          "$in": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskSeverity"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "CampaignExpansion": {
        "title": "CampaignExpansion",
        "enum": [
          "owner"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "CampaignPermissionDecisionFilter": {
        "title": "CampaignPermissionDecisionFilter",
        "type": "object",
        "properties": {
          "$in": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Selection"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "CampaignPermissionsSearchFilterBody": {
        "title": "CampaignPermissionsSearchFilterBody",
        "type": "object",
        "properties": {
          "decision": {
            "title": "Decision",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignPermissionDecisionFilter"
              }
            ],
            "description": "Reviewer decisions (keep, revoke, change or null).\n"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "CampaignSchema": {
        "title": "CampaignSchema",
        "required": [
          "id",
          "name",
          "status",
          "startDate",
          "endDate",
          "createdAt",
          "ownerUserId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique ID of campaign"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the campaign"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignStatus"
              }
            ],
            "description": "The campaign status"
          },
          "startDate": {
            "title": "Startdate",
            "type": "string",
            "description": "Date when the campaign starts",
            "format": "date-time"
          },
          "endDate": {
            "title": "Enddate",
            "type": "string",
            "description": "Date when campaign ends",
            "format": "date-time"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "Time of creation of campaign",
            "format": "date-time"
          },
          "ownerUserId": {
            "title": "Owneruserid",
            "type": "string",
            "description": "User ID of the campaign owner"
          },
          "owner": {
            "title": "Owner",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSchema"
              }
            ],
            "description": "User Schema of the campaign owner"
          }
        },
        "description": "Schema for single campaign response data"
      },
      "CampaignSearchFilterBody": {
        "title": "CampaignSearchFilterBody",
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignStatusFilter"
              }
            ],
            "description": "Enum: \"draft\" \"initializing\" \"running\" \"completed\" \"failed\" \"empty\" \"overdue\"\n"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "CampaignStatus": {
        "title": "CampaignStatus",
        "enum": [
          "draft",
          "initializing",
          "running",
          "completed",
          "failed",
          "empty",
          "overdue"
        ],
        "description": "An enumeration."
      },
      "CampaignStatusFilter": {
        "title": "CampaignStatusFilter",
        "type": "object",
        "properties": {
          "$in": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignStatus"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "CampaignsPermissionAccountSchema": {
        "title": "CampaignsPermissionAccountSchema",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Account ID."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the account."
          },
          "uniqueId": {
            "title": "Uniqueid",
            "type": "string",
            "description": "Account ID (unique)."
          },
          "isExternal": {
            "title": "Isexternal",
            "type": "boolean",
            "description": "Whether the account is external or not."
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Account type."
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email of the account."
          },
          "status": {
            "title": "Status",
            "type": "string",
            "description": "Account status."
          },
          "distinctIdentity": {
            "title": "Distinctidentity",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignsPermissionDistinctIdentitySchema"
              }
            ],
            "description": "Distinct identity of the account."
          },
          "sourceApp": {
            "title": "Sourceapp",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignsPermissionSourceAppSchema"
              }
            ],
            "description": "Source app of the account."
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignsPermissionTagSchema"
            },
            "description": "Account tags.",
            "default": []
          }
        }
      },
      "CampaignsPermissionAssetSchema": {
        "title": "CampaignsPermissionAssetSchema",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Asset ID."
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Asset type."
          },
          "externalType": {
            "title": "Externaltype",
            "type": "string",
            "description": "External type of the asset."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the asset."
          },
          "sourceApp": {
            "title": "Sourceapp",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignsPermissionSourceAppSchema"
              }
            ],
            "description": "Source app of the asset."
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignsPermissionTagSchema"
            },
            "description": "Asset tags.",
            "default": []
          }
        }
      },
      "CampaignsPermissionDistinctIdentitySchema": {
        "title": "CampaignsPermissionDistinctIdentitySchema",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Distinct identity ID."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the distinct identity."
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "Distinct identity title."
          },
          "department": {
            "title": "Department",
            "type": "string",
            "description": "Department of the distinct identity."
          }
        }
      },
      "CampaignsPermissionGroupSchema": {
        "title": "CampaignsPermissionGroupSchema",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Group ID."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Group name."
          },
          "sourceApp": {
            "title": "Sourceapp",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignsPermissionSourceAppSchema"
              }
            ],
            "description": "Source app of the group."
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignsPermissionTagSchema"
            },
            "description": "Group tags.",
            "default": []
          }
        }
      },
      "CampaignsPermissionPrivilegeSchema": {
        "title": "CampaignsPermissionPrivilegeSchema",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Privilege Id."
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "Origin type of the privilege."
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Privilege type."
          },
          "sourceApp": {
            "title": "Sourceapp",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignsPermissionSourceAppSchema"
              }
            ],
            "description": "Source app of the privilege."
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignsPermissionTagSchema"
            },
            "description": "Privilege tags.",
            "default": []
          }
        }
      },
      "CampaignsPermissionSchema": {
        "title": "CampaignsPermissionSchema",
        "required": [
          "campaignId",
          "campaignName"
        ],
        "type": "object",
        "properties": {
          "campaignId": {
            "title": "Campaignid",
            "type": "string",
            "description": "Campaign ID.\n"
          },
          "campaignName": {
            "title": "Campaignname",
            "type": "string",
            "description": "Campaign name.\n"
          },
          "reviewer": {
            "title": "Reviewer",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReviewerSchema"
              }
            ],
            "description": "Details of the reviewer.\n"
          },
          "selection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementSelections"
              }
            ],
            "description": "Reviewer decisions (keep, revoke, change or null).\n"
          },
          "reason": {
            "title": "Reason",
            "type": "string",
            "description": "Reviewer decision for keeping or revoking or requesting permission change for the reviewed access.  \n"
          },
          "account": {
            "title": "Account",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignsPermissionAccountSchema"
              }
            ],
            "description": "Account that their access was reviewed. \n"
          },
          "asset": {
            "title": "Asset",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignsPermissionAssetSchema"
              }
            ],
            "description": "Asset that the access to was reviewed."
          },
          "group": {
            "title": "Group",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignsPermissionGroupSchema"
              }
            ],
            "description": "Group that the access to was reviewed."
          },
          "privilege": {
            "title": "Privilege",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignsPermissionPrivilegeSchema"
              }
            ],
            "description": "Privilege that was reviewed. \n"
          }
        }
      },
      "CampaignsPermissionSourceAppSchema": {
        "title": "CampaignsPermissionSourceAppSchema",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Source app ID."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Source app name."
          },
          "sourceAppType": {
            "title": "Sourceapptype",
            "type": "string",
            "description": "Source app type."
          }
        }
      },
      "CampaignsPermissionTagSchema": {
        "title": "CampaignsPermissionTagSchema",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Tag ID."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the tag."
          }
        }
      },
      "Ccm301": {
        "title": "Ccm301",
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ccm301Standard"
            },
            "description": "Values"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "UniqueID",
            "default": "ccm301"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name",
            "default": "CSA STAR (CCM 3.0.1)"
          }
        }
      },
      "Ccm301Standard": {
        "title": "Ccm301Standard",
        "enum": [
          "AIS-04",
          "IAM-01",
          "IAM-02",
          "IAM-03",
          "IAM-04",
          "IAM-05",
          "IAM-06",
          "IAM-07",
          "IAM-08",
          "IAM-09",
          "IAM-10",
          "IAM-11",
          "IAM-12",
          "IAM-13",
          "GRM-06",
          "IVS-06",
          "IVS-08",
          "DSI-04"
        ],
        "description": "An enumeration."
      },
      "Ccm402": {
        "title": "Ccm402",
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ccm402Standard"
            },
            "description": "Values"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "UniqueID",
            "default": "ccm402"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name",
            "default": "CSA STAR (CCM 4.0.2)"
          }
        }
      },
      "Ccm402Standard": {
        "title": "Ccm402Standard",
        "enum": [
          "IAM-01",
          "IAM-02",
          "IAM-03",
          "IAM-04",
          "IAM-05",
          "IAM-06",
          "IAM-07",
          "IAM-08",
          "IAM-09",
          "IAM-10",
          "IAM-11",
          "IAM-12",
          "IAM-13",
          "IAM-14",
          "IAM-15",
          "IAM-16",
          "IVS-03",
          "IVS-04",
          "DSP-07",
          "DSP-08",
          "DSP-10",
          "AIS-03",
          "DSP-17",
          "DSP-01",
          "HRS-05"
        ],
        "description": "An enumeration."
      },
      "CisV8Standard": {
        "title": "CisV8Standard",
        "enum": [
          "3.1",
          "3.3",
          "6.8",
          "5.4",
          "12.7",
          "6.5",
          "6.2",
          "5.3",
          "12.2",
          "6.1",
          "5.1",
          "4.11",
          "13.4",
          "13.9",
          "13.10"
        ],
        "description": "An enumeration."
      },
      "Cisv8": {
        "title": "Cisv8",
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CisV8Standard"
            },
            "description": "Values"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "UniqueID",
            "default": "cisv8"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name",
            "default": "CIS v.8"
          }
        }
      },
      "CommentSchema": {
        "title": "CommentSchema",
        "required": [
          "id",
          "content"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique ID of comment."
          },
          "content": {
            "title": "Content",
            "maxLength": 1025,
            "type": "string",
            "description": "Content of comment."
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "CreateCampaignRequestSchema": {
        "title": "CreateCampaignRequestSchema",
        "required": [
          "name",
          "startDate",
          "endDate"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name"
          },
          "startDate": {
            "title": "Startdate",
            "type": "string",
            "description": "Start date",
            "format": "date-time"
          },
          "endDate": {
            "title": "Enddate",
            "type": "string",
            "description": "End date",
            "format": "date-time"
          },
          "fallbackReviewerUserId": {
            "title": "Fallbackrevieweruserid",
            "type": "string",
            "description": "Default: `UserId` connected to the current API-Token. \n Fallback reviewer user ID."
          }
        }
      },
      "CreateCampaignResponseSchema": {
        "title": "CreateCampaignResponseSchema",
        "required": [
          "id",
          "name",
          "startDate",
          "endDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Id"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name"
          },
          "startDate": {
            "title": "Startdate",
            "type": "string",
            "description": "Start date",
            "format": "date-time"
          },
          "endDate": {
            "title": "Enddate",
            "type": "string",
            "description": "End date",
            "format": "date-time"
          },
          "fallbackReviewerUserId": {
            "title": "Fallbackrevieweruserid",
            "type": "string",
            "description": "Default: `UserId` connected to the current API-Token. \n Fallback reviewer user ID."
          },
          "status": {
            "title": "status",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignStatus"
              }
            ],
            "description": "status",
            "default": "initializing"
          },
          "isDeleted": {
            "title": "Isdeleted",
            "type": "boolean",
            "description": "Is deleted",
            "default": false
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "Created at",
            "format": "date-time"
          }
        }
      },
      "DateFilterAllowedValues": {
        "title": "DateFilterAllowedValues",
        "enum": [
          "Yesterday",
          "Last Week",
          "Last Month",
          "Last 3 Months",
          "Last 6 Months",
          "Last Year"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "EmailFilter": {
        "title": "EmailFilter",
        "type": "object",
        "properties": {
          "$in": {
            "title": "$In",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "EntitlementSelections": {
        "title": "EntitlementSelections",
        "enum": [
          "keep",
          "revoke",
          "change"
        ],
        "description": "An enumeration."
      },
      "EventStatusType": {
        "title": "EventStatusType",
        "enum": [
          "Open",
          "InProgress",
          "WaitingForInput",
          "Closed"
        ],
        "description": "An enumeration."
      },
      "FieldName": {
        "title": "FieldName",
        "enum": [
          "name",
          "status",
          "startDate",
          "endDate",
          "createdAt",
          "reviewerType",
          "templateName"
        ],
        "description": "An enumeration."
      },
      "GroupExpansion": {
        "title": "GroupExpansion",
        "enum": [
          "sourceApp",
          "tags"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "GroupMembership": {
        "title": "GroupMembership",
        "type": "object",
        "properties": {
          "actorName": {
            "title": "Actorname",
            "type": "string",
            "description": "Name of the member."
          },
          "actorType": {
            "title": "Actortype",
            "type": "string",
            "description": "Type of the member"
          },
          "actorAuthomizeId": {
            "title": "Actorauthomizeid",
            "type": "string",
            "description": "Authomizer ID of the member."
          },
          "actorOriginId": {
            "title": "Actororiginid",
            "type": "string",
            "description": "Origin ID of the member~"
          }
        }
      },
      "GroupSchema": {
        "title": "GroupSchema",
        "required": [
          "authomizeId"
        ],
        "type": "object",
        "properties": {
          "authomizeId": {
            "title": "Authomizeid",
            "type": "string",
            "description": "Authomize ID of the Group."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the Group."
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Type of the group."
          },
          "incidentsCount": {
            "title": "Incidentscount",
            "type": "integer",
            "description": "Number of incidents associated with the group."
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSchema"
            },
            "description": "List of tags associated with the group",
            "default": []
          },
          "members": {
            "title": "Members",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMembership"
            },
            "description": "Entities that have direct access to the group.",
            "default": []
          },
          "sourceApp": {
            "title": "Sourceapp",
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceAppSchema"
              }
            ],
            "description": "Authomize ID of the Group."
          },
          "ownerId": {
            "title": "Ownerid",
            "type": "string",
            "description": "Authomize ID of the Group Owner."
          },
          "originId": {
            "title": "Originid",
            "type": "string",
            "description": "The ID of the group on the source system"
          },
          "uniqueId": {
            "title": "Uniqueid",
            "type": "string",
            "description": "The unique ID of the group (as provided by the connector)"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "Date when group was created."
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "Type of the group in source system."
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "HiredAtFilter": {
        "title": "HiredAtFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFilterAllowedValues"
              }
            ],
            "description": "Equals To"
          }
        },
        "additionalProperties": false
      },
      "IdFilter": {
        "title": "IdFilter",
        "type": "object",
        "properties": {
          "$in": {
            "title": "$In",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "IdentitiesBlastRadiusRiskFilter": {
        "title": "IdentitiesBlastRadiusRiskFilter",
        "type": "object",
        "properties": {
          "$in": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskSeverity"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "IdentitiesOverallRisk": {
        "title": "IdentitiesOverallRisk",
        "type": "object",
        "properties": {
          "$in": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskSeverity"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "IdentitiesTakeoverRiskFilter": {
        "title": "IdentitiesTakeoverRiskFilter",
        "type": "object",
        "properties": {
          "$in": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskSeverity"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "IdentityExpansion": {
        "title": "IdentityExpansion",
        "enum": [
          "account",
          "tags"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "IdentityRiskScore": {
        "title": "IdentityRiskScore",
        "type": "object",
        "properties": {
          "takeoverRiskScore": {
            "title": "Takeoverriskscore",
            "type": "integer",
            "description": "Takeover Risk Score"
          },
          "blastRadiusRiskScore": {
            "title": "Blastradiusriskscore",
            "type": "integer",
            "description": "Blast Radius Risk Score"
          },
          "overallRiskScore": {
            "title": "Overallriskscore",
            "type": "integer",
            "description": "Summary Risk Score"
          }
        }
      },
      "IdentitySchema": {
        "title": "IdentitySchema",
        "required": [
          "authomizeId"
        ],
        "type": "object",
        "properties": {
          "authomizeId": {
            "title": "Authomizeid",
            "type": "string",
            "description": "Unique ID"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the identity"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "Title of the identity"
          },
          "department": {
            "title": "Department",
            "type": "string",
            "description": "The department in which the identity works"
          },
          "accountIds": {
            "title": "Accountids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The account IDs associated with the identity",
            "default": []
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "The email of the identity"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSchema"
            },
            "description": "The tags provided for the identity",
            "default": []
          },
          "terminatedAt": {
            "title": "Terminatedat",
            "type": "string",
            "description": "Time of termination"
          },
          "hiredAt": {
            "title": "Hiredat",
            "type": "string",
            "description": "Hired At"
          },
          "incidentsCount": {
            "title": "Incidentscount",
            "type": "integer",
            "description": "Number of associated incidents"
          },
          "accounts": {
            "title": "Accounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountSchema"
            },
            "description": "List of associated user or service accounts",
            "default": []
          },
          "riskScore": {
            "title": "Riskscore",
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityRiskScore"
              }
            ],
            "description": "Risk Scores"
          }
        }
      },
      "IncidentEntitiesSchema": {
        "title": "IncidentEntitiesSchema",
        "required": [
          "id",
          "object"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique id of entity."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of entity."
          },
          "object": {
            "title": "Object",
            "anyOf": [
              {
                "$ref": "#/components/schemas/InventoryObjects"
              },
              {
                "type": "string"
              }
            ],
            "description": "Identity | Account | Asset"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email"
          },
          "originId": {
            "title": "Originid",
            "type": "string",
            "description": "Origin ID"
          },
          "originType": {
            "title": "Origintype",
            "type": "string",
            "description": "Origin Type"
          },
          "riskScore": {
            "title": "Riskscore",
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityRiskScore"
              }
            ],
            "description": "Risk Scores"
          },
          "sourceApp": {
            "title": "Sourceapp",
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceAppSchema"
              }
            ],
            "description": "Applications"
          }
        }
      },
      "IncidentExpansion": {
        "title": "IncidentExpansion",
        "enum": [
          "policy",
          "assignee"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "IncidentSchema": {
        "title": "IncidentSchema",
        "required": [
          "id",
          "severity",
          "policyId",
          "isResolved",
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique id"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "description": "The date the incident was first reported.",
            "format": "date-time"
          },
          "updatedAt": {
            "title": "Updatedat",
            "type": "string",
            "description": "The date the incident was last updated.",
            "format": "date-time"
          },
          "entities": {
            "title": "Entities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentEntitiesSchema"
            },
            "description": "Entity",
            "default": []
          },
          "apps": {
            "title": "Apps",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceAppSchema"
            },
            "description": "Applications",
            "default": []
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlertCategoryType"
              }
            ],
            "description": "Category"
          },
          "tactics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttackTacticType"
            },
            "description": "Tactics",
            "default": []
          },
          "compliance": {
            "title": "Compliance",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/IsoIec27001"
                },
                {
                  "$ref": "#/components/schemas/AicpaTsc2017"
                },
                {
                  "$ref": "#/components/schemas/Ccm402"
                },
                {
                  "$ref": "#/components/schemas/Ccm301"
                },
                {
                  "$ref": "#/components/schemas/Cisv8"
                }
              ]
            },
            "description": "Compliance",
            "default": []
          },
          "techniques": {
            "title": "Techniques",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Techniques",
            "default": []
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventStatusType"
              }
            ],
            "description": "The status of the incident (Open, In Progress, Waiting for Input, or Closed)"
          },
          "severity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SeverityType"
              }
            ],
            "description": "The severity of the incident (Low, Medium, High or Critical)."
          },
          "policyId": {
            "title": "Policyid",
            "type": "string",
            "description": "Unique id of policy."
          },
          "policy": {
            "title": "Policy",
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicySchema"
              }
            ],
            "description": "Policy"
          },
          "assigneeId": {
            "title": "Assigneeid",
            "type": "string",
            "description": "Unique id of assignee."
          },
          "assignee": {
            "title": "Assignee",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSchema"
              }
            ],
            "description": "Assignee"
          },
          "recommendation": {
            "title": "Recommendation",
            "type": "string",
            "description": "Recommendation"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description"
          },
          "isResolved": {
            "title": "Isresolved",
            "type": "boolean",
            "description": "Is Resolved?"
          },
          "url": {
            "title": "Url",
            "type": "string",
            "description": "URL"
          }
        }
      },
      "IncidentsCreatedAtFilter": {
        "title": "IncidentsCreatedAtFilter",
        "type": "object",
        "properties": {
          "$lte": {
            "title": "$Lte",
            "type": "string",
            "description": "Less Than Or Equals To",
            "format": "date-time"
          },
          "$gte": {
            "title": "$Gte",
            "type": "string",
            "description": "Greater Than Or Equals To",
            "format": "date-time"
          },
          "$lt": {
            "title": "$Lt",
            "type": "string",
            "description": "Less Than",
            "format": "date-time"
          },
          "$gt": {
            "title": "$Gt",
            "type": "string",
            "description": "Greater Than",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "IncidentsIsResolvedFilter": {
        "title": "IncidentsIsResolvedFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "title": "$Eq",
            "type": "boolean",
            "description": "Equals To"
          }
        },
        "additionalProperties": false
      },
      "IncidentsPolicyIdFilter": {
        "title": "IncidentsPolicyIdFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "title": "$Eq",
            "type": "string",
            "description": "Equals To"
          }
        },
        "additionalProperties": false
      },
      "IncidentsPolicyTempalteIdFilter": {
        "title": "IncidentsPolicyTempalteIdFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "title": "$Eq",
            "type": "string",
            "description": "Equals To"
          }
        },
        "additionalProperties": false
      },
      "IncidentsSeverityFilter": {
        "title": "IncidentsSeverityFilter",
        "type": "object",
        "properties": {
          "$in": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeverityType"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "IncidentsStatusFilter": {
        "title": "IncidentsStatusFilter",
        "type": "object",
        "properties": {
          "$in": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventStatusType"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "IncidentsUpdatedAtFilter": {
        "title": "IncidentsUpdatedAtFilter",
        "type": "object",
        "properties": {
          "$lte": {
            "title": "$Lte",
            "type": "string",
            "description": "Less Than Or Equals To",
            "format": "date-time"
          },
          "$gte": {
            "title": "$Gte",
            "type": "string",
            "description": "Greater Than Or Equals To",
            "format": "date-time"
          },
          "$lt": {
            "title": "$Lt",
            "type": "string",
            "description": "Less Than",
            "format": "date-time"
          },
          "$gt": {
            "title": "$Gt",
            "type": "string",
            "description": "Greater Than",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "InventoryObjects": {
        "title": "InventoryObjects",
        "enum": [
          "identity",
          "account",
          "asset",
          "privilege",
          "other"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "IsAliveResponse": {
        "title": "IsAliveResponse",
        "required": [
          "isAlive"
        ],
        "type": "object",
        "properties": {
          "isAlive": {
            "title": "Isalive",
            "type": "boolean",
            "description": "**isAlive**"
          }
        }
      },
      "IsExternalFilter": {
        "title": "IsExternalFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "title": "$Eq",
            "type": "boolean",
            "description": "Equals To"
          }
        },
        "additionalProperties": false
      },
      "IsMFAEnabledFilter": {
        "title": "IsMFAEnabledFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "title": "$Eq",
            "type": "boolean",
            "description": "Equals To"
          }
        },
        "additionalProperties": false
      },
      "IsoIec27001": {
        "title": "IsoIec27001",
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IsoIec27001Standard"
            },
            "description": "Values"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "UniqueID",
            "default": "isoIec27001"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name",
            "default": "ISO/IEC 27001"
          }
        }
      },
      "IsoIec27001Standard": {
        "title": "IsoIec27001Standard",
        "enum": [
          "A.6.1.2",
          "A.8.1.1",
          "A.8.1.3",
          "A.8.3.3",
          "A.9.1.1",
          "A.9.2.1",
          "A.9.2.3",
          "A.9.2.6",
          "A.9.4.1",
          "A.9.1.2",
          "A.9.4.2",
          "A.9.2.2",
          "A.13.2.1",
          "A.9.4.3",
          "A.7.2.2",
          "A.9.4.5",
          "A.8.2.3",
          "A.7.3.1",
          "A.8.1.4"
        ],
        "description": "An enumeration."
      },
      "LastLoginAtFilter": {
        "title": "LastLoginAtFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFilterAllowedValues"
              }
            ],
            "description": "Equals To"
          }
        },
        "additionalProperties": false
      },
      "MeResponse": {
        "title": "MeResponse",
        "required": [
          "id",
          "tenant"
        ],
        "type": "object",
        "properties": {
          "version": {
            "title": "Version",
            "type": "string",
            "description": "**version**",
            "default": "4.5.0"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "**id**"
          },
          "tenant": {
            "title": "Tenant",
            "type": "string",
            "description": "**tenant**"
          }
        }
      },
      "NonPaginatedResponseSchema_CampaignSchema_": {
        "title": "NonPaginatedResponseSchema[CampaignSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "anyOf": [
              {
                "$ref": "#/components/schemas/CampaignSchema"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CampaignSchema"
                }
              }
            ],
            "description": "Actual Data"
          }
        },
        "additionalProperties": false
      },
      "NonPaginatedResponseSchema_CommentSchema_": {
        "title": "NonPaginatedResponseSchema[CommentSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "anyOf": [
              {
                "$ref": "#/components/schemas/CommentSchema"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CommentSchema"
                }
              }
            ],
            "description": "Actual Data"
          }
        },
        "additionalProperties": false
      },
      "NonPaginatedResponseSchema_IncidentSchema_": {
        "title": "NonPaginatedResponseSchema[IncidentSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "anyOf": [
              {
                "$ref": "#/components/schemas/IncidentSchema"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IncidentSchema"
                }
              }
            ],
            "description": "Actual Data"
          }
        },
        "additionalProperties": false
      },
      "NonPaginatedResponseSchema_ReviewerSchema_": {
        "title": "NonPaginatedResponseSchema[ReviewerSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReviewerSchema"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReviewerSchema"
                }
              }
            ],
            "description": "Actual Data"
          }
        },
        "additionalProperties": false
      },
      "NonPaginatedResponseSchema_SearchSourceAppsResponseSchema_": {
        "title": "NonPaginatedResponseSchema[SearchSourceAppsResponseSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "anyOf": [
              {
                "$ref": "#/components/schemas/SearchSourceAppsResponseSchema"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SearchSourceAppsResponseSchema"
                }
              }
            ],
            "description": "Actual Data"
          }
        },
        "additionalProperties": false
      },
      "OkResponse": {
        "title": "OkResponse",
        "type": "object",
        "properties": {
          "ok": {
            "title": "Ok",
            "type": "boolean",
            "description": "OK\n",
            "default": true
          }
        }
      },
      "OriginIdFilter": {
        "title": "OriginIdFilter",
        "type": "object",
        "properties": {
          "$in": {
            "title": "$In",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "PaginatedResponseSchema_AccountSchema_": {
        "title": "PaginatedResponseSchema[AccountSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResponseSchema"
              }
            ],
            "description": "Pagination Metadata"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountSchema"
            },
            "description": "List of Actual Data"
          }
        },
        "additionalProperties": false
      },
      "PaginatedResponseSchema_AssetSchema_": {
        "title": "PaginatedResponseSchema[AssetSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResponseSchema"
              }
            ],
            "description": "Pagination Metadata"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetSchema"
            },
            "description": "List of Actual Data"
          }
        },
        "additionalProperties": false
      },
      "PaginatedResponseSchema_CampaignSchema_": {
        "title": "PaginatedResponseSchema[CampaignSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResponseSchema"
              }
            ],
            "description": "Pagination Metadata"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignSchema"
            },
            "description": "List of Actual Data"
          }
        },
        "additionalProperties": false
      },
      "PaginatedResponseSchema_CampaignsPermissionSchema_": {
        "title": "PaginatedResponseSchema[CampaignsPermissionSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResponseSchema"
              }
            ],
            "description": "Pagination Metadata"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignsPermissionSchema"
            },
            "description": "List of Actual Data"
          }
        },
        "additionalProperties": false
      },
      "PaginatedResponseSchema_GroupSchema_": {
        "title": "PaginatedResponseSchema[GroupSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResponseSchema"
              }
            ],
            "description": "Pagination Metadata"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupSchema"
            },
            "description": "List of Actual Data"
          }
        },
        "additionalProperties": false
      },
      "PaginatedResponseSchema_IdentitySchema_": {
        "title": "PaginatedResponseSchema[IdentitySchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResponseSchema"
              }
            ],
            "description": "Pagination Metadata"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentitySchema"
            },
            "description": "List of Actual Data"
          }
        },
        "additionalProperties": false
      },
      "PaginatedResponseSchema_IncidentSchema_": {
        "title": "PaginatedResponseSchema[IncidentSchema]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResponseSchema"
              }
            ],
            "description": "Pagination Metadata"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentSchema"
            },
            "description": "List of Actual Data"
          }
        },
        "additionalProperties": false
      },
      "PaginationRequestSchema": {
        "title": "PaginationRequestSchema",
        "type": "object",
        "properties": {
          "limit": {
            "title": "Limit",
            "type": "integer",
            "description": "Limit the number of identities per page"
          },
          "nextPage": {
            "title": "NextPage",
            "type": "string",
            "description": "Token denoting start of next page"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "PaginationResponseSchema": {
        "title": "PaginationResponseSchema",
        "type": "object",
        "properties": {
          "limit": {
            "title": "Limit",
            "type": "integer",
            "description": "Limit the number of identities per page",
            "default": 20
          },
          "hasMore": {
            "title": "HasMore",
            "type": "boolean",
            "description": "Indicates that more data is available"
          },
          "nextPage": {
            "title": "NextPage",
            "type": "string",
            "description": "Token denoting start of next page"
          }
        },
        "description": "Common pagination model that has been used across services."
      },
      "PermissionsExpansion": {
        "title": "PermissionsExpansion",
        "enum": [
          "reviewer.user"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "PolicySchema": {
        "title": "PolicySchema",
        "required": [
          "id",
          "name",
          "templateId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique id of policy."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of policy."
          },
          "templateId": {
            "title": "Templateid",
            "type": "string",
            "description": "Template ID"
          }
        }
      },
      "RawIdentitySchema": {
        "title": "RawIdentitySchema",
        "required": [
          "authomizeId"
        ],
        "type": "object",
        "properties": {
          "authomizeId": {
            "title": "Authomizeid",
            "type": "string",
            "description": "Unique ID"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the identity"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "Title of the identity"
          },
          "department": {
            "title": "Department",
            "type": "string",
            "description": "The department in which the identity works"
          },
          "accountIds": {
            "title": "Accountids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The account IDs associated with the identity",
            "default": []
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "The email of the identity"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagSchema"
            },
            "description": "The tags provided for the identity",
            "default": []
          },
          "terminatedAt": {
            "title": "Terminatedat",
            "type": "string",
            "description": "Time of termination"
          },
          "hiredAt": {
            "title": "Hiredat",
            "type": "string",
            "description": "Hired At"
          },
          "incidentsCount": {
            "title": "Incidentscount",
            "type": "integer",
            "description": "Number of associated incidents"
          }
        }
      },
      "RemoveIdentityRisksRequestSchema": {
        "title": "RemoveIdentityRisksRequestSchema",
        "required": [
          "since"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchIdentitiesFilterBody"
              }
            ],
            "description": "Search filter options"
          },
          "since": {
            "title": "Since",
            "type": "string",
            "description": "Delete the risk score data lastly updated before the given date.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "ReviewStatus": {
        "title": "ReviewStatus",
        "enum": [
          "pending",
          "completed",
          "reviewing",
          "notified",
          "inactive"
        ],
        "description": "An enumeration."
      },
      "ReviewerExpansion": {
        "title": "ReviewerExpansion",
        "enum": [
          "user"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ReviewerSchema": {
        "title": "ReviewerSchema",
        "required": [
          "id",
          "reviewStatus"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique ID"
          },
          "reviewStatus": {
            "title": "Reviewstatus",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReviewStatus"
              },
              {
                "type": "string"
              }
            ],
            "description": "Review Status"
          },
          "user": {
            "title": "User",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSchema"
              }
            ],
            "description": "User Schema of the reviewer"
          }
        }
      },
      "RiskFactorIn": {
        "title": "RiskFactorIn",
        "required": [
          "score",
          "title",
          "description"
        ],
        "type": "object",
        "properties": {
          "score": {
            "title": "Score",
            "maximum": 100.0,
            "minimum": 0.0,
            "type": "integer",
            "description": "The risk score can be an integer between 0 and 100."
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The title of the risk factor that should be displayed on the UI.\n"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the risk score parameter."
          },
          "modifiedAt": {
            "title": "Modifiedat",
            "type": "string",
            "description": "Automatically set modification time. Automatically generated.\n",
            "format": "date-time"
          }
        }
      },
      "RiskSeverity": {
        "title": "RiskSeverity",
        "enum": [
          "Critical",
          "High",
          "Medium",
          "Low"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SearchAccountsFilterBody": {
        "title": "SearchAccountsFilterBody",
        "type": "object",
        "properties": {
          "originId": {
            "title": "Originid",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchAccountsOriginIdFilter"
              }
            ],
            "description": "Find accounts by their ID in the source system"
          },
          "authomizeId": {
            "title": "Authomizeid",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchAccountsIdFilter"
              }
            ],
            "description": "Find accounts by their Authomize ID"
          },
          "blastRadiusRisk": {
            "title": "Blastradiusrisk",
            "allOf": [
              {
                "$ref": "#/components/schemas/BlastRadiusRiskFilter"
              }
            ],
            "description": "The blast radius present the impact of an account to be taken over, based on the access and type of access the account have."
          },
          "isExternal": {
            "title": "Isexternal",
            "allOf": [
              {
                "$ref": "#/components/schemas/IsExternalFilter"
              }
            ],
            "description": "Is the account external or internal."
          },
          "isMfaEnabled": {
            "title": "Ismfaenabled",
            "allOf": [
              {
                "$ref": "#/components/schemas/IsMFAEnabledFilter"
              }
            ],
            "description": "Is MFA enabled or disabled."
          },
          "lastLoginAt": {
            "title": "Lastloginat",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastLoginAtFilter"
              }
            ],
            "description": "Date of the last login in a specific application."
          },
          "sourceAppId": {
            "title": "Sourceappid",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountSourceAppIdFilter"
              }
            ],
            "description": "The ID of the source application."
          },
          "takeoverRisk": {
            "title": "Takeoverrisk",
            "allOf": [
              {
                "$ref": "#/components/schemas/TakeoverRiskFilter"
              }
            ],
            "description": "The account takeover risk presents the probability that an account will be taken over by an external identity."
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchAccountsIdFilter": {
        "title": "SearchAccountsIdFilter",
        "type": "object",
        "properties": {
          "$in": {
            "title": "$In",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "SearchAccountsOriginIdFilter": {
        "title": "SearchAccountsOriginIdFilter",
        "type": "object",
        "properties": {
          "$in": {
            "title": "$In",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "SearchAccountsRequestSchema": {
        "title": "SearchAccountsRequestSchema",
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationRequestSchema"
              }
            ],
            "description": "Pagination metadata"
          },
          "expand": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountExpansion"
            },
            "description": "Expand Fields"
          },
          "sort": {
            "title": "Sort",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSchema_SearchAccountsSortFields_"
            },
            "description": "Sort the results by account fields in ascending or descending order"
          },
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchAccountsFilterBody"
              }
            ],
            "description": "Search Accounts Filter"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchAccountsSortFields": {
        "title": "SearchAccountsSortFields",
        "enum": [
          "account.name"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SearchAssetsFilterBody": {
        "title": "SearchAssetsFilterBody",
        "type": "object",
        "properties": {
          "originId": {
            "title": "Originid",
            "allOf": [
              {
                "$ref": "#/components/schemas/OriginIdFilter"
              }
            ],
            "description": "Find assets by their ID in the source system"
          },
          "appId": {
            "title": "Appid",
            "allOf": [
              {
                "$ref": "#/components/schemas/AppIdFilter"
              }
            ],
            "description": "Find assets by their app ID"
          },
          "uniqueId": {
            "title": "Uniqueid",
            "allOf": [
              {
                "$ref": "#/components/schemas/UniqueIdFilter"
              }
            ],
            "description": "Find assets by their unique ID"
          },
          "authomizeId": {
            "title": "Authomizeid",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetIdFilter"
              }
            ],
            "description": "Find assets by their Authomize ID"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchAssetsRequestSchema": {
        "title": "SearchAssetsRequestSchema",
        "type": "object",
        "properties": {
          "sort": {
            "title": "Sort",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSchema_SearchAssetsSortFields_"
            },
            "description": "Sort the results by asset's name in ascending or descending order"
          },
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationRequestSchema"
              }
            ],
            "description": "Pagination metadata"
          },
          "expand": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetExpansion"
            },
            "description": "Expand fields (to show additional information)"
          },
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchAssetsFilterBody"
              }
            ],
            "description": "Search Assets Filter"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchAssetsSortFields": {
        "title": "SearchAssetsSortFields",
        "enum": [
          "asset.name"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SearchCampaignPermissionsRequestSchema": {
        "title": "SearchCampaignPermissionsRequestSchema",
        "type": "object",
        "properties": {
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationRequestSchema"
              }
            ],
            "description": "Pagination metadata"
          },
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignPermissionsSearchFilterBody"
              }
            ],
            "description": "Filter by the reviewer decisions. \n"
          },
          "expand": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsExpansion"
            },
            "description": "Fields to expand.\n"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchCampaignsRequestSchema": {
        "title": "SearchCampaignsRequestSchema",
        "type": "object",
        "properties": {
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignSearchFilterBody"
              }
            ],
            "description": "Status filter"
          },
          "expand": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignExpansion"
            },
            "description": "Expand Fields"
          },
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationRequestSchema"
              }
            ],
            "description": "Pagination metadata"
          },
          "sort": {
            "title": "Sort",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSchema_FieldName_"
            },
            "description": "Sort the results by campaign fields in ascending or descending order"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchGroupsAppIdFilter": {
        "title": "SearchGroupsAppIdFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "title": "$Eq",
            "type": "string",
            "description": "Equals To"
          }
        },
        "additionalProperties": false
      },
      "SearchGroupsFilterBody": {
        "title": "SearchGroupsFilterBody",
        "type": "object",
        "properties": {
          "uniqueId": {
            "title": "Uniqueid",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchGroupsUniqueIdFilter"
              }
            ],
            "description": "Find groups by their unique ID"
          },
          "originId": {
            "title": "Originid",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchGroupsOriginIdFilter"
              }
            ],
            "description": "Find groups by their ID in the source system"
          },
          "appId": {
            "title": "Appid",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchGroupsAppIdFilter"
              }
            ],
            "description": "Find groups by their app ID"
          },
          "authomizeId": {
            "title": "Authomizeid",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchGroupsIdFilter"
              }
            ],
            "description": "Find groups by their Authomize ID"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchGroupsIdFilter": {
        "title": "SearchGroupsIdFilter",
        "type": "object",
        "properties": {
          "$in": {
            "title": "$In",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "SearchGroupsOriginIdFilter": {
        "title": "SearchGroupsOriginIdFilter",
        "type": "object",
        "properties": {
          "$in": {
            "title": "$In",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "SearchGroupsRequestSchema": {
        "title": "SearchGroupsRequestSchema",
        "type": "object",
        "properties": {
          "sort": {
            "title": "Sort",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSchema_SearchGroupsSortFields_"
            },
            "description": "Sort the results by group's name in ascending or descending order"
          },
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationRequestSchema"
              }
            ],
            "description": "Pagination metadata"
          },
          "expand": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupExpansion"
            },
            "description": "Expand fields (to show additional information)"
          },
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchGroupsFilterBody"
              }
            ],
            "description": "Search Groups Filter"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchGroupsSortFields": {
        "title": "SearchGroupsSortFields",
        "enum": [
          "group.name"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SearchGroupsUniqueIdFilter": {
        "title": "SearchGroupsUniqueIdFilter",
        "type": "object",
        "properties": {
          "$in": {
            "title": "$In",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "SearchIdentitiesFilterBody": {
        "title": "SearchIdentitiesFilterBody",
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailFilter"
              }
            ],
            "description": "Find identities by their email address"
          },
          "authomizeId": {
            "title": "Authomizeid",
            "allOf": [
              {
                "$ref": "#/components/schemas/IdFilter"
              }
            ],
            "description": "Find identities by their Authomize ID"
          },
          "blastRadiusRisk": {
            "title": "Blastradiusrisk",
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentitiesBlastRadiusRiskFilter"
              }
            ],
            "description": "The blast radius present the impact of the identity to be taken over, based on the access and type of access the account have."
          },
          "takeoverRisk": {
            "title": "Takeoverrisk",
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentitiesTakeoverRiskFilter"
              }
            ],
            "description": "The account takeover risk presents the probability that the identity to be taken over by an external identity."
          },
          "overallRisk": {
            "title": "Overallrisk",
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentitiesOverallRisk"
              }
            ],
            "description": "The overall risk score of the identity, based on the blast radius and account take over risk."
          },
          "hiredAt": {
            "title": "Hiredat",
            "allOf": [
              {
                "$ref": "#/components/schemas/HiredAtFilter"
              }
            ],
            "description": "Date of hired."
          },
          "terminatedAt": {
            "title": "Terminatedat",
            "allOf": [
              {
                "$ref": "#/components/schemas/TerminatedAtFilter"
              }
            ],
            "description": "Date of termination."
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchIdentitiesRequestSchema": {
        "title": "SearchIdentitiesRequestSchema",
        "type": "object",
        "properties": {
          "sort": {
            "title": "Sort",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSchema_SearchIdentitiesSortFields_"
            },
            "description": "Sort the results by identity name in ascending or descending order"
          },
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationRequestSchema"
              }
            ],
            "description": "Pagination metadata"
          },
          "expand": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityExpansion"
            },
            "description": "Expand the account or tag fields to get additional data on related accounts or related tags"
          },
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchIdentitiesFilterBody"
              }
            ],
            "description": "Search filter options"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchIdentitiesSortFields": {
        "title": "SearchIdentitiesSortFields",
        "enum": [
          "identity.name"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SearchIncidentsFilter": {
        "title": "SearchIncidentsFilter",
        "type": "object",
        "properties": {
          "createdAt": {
            "title": "Createdat",
            "allOf": [
              {
                "$ref": "#/components/schemas/IncidentsCreatedAtFilter"
              }
            ],
            "description": "Created At date"
          },
          "updatedAt": {
            "title": "Updatedat",
            "allOf": [
              {
                "$ref": "#/components/schemas/IncidentsUpdatedAtFilter"
              }
            ],
            "description": "Updated At date"
          },
          "severity": {
            "title": "Severity",
            "allOf": [
              {
                "$ref": "#/components/schemas/IncidentsSeverityFilter"
              }
            ],
            "description": "Severity"
          },
          "status": {
            "title": "Status",
            "allOf": [
              {
                "$ref": "#/components/schemas/IncidentsStatusFilter"
              }
            ],
            "description": "Status"
          },
          "policyId": {
            "title": "Policyid",
            "allOf": [
              {
                "$ref": "#/components/schemas/IncidentsPolicyIdFilter"
              }
            ],
            "description": "Policy Id "
          },
          "policyTemplateId": {
            "title": "Policytemplateid",
            "allOf": [
              {
                "$ref": "#/components/schemas/IncidentsPolicyTempalteIdFilter"
              }
            ],
            "description": "Policy Template ID"
          },
          "isResolved": {
            "title": "Isresolved",
            "allOf": [
              {
                "$ref": "#/components/schemas/IncidentsIsResolvedFilter"
              }
            ],
            "description": "Is resolved?"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchIncidentsRequestSchema": {
        "title": "SearchIncidentsRequestSchema",
        "type": "object",
        "properties": {
          "filter": {
            "title": "Filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchIncidentsFilter"
              }
            ],
            "description": "Filter"
          },
          "expand": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentExpansion"
            },
            "description": "Expend"
          },
          "sort": {
            "title": "Sort",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSchema_SearchIncidentsSortFields_"
            },
            "description": "Sort the results by incident fields in ascending or descending order"
          },
          "pagination": {
            "title": "Pagination",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationRequestSchema"
              }
            ],
            "description": "Pagination metadata"
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "SearchIncidentsSortFields": {
        "title": "SearchIncidentsSortFields",
        "enum": [
          "createdAt",
          "updatedAt",
          "severity",
          "status"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SearchSourceAppsResponseSchema": {
        "title": "SearchSourceAppsResponseSchema",
        "required": [
          "authomizeId",
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "authomizeId": {
            "title": "Authomizeid",
            "type": "string",
            "description": "Authomize ID of source application"
          },
          "uniqueId": {
            "title": "Uniqueid",
            "type": "string",
            "description": "The unique ID of the asset (as provided by the connector)"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the asset (for example, application, virtual machine, file, etc.)"
          }
        }
      },
      "Selection": {
        "title": "Selection",
        "enum": [
          "keep",
          "revoke",
          "change",
          "null"
        ],
        "description": "An enumeration."
      },
      "SeverityType": {
        "title": "SeverityType",
        "enum": [
          "Low",
          "Medium",
          "High",
          "Critical"
        ],
        "description": "An enumeration."
      },
      "SortOrder": {
        "title": "SortOrder",
        "enum": [
          "ASC",
          "DESC"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SortSchema_FieldName_": {
        "title": "SortSchema[FieldName]",
        "required": [
          "fieldName"
        ],
        "type": "object",
        "properties": {
          "fieldName": {
            "title": "FieldName",
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldName"
              }
            ],
            "description": "Sort the results by field name"
          },
          "order": {
            "title": "Order",
            "allOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              }
            ],
            "description": "Sort by ascending or descending order (ascending is the default)",
            "default": "ASC"
          }
        },
        "additionalProperties": false
      },
      "SortSchema_SearchAccountsSortFields_": {
        "title": "SortSchema[SearchAccountsSortFields]",
        "required": [
          "fieldName"
        ],
        "type": "object",
        "properties": {
          "fieldName": {
            "title": "FieldName",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchAccountsSortFields"
              }
            ],
            "description": "Sort the results by field name"
          },
          "order": {
            "title": "Order",
            "allOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              }
            ],
            "description": "Sort by ascending or descending order (ascending is the default)",
            "default": "ASC"
          }
        },
        "additionalProperties": false
      },
      "SortSchema_SearchAssetsSortFields_": {
        "title": "SortSchema[SearchAssetsSortFields]",
        "required": [
          "fieldName"
        ],
        "type": "object",
        "properties": {
          "fieldName": {
            "title": "FieldName",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchAssetsSortFields"
              }
            ],
            "description": "Sort the results by field name"
          },
          "order": {
            "title": "Order",
            "allOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              }
            ],
            "description": "Sort by ascending or descending order (ascending is the default)",
            "default": "ASC"
          }
        },
        "additionalProperties": false
      },
      "SortSchema_SearchGroupsSortFields_": {
        "title": "SortSchema[SearchGroupsSortFields]",
        "required": [
          "fieldName"
        ],
        "type": "object",
        "properties": {
          "fieldName": {
            "title": "FieldName",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchGroupsSortFields"
              }
            ],
            "description": "Sort the results by field name"
          },
          "order": {
            "title": "Order",
            "allOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              }
            ],
            "description": "Sort by ascending or descending order (ascending is the default)",
            "default": "ASC"
          }
        },
        "additionalProperties": false
      },
      "SortSchema_SearchIdentitiesSortFields_": {
        "title": "SortSchema[SearchIdentitiesSortFields]",
        "required": [
          "fieldName"
        ],
        "type": "object",
        "properties": {
          "fieldName": {
            "title": "FieldName",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchIdentitiesSortFields"
              }
            ],
            "description": "Sort the results by field name"
          },
          "order": {
            "title": "Order",
            "allOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              }
            ],
            "description": "Sort by ascending or descending order (ascending is the default)",
            "default": "ASC"
          }
        },
        "additionalProperties": false
      },
      "SortSchema_SearchIncidentsSortFields_": {
        "title": "SortSchema[SearchIncidentsSortFields]",
        "required": [
          "fieldName"
        ],
        "type": "object",
        "properties": {
          "fieldName": {
            "title": "FieldName",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchIncidentsSortFields"
              }
            ],
            "description": "Sort the results by field name"
          },
          "order": {
            "title": "Order",
            "allOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              }
            ],
            "description": "Sort by ascending or descending order (ascending is the default)",
            "default": "ASC"
          }
        },
        "additionalProperties": false
      },
      "SourceAppSchema": {
        "title": "SourceAppSchema",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Authomize ID of source application"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the asset (for example, application, virtual machine, file, etc.)"
          }
        }
      },
      "TagSchema": {
        "title": "TagSchema",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Authomize ID for the Tag"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the tag"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the tag"
          }
        }
      },
      "TakeoverRiskFilter": {
        "title": "TakeoverRiskFilter",
        "type": "object",
        "properties": {
          "$in": {
            "title": "$In",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "TerminatedAtFilter": {
        "title": "TerminatedAtFilter",
        "type": "object",
        "properties": {
          "$eq": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFilterAllowedValues"
              }
            ],
            "description": "Equals To"
          }
        },
        "additionalProperties": false
      },
      "UniqueIdFilter": {
        "title": "UniqueIdFilter",
        "type": "object",
        "properties": {
          "$in": {
            "title": "$In",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "In",
            "default": []
          }
        },
        "additionalProperties": false
      },
      "UpdateIncidentRequestSchema": {
        "title": "UpdateIncidentRequestSchema",
        "type": "object",
        "properties": {
          "assigneeId": {
            "title": "Assigneeid",
            "type": "string",
            "description": "ID of the entity assigned to this incident."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventStatusType"
              }
            ],
            "description": "The status of the incident (Open, InProgress, WaitingForInput, or Closed)."
          },
          "severity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SeverityType"
              }
            ],
            "description": "The severity of the incident (Low, Medium, High or Critical)."
          }
        },
        "additionalProperties": false,
        "description": "Base schema for all incoming API requests."
      },
      "UserSchema": {
        "title": "UserSchema",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique ID"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "First Name"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "Last Name"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email"
          }
        }
      },
      "UserStatus": {
        "title": "UserStatus",
        "enum": [
          "Deleted",
          "Disabled",
          "Enabled",
          "Staged",
          "Suspended",
          "Unknown"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  },
  "tags": [
    {
      "name": "Status",
      "description": "The status of the API.\n"
    },
    {
      "name": "Incident",
      "description": "The Incidents APIs enable you to pull Authomize-generated incidents from Authomize into your automated Incident Response system. Once you have responded to the incident you can use Authomize Incident APIs to update (and synchronize) the incident on Authomize."
    },
    {
      "name": "Campaign",
      "description": "Campaign APIs enable you to pull all the decisions from the campaign (keep or revoke) and to automate the revocation process to remove unnecessary permissions.\nCampaign APIs also enable you to pull basic details on the campaigns and to pull a list of all campaigns.\n"
    },
    {
      "name": "Inventory",
      "description": "Inventory APIs can be used to find identities and assets"
    }
  ]
}
